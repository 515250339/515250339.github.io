<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心瘾</title>
  
  
  <link href="https://wyx6.top/atom.xml" rel="self"/>
  
  <link href="https://wyx6.top/"/>
  <updated>2020-12-28T09:17:05.301Z</updated>
  <id>https://wyx6.top/</id>
  
  <author>
    <name>王彦翔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django2.0.4+vue沙箱支付工厂模式之微信、支付宝、PayPal</title>
    <link href="https://wyx6.top/2020/12/28/django2-0-4-vue%E6%94%AF%E4%BB%98%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BE%AE%E4%BF%A1%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81PalPay/"/>
    <id>https://wyx6.top/2020/12/28/django2-0-4-vue%E6%94%AF%E4%BB%98%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BE%AE%E4%BF%A1%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81PalPay/</id>
    <published>2020-12-28T09:17:05.000Z</published>
    <updated>2020-12-28T09:17:05.301Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式我们在之前已经使用过了  当时我们做的是三方登录 <a href="https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/">有兴趣的可以戳这里</a></p><p>所需包</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> mydjango<span class="token punctuation">.</span>settings <span class="token keyword">import</span> alipay<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token keyword">from</span> payment<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> payment<span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> uuid<span class="token keyword">import</span> qrcode<span class="token keyword">import</span> paypalrestsdk</code></pre><h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>大家先去看<a href="https://opendocs.alipay.com/open/291/introduce">官方文档</a></p><p>或者看<a href="https://blog.csdn.net/weixin_45954124/article/details/109583431">我的教程</a></p><p><img src="https://img-blog.csdnimg.cn/20201228163628128.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="settings-py配置"><a href="#settings-py配置" class="headerlink" title="settings.py配置"></a>settings.py配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 支付宝配置</span><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment"># 回调地址</span>RETURN_URL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/pay/ali_back/'</span>app_private_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/app_private_key'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay_public_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/alipay_public'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    appid<span class="token operator">=</span><span class="token string">"2016102500759596"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 默认回调url</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span>  <span class="token comment"># RSA 或者 RSA2</span>    debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 默认False</span><span class="token punctuation">)</span></code></pre><h2 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><p>支付宝生成一个支付地址 跳转即可支付</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Ali</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span><span class="token string">"唯一不重复字符串"</span><span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span><span class="token string">"金额"</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AliBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ali_pay/'</span><span class="token punctuation">,</span> Ali<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> AliBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="微信扫码支付"><a href="#微信扫码支付" class="headerlink" title="微信扫码支付"></a>微信扫码支付</h1><p><img src="https://v3u.cn/v3u/Public/Uploads/1608276523.png" alt="Win10环境前后端分离项目基于Vue.js+Django+Python3实现微信(wechat)扫码支付流程(2021年最新攻略)" loading="lazy"></p><p>大家先去看<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5&index=3">官方文档</a></p><p>或者看[教程</p><p><a href="https://v3u.cn/a_id_182"><img src="https://img-blog.csdnimg.cn/20201228163627495.gif" alt="请添加图片描述" style="zoom:200%;" / loading="lazy"></a></p><h2 id="支付接口！！！"><a href="#支付接口！！！" class="headerlink" title="支付接口！！！"></a>支付接口！！！</h2><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><h3 id="wx-pay-py"><a href="#wx-pay-py" class="headerlink" title="wx_pay.py"></a>wx_pay.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpResponseRedirect<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> qrcode<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">trans_xml_to_dict</span><span class="token punctuation">(</span>data_xml<span class="token punctuation">)</span><span class="token punctuation">:</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>data_xml<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'xml'</span><span class="token punctuation">)</span>    xml <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'xml'</span><span class="token punctuation">)</span>  <span class="token comment"># 解析XML</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> xml<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    data_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> xml<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data_dict<span class="token keyword">def</span> <span class="token function">trans_dict_to_xml</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义字典转XML的函数</span>    data_xml <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历字典排序后的key</span>        v <span class="token operator">=</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span>  <span class="token comment"># 取出字典中key对应的value</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token string">'detail'</span> <span class="token keyword">and</span> <span class="token keyword">not</span> v<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'&lt;![CDATA['</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 添加XML标记</span>            v <span class="token operator">=</span> <span class="token string">'&lt;![CDATA[&#123;&#125;]]>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        data_xml<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&lt;&#123;key&#125;>&#123;value&#125;&lt;/&#123;key&#125;>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token operator">=</span>k<span class="token punctuation">,</span> value<span class="token operator">=</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'&lt;xml>&#123;&#125;&lt;/xml>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_xml<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回XML</span><span class="token keyword">def</span> <span class="token function">get_sign</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 签名函数，参数为签名的数据和密钥</span>    params_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> e<span class="token punctuation">:</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 参数字典倒排序为列表</span>    params_str <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">u"&#123;&#125;=&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> params_list<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;key='</span> <span class="token operator">+</span> key    <span class="token comment"># 组织参数字符串并在末尾添加商户交易密钥</span>    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 使用MD5加密模式</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>params_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将参数字符串传入</span>    sign <span class="token operator">=</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 完成加密并转为大写</span>    <span class="token keyword">return</span> sign</code></pre><p>我们在调用支付接口时就要生成一个订单信息</p><p>微信支付生成二维码</p><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>生成图片在项目文件下 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">class</span> <span class="token class-name">Wx</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="验证支付地址"><a href="#验证支付地址" class="headerlink" title="验证支付地址"></a>验证支付地址</h2><p>微信需要我们去验证一下是否完成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WxBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token string">"order_235117"</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置-1"><a href="#路由配置-1" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'wx_pay/'</span><span class="token punctuation">,</span> Wx<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> WxBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="PayPal-国际支付"><a href="#PayPal-国际支付" class="headerlink" title="PayPal 国际支付"></a>PayPal 国际支付</h1><p><a href="https://github.com/paypal/PayPal-Python-SDK#configuration">官方文档</a></p><p><a href="https://v3u.cn/a_id_157">教程</a></p><img src="https://img-blog.csdnimg.cn/20201228163956125.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h2 id="支付接口-1"><a href="#支付接口-1" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">5.00</span><span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"支付失败"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址-1"><a href="#回调地址-1" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span></code></pre><h2 id="路由配置-2"><a href="#路由配置-2" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'pay_pay/'</span><span class="token punctuation">,</span> PayPal<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PayBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>这时候我们发现三方支付的流程大致是一样的  </p><p>我们进行资源整合</p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Create your models here.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># User有用户名即可 username</span><span class="token comment"># 充值</span><span class="token keyword">class</span> <span class="token class-name">Recharge</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    PAY_METHOD <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"支付宝"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"微信"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Pay"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    ORDER_STATUS <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"待充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"已充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"已取消"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>PROTECT<span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"充值用户"</span><span class="token punctuation">)</span>    order_id <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'订单号'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">124</span><span class="token punctuation">)</span>    trade_no <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'支付宝订单号'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 28位</span>    pay_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'充值时间'</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pay_method <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'充值方式'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>PAY_METHOD<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'充值状态'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>ORDER_STATUS<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    total_amount <span class="token operator">=</span> models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"充值金额"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'充值支付'</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>order_id</code></pre><h2 id="plant-py-工厂模式"><a href="#plant-py-工厂模式" class="headerlink" title="plant.py 工厂模式"></a>plant.py 工厂模式</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> payment<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> payment<span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> uuid<span class="token keyword">from</span> mydjango<span class="token punctuation">.</span>settings <span class="token keyword">import</span> alipay<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token keyword">import</span> qrcode<span class="token keyword">import</span> paypalrestsdk<span class="token keyword">class</span> <span class="token class-name">WxPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token comment"># print(data_dict)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span> <span class="token keyword">and</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>                order_id<span class="token operator">=</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>order_id<span class="token operator">=</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>            user_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>balance<span class="token operator">=</span>user_obj<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'ok'</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token comment"># print(data_dict)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'static/we_pay/'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span>        <span class="token comment"># return HttpResponse(json.dumps(&#123;'img': qrcode_name&#125;))</span><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token comment"># Recharge.objects.filter(order_id=data_dict.get("out_trade_no")).update(status=2)</span>            <span class="token comment"># user_obj = User.objects.filter(username=request.user.username)</span>            <span class="token comment"># user_obj.update(balance=user_obj.first().balance + int(data_dict.get("total_fee")))</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> total_amount <span class="token operator">/</span> <span class="token number">6.531</span>        total_amount <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span><span class="token keyword">class</span> <span class="token class-name">AliPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment"># orders_obj = Recharge.objects.get(order_id=data['out_trade_no'])</span>        <span class="token comment"># orders_obj.trade_no = data['trade_no']</span>        <span class="token comment"># orders_obj.status = 2</span>        <span class="token comment"># orders_obj.save()</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span>obj<span class="token punctuation">.</span>order_id<span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span>obj<span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">product_pay</span><span class="token punctuation">(</span>why<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(why)</span>        <span class="token keyword">if</span> why <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WxPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> PayPal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> why <span class="token operator">==</span> <span class="token string">"ali_back"</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> AliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token string">"wx_back"</span><span class="token punctuation">:</span>            w <span class="token operator">=</span> WxPay<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> w<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token string">"pay_back"</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> PayPal<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span></code></pre><h2 id="views-py-视图"><a href="#views-py-视图" class="headerlink" title="views.py 视图"></a>views.py 视图</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通充值</span><span class="token keyword">class</span> <span class="token class-name">PlantAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        balance <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            list2 <span class="token operator">=</span> r6<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            list2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>            list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>                list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> x <span class="token keyword">in</span> list3<span class="token punctuation">:</span>                    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> x<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> k <span class="token operator">==</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">:</span>                            total <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            r6<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> total<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            r6<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        user_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>balance<span class="token operator">=</span>user_obj<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> balance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 工厂模式  支付</span><span class="token keyword">class</span> <span class="token class-name">PlantPayAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># 充值地址或者二维码</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        why <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> plant<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_pay<span class="token punctuation">(</span>why<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>pay_url<span class="token punctuation">.</span>pay<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 回调地址 获取用户详细信息</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        details <span class="token operator">=</span> plant<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_pay<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"details"</span><span class="token punctuation">:</span> details<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 获取余额</span><span class="token keyword">class</span> <span class="token class-name">BalanceAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"balance"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>balance<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="urls-py-路由"><a href="#urls-py-路由" class="headerlink" title="urls.py 路由"></a>urls.py 路由</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># path('balance/', balance),</span>    path<span class="token punctuation">(</span><span class="token string">'balance/'</span><span class="token punctuation">,</span> BalanceAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 获取余额</span>    path<span class="token punctuation">(</span><span class="token string">'pay/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 工厂模式 支付</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 阿里回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># wx 验证地址</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># pal回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'plant/'</span><span class="token punctuation">,</span> PlantAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 普通充值接口</span><span class="token punctuation">]</span></code></pre><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="wallet-vue-前端页面展示"><a href="#wallet-vue-前端页面展示" class="headerlink" title="wallet.vue  前端页面展示"></a>wallet.vue  前端页面展示</h2><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;a-layout id&#x3D;&quot;components-layout-demo-custom-trigger&quot;&gt;      &lt;a-layout-sider :trigger&#x3D;&quot;null&quot; collapsible&gt;        &lt;div class&#x3D;&quot;logo&quot;&#x2F;&gt;        &lt;leftmenu :menu_number&#x3D;&#39;2&#39;&#x2F;&gt;      &lt;&#x2F;a-layout-sider&gt;      &lt;div&gt;        &lt;h1&gt;我的钱包---余额 &#123;&#123; balance &#125;&#125;&lt;&#x2F;h1&gt;        &lt;div&gt;          &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;() &#x3D;&gt; (modal2Visible &#x3D; true)&quot;&gt;            充值          &lt;&#x2F;a-button&gt;          &lt;a-modal            v-model&#x3D;&quot;modal2Visible&quot;            title&#x3D;&quot;Vertically centered modal dialog&quot;            centered            @ok&#x3D;&quot;() &#x3D;&gt; (modal2Visible &#x3D; false)&quot;          &gt;            充值金额            &lt;a-input-number              :formatter&#x3D;&quot;value &#x3D;&gt; &#96;$ $&#123;value&#125;&#96;.replace(&#x2F;\B(?&#x3D;(\d&#123;3&#125;)+(?!\d))&#x2F;g, &#39;,&#39;)&quot;              :parser&#x3D;&quot;value &#x3D;&gt; value.replace(&#x2F;\$\s?|(,*)&#x2F;g, &#39;&#39;)&quot;              @change&#x3D;&quot;onChange&quot;            &#x2F;&gt;            &lt;button @click&#x3D;&quot;postPlant&quot;&gt;普通充值&lt;&#x2F;button&gt;            &lt;br&gt;            &lt;br&gt;            &lt;br&gt;            &lt;br&gt;            选择支付            &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;static&#x2F;支付宝.png&quot; alt&#x3D;&quot;&quot; @click&#x3D;&quot;postBalance(1)&quot;&gt;            &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;static&#x2F;微信.png&quot; alt&#x3D;&quot;&quot; @click&#x3D;&quot;postBalance(2)&quot;&gt;            &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;static&#x2F;pay.png&quot; alt&#x3D;&quot;&quot; @click&#x3D;&quot;postBalance(3)&quot;&gt;            &lt;br&gt;            &lt;img :src&#x3D;&quot;&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;static&#x2F;we_pay&#x2F;&#39; + we_img&quot; alt&#x3D;&quot;&quot; v-if&#x3D;&quot;we_img&quot; title&#x3D;&quot;微信扫码&quot;&gt;          &lt;&#x2F;a-modal&gt;        &lt;&#x2F;div&gt;        &lt;br&gt;        &lt;br&gt;        &lt;div&gt;          &lt;h1&gt;我的优惠券&lt;&#x2F;h1&gt;          &lt;p&gt;&lt;&#x2F;p&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;a-layout&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F;导入组件import leftmenu from &#39;.&#x2F;leftmenu.vue&#39;;import staff_service from &#39;.&#x2F;staff_service.vue&#39;;&#x2F;&#x2F;导入跨域import &#123;getBalance, getWxBack, postPlant, postRecharge, postWxBack&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;import md5 from &quot;js-md5&quot;;export default &#123;  data() &#123;    return &#123;      username: localStorage.getItem(&quot;username&quot;),      balance: 0,      modal2Visible: false,      total_amount: 0,      we_img: &#39;&#39;,      message: [],    &#125;  &#125;,  &#x2F;&#x2F;注册组件标签  components: &#123;    &#39;staff_service&#39;: staff_service,    &#39;leftmenu&#39;: leftmenu,  &#125;,  methods: &#123;    postPlant() &#123;      let data &#x3D; &#123;        balance: this.total_amount,      &#125;      postPlant(data).then(res &#x3D;&gt; &#123;        console.log(res)        this.getBalance()        this.modal2Visible &#x3D; false      &#125;)    &#125;,    onChange(value) &#123;      if (value &gt;&#x3D; 1) &#123;        this.total_amount &#x3D; value      &#125;    &#125;,    &#x2F;&#x2F;获取余额    getBalance() &#123;      getBalance().then(res &#x3D;&gt; &#123;        &#x2F;&#x2F; console.log(res)        this.balance &#x3D; res.balance      &#125;)    &#125;,    &#x2F;&#x2F;跳转支付    postBalance(value) &#123;      console.log(&#39;postBalance&#39;, value);      let data &#x3D; &#123;        total_amount: this.total_amount,        pay_method: value      &#125;      postRecharge(data).then(res &#x3D;&gt; &#123;        console.log(res)        &#x2F;&#x2F; this.$router.push(res.data.pay_url)        if (value &#x3D;&#x3D;&#x3D; 1) &#123;          window.open(res.data.pay_url)        &#125; else if (value &#x3D;&#x3D;&#x3D; 2) &#123;          this.we_img &#x3D; res.img        &#125; else if (value &#x3D;&#x3D;&#x3D; 3) &#123;          window.open(res.url)        &#125;      &#125;)    &#125;,  &#125;,  created() &#123;    this.getBalance()  &#125;,&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;#components-layout-demo-custom-trigger .trigger &#123;  font-size: 18px;  line-height: 64px;  padding: 0 24px;  cursor: pointer;  transition: color 0.3s;&#125;#components-layout-demo-custom-trigger .trigger:hover &#123;  color: #1890ff;&#125;#components-layout-demo-custom-trigger .logo &#123;  height: 32px;  background: rgba(255, 255, 255, 0.2);  margin: 16px;&#125;&lt;&#x2F;style&gt;</code></pre><h2 id="apis-js-访问接口"><a href="#apis-js-访问接口" class="headerlink" title="apis.js  访问接口"></a>apis.js  访问接口</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取用户余额</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/balance/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 三方的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRecharge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/pay/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 自定义的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postPlant</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/plant/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 查看微信支付是否完成</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getWxBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/wx_back/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre><h2 id="index-js-配置路由"><a href="#index-js-配置路由" class="headerlink" title="index.js  配置路由"></a>index.js  配置路由</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span> <span class="token string">'/wallet'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"余额"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> wallet<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><img src="https://img-blog.csdnimg.cn/20201228164108714.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来说是没有难度的  大家要细心  注意配置文件以及秘钥 这里就全体跑通服务了</p><p>大家需要多看官方文档</p><p>支付宝沙箱是不稳定的，大家需要注意</p><p>微信我们这里使用的是二维码支付，大家也可以使用别的进行支付，没有回调地址，我们支付完成后要进行验证</p><p>paypal是国际通用的  大家要进行实时汇率转换 我这里是写死的 注意</p><p>我们这里还可以进行拓展 例如充值排行榜和优惠券 稍后带来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工厂模式我们在之前已经使用过了  当时我们做的是三方登录 &lt;a href=&quot;https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    <category term="工厂模式" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="沙箱支付" scheme="https://wyx6.top/tags/%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/"/>
    
    <category term="微信支付" scheme="https://wyx6.top/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
    <category term="支付宝支付" scheme="https://wyx6.top/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
    <category term="PayPal支付" scheme="https://wyx6.top/tags/PayPal%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法如何时间复杂度以及构造栈和队列</title>
    <link href="https://wyx6.top/2020/12/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://wyx6.top/2020/12/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2020-12-23T13:16:50.000Z</published>
    <updated>2020-12-24T11:37:32.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>计算机世界著名公式，由瑞士计算机科学家尼克劳斯·威茨（Niklaus Wirth）提出</p><p><strong>程序 = 数据结构 + 算法</strong></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>   计算机存储 组织数据的方式</code></pre><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>​        物理结构  面向计算机的</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><p>​                     顺序存储结构 数据元素在地址连续的存储单元中<br>​                     链式存储结构  数据元素在任意地址的存储单元中 用指针关联<br>​        逻辑结构  面向问题的   集合 线性 树形 图形</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>​    解决特定问题的求解步骤</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>​      输入  有零个或多个输入<br>​      输出  至少有一个或多个输出<br>​      有穷性<br>​      确定性<br>​      可行性</p><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><p>​        时间复杂度    计算算法所需要的时间  采用 大O 表示法<br>​                        常数阶   O(1)<br>​                        平方阶   O(n 2)<br>​                        立方阶   O(n 3)<br>​                        线性阶   O(n)<br>​                        list 的复杂度<br>​                        append  0(1)<br>​                        pop()    O(1)<br>​                        pop(i)    O(n)<br>​                        sort     O(n log n)<br>​                        reverse   O(n)<br>​                        dict 的时间复杂度<br>​                        copy   O(n)<br>​                        Delete O(1)</p><pre><code>    空间复杂度     计算算法所需要的内存</code></pre><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="定义：具有零个或多个数据元素的有限序列"><a href="#定义：具有零个或多个数据元素的有限序列" class="headerlink" title="定义：具有零个或多个数据元素的有限序列"></a>定义：具有零个或多个数据元素的有限序列</h2><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>​        第一个元素没有前驱元素<br>​        最后一个元素没有后继元素<br>​        其他元素只有一个前驱 和 一个后继</p><p>​        操作 ： 插入  删除  查找<br>​        分类 ： 顺序表  链表</p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>在计算机内存中 以一组地址的存储单元 依次存储数据元素的线性结构</p><p>插入 删除 最好的时间复杂度O(1) 最坏的时间复杂度 O(n)<br>查找  时间复杂度为 O(1)</p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>​    优点： 支持随机访问<br>​    缺点：插入和删除需要移动大量元素  会造成空间碎片</p><h2 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h2><p>读取数据的时候  python中的 list tuple</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>是一种基础数据结构 是一种线性表</p><h2 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h2><p>​    单向链表<br>​        有俩个域 一个是链接域(下一个节点的地址) 一个是信息域(存放的是数据)<br>​    单向循环链表<br>​        最后一个节点的指针域指向第一个节点<br>​    双向链表<br>​        俩个指针域一个元素域</p><h1 id="数据结构与算法作用"><a href="#数据结构与算法作用" class="headerlink" title="数据结构与算法作用"></a>数据结构与算法作用</h1><p>没有看过数据结构和算法，有时间对问题可能会没有任何思路，不知如何下手去解决：</p><p>大部分时间可能解决了问题，可是对程序运行的效率和开销没有意识，性能下降；<br>有时会借助别人开发的利器暂时解决了问题，可是遇到了性能瓶颈的时候，又不知道该如何进行针对性优化。</p><p>按照不同的角度，<br>数据结构可分为<br>逻辑结构和物理结构。</p><h2 id="逻辑结构："><a href="#逻辑结构：" class="headerlink" title="逻辑结构："></a>逻辑结构：</h2><p>是指数据对象中数据元素之间的相互关系。<br>分为四种：<br>集合结构、线性结构、树形结构和图形结构。</p><p>数据元素的存储结构可分为两种：<br>顺序存储结构 和 链式存储结构。</p><h2 id="顺序存储结构："><a href="#顺序存储结构：" class="headerlink" title="顺序存储结构："></a>顺序存储结构：</h2><p>把数据元素放在地址连续的存储单元中，<br>数据间的逻辑关系和物理关系一致。如，b</p><h2 id="链式存储结构："><a href="#链式存储结构：" class="headerlink" title="链式存储结构："></a>链式存储结构：</h2><p>把数据元素放在任意的存储单元中，数据间使用指针关联。<br>数据元素的存储关系不能反映其逻辑关系。如，链表。</p><p>算法是解决特定问题求解步骤的描述，<br>在计算机中表现为指令的有限序列，<br>并且每条指令表示一个或多个操作。</p><h2 id="算法的基本特性："><a href="#算法的基本特性：" class="headerlink" title="算法的基本特性："></a>算法的基本特性：</h2><p>输入，算法具有零个或多个输入，<br>输出，至少有一个或多个输出。<br>有穷性，算法在执行有限步后能够自动结束，不会出现无限循环。<br>确定性，算法的每一步都具有确定的含义，不会出现二义性。<br>可行性，算法的每一步都能够通过执行有限次操作完成。</p><h2 id="算法复杂度分为时间复杂度和空间复杂度。"><a href="#算法复杂度分为时间复杂度和空间复杂度。" class="headerlink" title="算法复杂度分为时间复杂度和空间复杂度。"></a>算法复杂度分为时间复杂度和空间复杂度。</h2><p>时间复杂度是指执行算法所需要的计算工作量（时间）</p><p>空间复杂度是指执行这个算法所需要的内存空间</p><p>算法的时间复杂度””反映了算法执行的时间长短，它是度量一个算法好坏的重要指标。””<br>度量一个算法的时间复杂度通常采用大O表示法</p><h2 id="时间复杂度的几条基本计算规则："><a href="#时间复杂度的几条基本计算规则：" class="headerlink" title="时间复杂度的几条基本计算规则："></a>时间复杂度的几条基本计算规则：</h2><ol><li>基本操作，即只有常数项，认为其时间复杂度为O(1)</li><li>顺序结构，时间复杂度按加法进行计算</li><li>循环结构，时间复杂度按乘法进行计算</li><li>分支结构，时间复杂度取最大值</li><li>判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略</li><li>在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># import time #引入时间模块</span><span class="token comment"># def func():</span><span class="token comment">#     # 时间戳  time.time()</span><span class="token comment">#     start_time = time.time()</span><span class="token comment">#     for i in range(0,1001):       # n*n 循环结构  +9常数项 可以忽略</span><span class="token comment">#         for j in range(0,1001):</span><span class="token comment">#             # s = 1000 - i - j        #顺序结构</span><span class="token comment">#             for s in range(0,1001):</span><span class="token comment">#                 if i ** 2 + j ** 2 + s ** 2 == s ** 2 and i + j + s ==1000 : #二次幂 + - 基本操作   分支结构 if elif</span><span class="token comment">#                     print("i = %d,j = %d ,s =%d" % (i,j,s))  #可以认作基本操作</span><span class="token comment">#</span><span class="token comment">#     end_time = time.time()</span><span class="token comment">#     print("demo 执行时间为：%f" % (end_time-start_time))  #开始到结束用了多长时间</span><span class="token comment">#</span><span class="token comment"># func()</span><span class="token comment"># import time,timeit  #python 内置的性能测试模块</span><span class="token comment"># def func():</span><span class="token comment">#     for i in range(0,1001):</span><span class="token comment">#         for j in range(0,1001):</span><span class="token comment">#             s = 1000 - i - j</span><span class="token comment">#             if i ** 2 + j ** 2 + s ** 2 == s ** 2  :</span><span class="token comment">#                 print("i = %d,j = %d ,s =%d" % (i,j,s))</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     ss = timeit.Timer("func()","from __main__ import func")</span><span class="token comment">#     print(ss.timeit(5)/5)</span></code></pre><h1 id="构造栈"><a href="#构造栈" class="headerlink" title="构造栈"></a>构造栈</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Stack() 创建一个新的空栈push(item) 添加一个新的元素item到栈顶pop() 弹出栈顶元素peek() 返回栈顶元素is_empty() 判断栈是否为空size() 返回栈的元素个数"""</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个新的空栈类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个新的空栈"""</span>        self<span class="token punctuation">.</span>alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""添加一个新的元素item到栈顶"""</span>        self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""弹出栈顶元素"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回栈顶元素"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断栈是否为空"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回栈的元素个数"""</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="进阶写法-数字转二进制"><a href="#进阶写法-数字转二进制" class="headerlink" title="进阶写法  数字转二进制"></a>进阶写法  数字转二进制</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>stack <span class="token operator">=</span> MyStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        remain <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">2</span>        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>remain<span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> stack<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">print</span><span class="token punctuation">(</span>transform<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="构造队列"><a href="#构造队列" class="headerlink" title="构造队列"></a>构造队列</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Queue() 创建一个空的队列enqueue(item) 往队列中添加一个item元素dequeue() 从队列头部删除一个元素is_empty() 判断一个队列是否为空size() 返回队列的大小"""</span><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个空的队列"""</span>        self<span class="token punctuation">.</span>alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""往队列中添加一个item元素"""</span>        self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从队列头部删除一个元素"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断一个队列是否为空"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回队列的大小"""</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="进阶写法"><a href="#进阶写法" class="headerlink" title="进阶写法"></a>进阶写法</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        x: int 申明类型 提高代码健壮性        -> 返回值 为None        """</span>        self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>myq <span class="token operator">=</span> MyQueue<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;计算机世界著名公式，由瑞士计算机科学家尼克劳斯·威茨（Niklaus Wirth）提出&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序 = 数据结构 +</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据结构" scheme="https://wyx6.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://wyx6.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈" scheme="https://wyx6.top/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="https://wyx6.top/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="时间复杂度" scheme="https://wyx6.top/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>django+vue基于websocket人工客服系统打造</title>
    <link href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E9%80%A0/"/>
    <id>https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E9%80%A0/</id>
    <published>2020-12-23T11:47:01.000Z</published>
    <updated>2020-12-23T13:28:09.541Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/?t=1608730074702">websocket已经讲过了有兴趣的可以戳这里</a></p><p>今天我们要做的就是基于websocket实时人工客服，先来了解一下机制</p><h1 id="WebSocket-机制"><a href="#WebSocket-机制" class="headerlink" title="WebSocket 机制"></a>WebSocket 机制</h1><p>WebSocket 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在 TCP 之上，同 HTTP 一样通过 TCP 来传输数据，但是它和 HTTP 最大不同是：</p><ul><li>WebSocket 是一种双向通信协议，在建立连接后，WebSocket 服务器和 Browser/Client Agent 都能主动的向对方发送或接收数据，就像 Socket 一样；</li><li>WebSocket 需要类似 TCP 的客户端和服务器端通过握手连接，连接成功后才能相互通信。</li><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tV2ViU29ja2V0L2ltZzAwMi5qcGc?x-oss-process=image/format,png" alt="图 2.WebSocket 请求响应客户端服务器交互图" loading="lazy"></li></ul><p>那我们知道可为什么要使用它了吧</p><h1 id="django后端接口"><a href="#django后端接口" class="headerlink" title="django后端接口"></a>django后端接口</h1><h2 id="表的设计"><a href="#表的设计" class="headerlink" title="表的设计"></a>表的设计</h2><p><img src="https://img-blog.csdnimg.cn/20201223200058535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 聊天表</span><span class="token keyword">class</span> <span class="token class-name">Chat</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_id_a <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    user_id_b <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        index_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id_a'</span><span class="token punctuation">,</span> <span class="token string">'user_id_b'</span><span class="token punctuation">]</span>        unique_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id_a'</span><span class="token punctuation">,</span> <span class="token string">'user_id_b'</span><span class="token punctuation">]</span>        <span class="token comment"># 联合索引要这样写入！！！！！！！！！</span>        db_table <span class="token operator">=</span> <span class="token string">'聊天表'</span><span class="token comment"># 消息表</span><span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    message <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    chat <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Chat<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'消息表'</span></code></pre><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 接收前端信息</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">reception_socket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> message <span class="token keyword">in</span> request<span class="token punctuation">.</span>websocket<span class="token punctuation">:</span>            input_text <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            username <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            uid <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>            input_text <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"inputText"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                chat <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>message<span class="token operator">=</span>input_text<span class="token punctuation">,</span> chat<span class="token operator">=</span>chat<span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                chat_id <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>message<span class="token operator">=</span>input_text<span class="token punctuation">,</span> chat<span class="token operator">=</span>chat_id<span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment"># 主动推送消息</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">send_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    uid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 向前端发送时间</span>                        <span class="token keyword">try</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                ser <span class="token operator">=</span> MessageModelSerializer<span class="token punctuation">(</span>Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>chat_id<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>urls.py</p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">from django.urls import path, includefrom .views import *urlpatterns &#x3D; [    path(&#39;reception_socket&#x2F;&#39;, reception_socket),    # 客服系统接收前端信息    path(&#39;send_websocket&#x2F;&#39;, send_websocket),  #客服发送消息]</code></pre><h1 id="VUE前端"><a href="#VUE前端" class="headerlink" title="VUE前端"></a>VUE前端</h1><h2 id="客户页面-staff-service-vue"><a href="#客户页面-staff-service-vue" class="headerlink" title="客户页面  staff_service.vue"></a>客户页面  staff_service.vue</h2><p>我这里封装为组件了 你也可以给个路由成为一个单独的页面</p><p><img src="https://img-blog.csdnimg.cn/20201223201100165.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;div&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;showDrawer&quot;&gt;        &lt;a-icon type&#x3D;&quot;plus&quot;&#x2F;&gt;        人工客服      &lt;&#x2F;a-button&gt;      &lt;a-drawer        title&#x3D;&quot;翔翔客服带给您最好的体验&quot;        :width&#x3D;&quot;720&quot;        :visible&#x3D;&quot;visible&quot;        :body-style&#x3D;&quot;&#123; paddingBottom: &#39;80px&#39; &#125;&quot;        @close&#x3D;&quot;onClose(false)&quot;      &gt;        &lt;a-row :gutter&#x3D;&quot;16&quot;&gt;          &lt;table&gt;            &lt;tr v-for&#x3D;&quot;i in message&quot;&gt;              &lt;th&gt;&#123;&#123;i.name&#125;&#125;:&lt;&#x2F;th&gt;              &lt;td&gt;&#123;&#123; i.message &#125;&#125;&lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;          &lt;&#x2F;table&gt;        &lt;&#x2F;a-row&gt;        &lt;a-form :form&#x3D;&quot;form&quot; layout&#x3D;&quot;vertical&quot; hide-required-mark&gt;          &lt;a-row :gutter&#x3D;&quot;16&quot;&gt;            &lt;a-col :span&#x3D;&quot;24&quot;&gt;              &lt;a-form-item label&#x3D;&quot;Description&quot;&gt;                &lt;a-textarea                  v-model&#x3D;&quot;inputText&quot;                  :rows&#x3D;&quot;4&quot;                  placeholder&#x3D;&quot;请输入问题描述&quot;                &#x2F;&gt;              &lt;&#x2F;a-form-item&gt;            &lt;&#x2F;a-col&gt;          &lt;&#x2F;a-row&gt;        &lt;&#x2F;a-form&gt;        &lt;div          :style&#x3D;&quot;&#123;          position: &#39;absolute&#39;,          right: 0,          bottom: 0,          width: &#39;100%&#39;,          borderTop: &#39;1px solid #e9e9e9&#39;,          padding: &#39;10px 16px&#39;,          background: &#39;#fff&#39;,          textAlign: &#39;right&#39;,          zIndex: 1,        &#125;&quot;        &gt;          &lt;a-button :style&#x3D;&quot;&#123; marginRight: &#39;8px&#39; &#125;&quot; @click&#x3D;&quot;onClose(false)&quot;&gt;            Cancel          &lt;&#x2F;a-button&gt;          &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onClose(true)&quot;&gt;            Submit          &lt;&#x2F;a-button&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;a-drawer&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import md5 from &#39;js-md5&#39;;import echarts from &quot;echarts&quot;;export default &#123;  name: &quot;staff_service&quot;,  data() &#123;    return &#123;      form: this.$form.createForm(this),      visible: false,      inputText: &#39;&#39;,      username: localStorage.getItem(&quot;username&quot;),      uid: localStorage.getItem(&quot;id&quot;),      message: [],    &#125;;  &#125;,  methods: &#123;    showDrawer() &#123;      this.visible &#x3D; true;    &#125;,    onClose(ok) &#123;      this.visible &#x3D; ok;      if (ok &#x3D;&#x3D;&#x3D; true) &#123;        var ed2020 &#x3D; &quot;2020&quot;;        var sign &#x3D; md5(&#39;price&#x3D;500&amp;goodid&#x3D;3,1&#39; + ed2020);        console.log(sign);        var _this &#x3D; this;        &#x2F;&#x2F;判断浏览器是否支持websocket        if (&quot;WebSocket&quot; in window) &#123;          console.log(&quot;支持&quot;);          &#x2F;&#x2F;生成websocket链接          var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:8000&#x2F;user&#x2F;reception_socket&#x2F;&quot;);          &#x2F;&#x2F;发送链接请求          ws.onopen &#x3D; function () &#123;            var data &#x3D; JSON.stringify(&#123;username: _this.username, inputText: _this.inputText, uid: _this.uid&#125;)            ws.send(data);          &#125;          &#x2F;&#x2F;发送消息          ws.onmessage &#x3D; function (evt) &#123;            &#x2F;&#x2F;将获取信息打印            var received_msg &#x3D; evt.data;            &#x2F;&#x2F; alert(received_msg);          &#125;          &#x2F;&#x2F;捕获断开链接          ws.onclose &#x3D; function () &#123;            console.log(&quot;链接已经关闭&quot;);          &#125;        &#125;      &#125;    &#125;,  &#125;,  mounted() &#123;    &#x2F;&#x2F; this.main()    var ed2020 &#x3D; &quot;2020&quot;;    var sign &#x3D; md5(&#39;price&#x3D;500&amp;goodid&#x3D;3,1&#39; + ed2020);    console.log(sign);    var _this &#x3D; this;    &#x2F;&#x2F;判断浏览器是否支持websocket    if (&quot;WebSocket&quot; in window) &#123;      console.log(&quot;支持&quot;);      &#x2F;&#x2F;生成websocket链接      var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:8000&#x2F;user&#x2F;send_websocket&#x2F;?uid&#x3D;&quot; + _this.uid);      &#x2F;&#x2F;发送链接请求      ws.onopen &#x3D; function () &#123;        ws.send(&quot;text&quot;);      &#125;      &#x2F;&#x2F;发送消息      ws.onmessage &#x3D; function (evt) &#123;        &#x2F;&#x2F;将获取信息打印        var received_msg &#x3D; evt.data;        var data        var data2        data &#x3D; JSON.parse(received_msg)        _this.message &#x3D; data        &#x2F;&#x2F; data &#x3D; JSON.parse(data)        &#x2F;&#x2F; console.log(data[0])      &#125;      &#x2F;&#x2F;捕获断开链接      ws.onclose &#x3D; function () &#123;        console.log(&quot;链接已经关闭&quot;);      &#125;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><h2 id="客服页面service-vue"><a href="#客服页面service-vue" class="headerlink" title="客服页面service.vue"></a>客服页面service.vue</h2><p>需要设置路由 客服是一个单独的页面</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;div&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;showDrawer&quot;&gt;        &lt;a-icon type&#x3D;&quot;plus&quot;&#x2F;&gt;        人工客服      &lt;&#x2F;a-button&gt;      &lt;a-drawer        title&#x3D;&quot;翔翔客服带给您最好的体验&quot;        :width&#x3D;&quot;720&quot;        :visible&#x3D;&quot;visible&quot;        :body-style&#x3D;&quot;&#123; paddingBottom: &#39;80px&#39; &#125;&quot;        @close&#x3D;&quot;onClose(false)&quot;      &gt;        &lt;a-row :gutter&#x3D;&quot;16&quot;&gt;          &lt;table&gt;            &lt;tr v-for&#x3D;&quot;i in message&quot;&gt;              &lt;th&gt;&#123;&#123;i.name&#125;&#125;:&lt;&#x2F;th&gt;              &lt;td&gt;&#123;&#123; i.message &#125;&#125;&lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;          &lt;&#x2F;table&gt;        &lt;&#x2F;a-row&gt;        &lt;a-form :form&#x3D;&quot;form&quot; layout&#x3D;&quot;vertical&quot; hide-required-mark&gt;          &lt;a-row :gutter&#x3D;&quot;16&quot;&gt;            &lt;a-col :span&#x3D;&quot;24&quot;&gt;              &lt;a-form-item label&#x3D;&quot;Description&quot;&gt;                &lt;a-textarea                  v-model&#x3D;&quot;inputText&quot;                  :rows&#x3D;&quot;4&quot;                  placeholder&#x3D;&quot;请输入问题描述&quot;                &#x2F;&gt;              &lt;&#x2F;a-form-item&gt;            &lt;&#x2F;a-col&gt;          &lt;&#x2F;a-row&gt;        &lt;&#x2F;a-form&gt;        &lt;div          :style&#x3D;&quot;&#123;          position: &#39;absolute&#39;,          right: 0,          bottom: 0,          width: &#39;100%&#39;,          borderTop: &#39;1px solid #e9e9e9&#39;,          padding: &#39;10px 16px&#39;,          background: &#39;#fff&#39;,          textAlign: &#39;right&#39;,          zIndex: 1,        &#125;&quot;        &gt;          &lt;a-button :style&#x3D;&quot;&#123; marginRight: &#39;8px&#39; &#125;&quot; @click&#x3D;&quot;onClose(false)&quot;&gt;            Cancel          &lt;&#x2F;a-button&gt;          &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onClose(true)&quot;&gt;            Submit          &lt;&#x2F;a-button&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;a-drawer&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import md5 from &#39;js-md5&#39;;import echarts from &quot;echarts&quot;;export default &#123;  name: &quot;staff_service&quot;,  data() &#123;    return &#123;      form: this.$form.createForm(this),      visible: false,      inputText: &#39;&#39;,      username: localStorage.getItem(&quot;username&quot;),      uid: localStorage.getItem(&quot;id&quot;),      message: [],    &#125;;  &#125;,  methods: &#123;    showDrawer() &#123;      this.visible &#x3D; true;    &#125;,    onClose(ok) &#123;      this.visible &#x3D; ok;      if (ok &#x3D;&#x3D;&#x3D; true) &#123;        var ed2020 &#x3D; &quot;2020&quot;;        var sign &#x3D; md5(&#39;price&#x3D;500&amp;goodid&#x3D;3,1&#39; + ed2020);        console.log(sign);        var _this &#x3D; this;        &#x2F;&#x2F;判断浏览器是否支持websocket        if (&quot;WebSocket&quot; in window) &#123;          console.log(&quot;支持&quot;);          &#x2F;&#x2F;生成websocket链接          var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:8000&#x2F;user&#x2F;reception_socket&#x2F;&quot;);          &#x2F;&#x2F;发送链接请求          ws.onopen &#x3D; function () &#123;            var data &#x3D; JSON.stringify(&#123;username: &quot;客服&quot;, inputText: _this.inputText, uid: _this.uid&#125;)            ws.send(data);          &#125;          &#x2F;&#x2F;发送消息          ws.onmessage &#x3D; function (evt) &#123;            &#x2F;&#x2F;将获取信息打印            var received_msg &#x3D; evt.data;            &#x2F;&#x2F; alert(received_msg);          &#125;          &#x2F;&#x2F;捕获断开链接          ws.onclose &#x3D; function () &#123;            console.log(&quot;链接已经关闭&quot;);          &#125;        &#125;      &#125;    &#125;,  &#125;,  mounted() &#123;    &#x2F;&#x2F; this.main()    var ed2020 &#x3D; &quot;2020&quot;;    var sign &#x3D; md5(&#39;price&#x3D;500&amp;goodid&#x3D;3,1&#39; + ed2020);    console.log(sign);    var _this &#x3D; this;    &#x2F;&#x2F;判断浏览器是否支持websocket    if (&quot;WebSocket&quot; in window) &#123;      console.log(&quot;支持&quot;);      &#x2F;&#x2F;生成websocket链接      var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:8000&#x2F;user&#x2F;send_websocket&#x2F;?uid&#x3D;&quot; + _this.uid);      &#x2F;&#x2F;发送链接请求      ws.onopen &#x3D; function () &#123;        ws.send(&quot;text&quot;);      &#125;      &#x2F;&#x2F;发送消息      ws.onmessage &#x3D; function (evt) &#123;        &#x2F;&#x2F;将获取信息打印        var received_msg &#x3D; evt.data;        var data        var data2        data &#x3D; JSON.parse(received_msg)        _this.message &#x3D; data        &#x2F;&#x2F; data &#x3D; JSON.parse(data)        &#x2F;&#x2F; console.log(data[0])      &#125;      &#x2F;&#x2F;捕获断开链接      ws.onclose &#x3D; function () &#123;        console.log(&quot;链接已经关闭&quot;);      &#125;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://img-blog.csdnimg.cn/20201223201913770.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>ok 今天的学习就到这里了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>django+vue基于websocket创造实时ECharts股票图</title>
    <link href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/"/>
    <id>https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/</id>
    <published>2020-12-23T11:00:42.000Z</published>
    <updated>2020-12-23T13:28:30.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、什么是Websocket"><a href="#一-、什么是Websocket" class="headerlink" title="一 、什么是Websocket"></a>一 、<a href="https://baike.baidu.com/item/WebSocket/1953845?fr=aladdin">什么是Websocket</a></h1><p>WebSocket是一种在单个TCP连接上进行全双工通信的协议</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</p><p>现在，很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p>而比较新的技术去做轮询的效果是Comet。这种技术虽然可以双向通信，但依然需要反复发出请求。而且在Comet中，普遍采用的长链接，也会消耗服务器资源。</p><p>在这种情况下，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯</p><h1 id="websocket作用及意义"><a href="#websocket作用及意义" class="headerlink" title="websocket作用及意义"></a>websocket作用及意义</h1><p>Browser已经支持http协议，为什么还要开发一种新的WebSocket协议呢？我们知道http协议是一种单向的网络协议，在建立连接后，它只允许Browser/UA（UserAgent）向WebServer发出请求资源后，WebServer才能返回相应的数据。而WebServer不能主动的推送数据给Browser/UA，当初这么设计http协议也是有原因的，假设WebServer能主动的推送数据给Browser/UA，那Browser/UA就太容易受到攻击，一些广告商也会主动的把一些广告信息在不经意间强行的传输给客户端，这不能不说是一个灾难。那么单向的http协议给现在的网站或Web应用程序开发带来了哪些问题呢？</p><p>让我们来看一个案例，现在假设我们想开发一个基于Web的应用程序去获取当前Web<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">服务器</a>的实时数据，例如股票的实时行情，火车票的剩余票数等等，这就需要Browser/UA与WebServer端之间反复的进行http通信，Browser不断的发送Get请求，去获取当前的实时数据。下面介绍几种常见的方式：</p><h1 id="二、什么是ECharts"><a href="#二、什么是ECharts" class="headerlink" title="二、什么是ECharts"></a>二、<a href="https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts">什么是ECharts</a></h1><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>丰富的可视化类型</li><li>多种数据格式无需转换直接使用</li><li>千万数据的前端展现</li><li>移动端优化</li><li>多渲染方案，跨平台使用！</li><li>深度的交互式数据探索</li><li>多维数据的支持以及丰富的视觉编码手段</li><li>动态数据</li><li>绚丽的特效</li><li>通过 GL 实现更多更强大绚丽的三维可视化</li><li>无障碍访问（4.0+）</li></ol><h1 id="三、Django实现Websocket"><a href="#三、Django实现Websocket" class="headerlink" title="三、Django实现Websocket"></a>三、Django实现Websocket</h1><p><strong>django实现websocket大致上有两种方式，一种channels，一种是dwebsocket。channels依赖于redis，twisted等，相比之下使用dwebsocket要更为方便一些</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#dwebsocket有两种装饰器：require_websocket和accept_websocekt，使用require_websocket装饰器会导致视图函数无法接收导致正常的http请求，一般情况使用accept_websocket方式就可以了，</span><span class="token comment"># </span><span class="token comment"># dwebsocket的一些内置方法：</span><span class="token comment"># </span><span class="token comment"># request.is_websocket（）：判断请求是否是websocket方式，是返回true，否则返回false</span><span class="token comment"># request.websocket： 当请求为websocket的时候，会在request中增加一个websocket属性，</span><span class="token comment"># WebSocket.wait（） 返回客户端发送的一条消息，没有收到消息则会导致阻塞</span><span class="token comment"># WebSocket.read（） 和wait一样可以接受返回的消息，只是这种是非阻塞的，没有消息返回None</span><span class="token comment"># WebSocket.count_messages（）返回消息的数量</span><span class="token comment"># WebSocket.has_messages（）返回是否有新的消息过来</span><span class="token comment"># WebSocket.send（message）像客户端发送消息，message为byte类型</span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-python" data-language="python"><code class="language-python">pip install dwebsocket</code></pre><h2 id="dwebsocket配置"><a href="#dwebsocket配置" class="headerlink" title="dwebsocket配置"></a>dwebsocket配置</h2><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'dwebsocket'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'dwebsocket.middleware.WebSocketMiddleware'</span><span class="token punctuation">,</span>    <span class="token comment"># 为所有的URL提供websocket，如果只是单独的视图需要可以不选</span><span class="token punctuation">]</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>案例 根据自己的情况进行修改</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">test_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定时推送 无限循环</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">## 每隔5秒发送一次</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"发送的内容"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h2><ol><li><p>首先获取数据  存储到mongodb</p><p>data_test.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimehost <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token comment"># client = MongoClient(host, 27017)  # 建立客户端对象</span><span class="token comment"># db = client.mydb  # 连接mydb数据库，没有则自动创建</span><span class="token comment"># test3 = db.testset  # 使用test_set集合，没有则自动创建</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'test3'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> db<span class="token punctuation">.</span>persons<span class="token comment"># 在PyMongo 3.x版本后，官方推荐使用insert_one(),该方法返回的不再是单纯的_id值，我们需要执行result.inserted_id查看 _id 值</span>ress <span class="token operator">=</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询集合中age是20的数据</span><span class="token comment"># res = p.find(&#123;'age':&#123;'$gt':20&#125;&#125;)  # 查询集合中age大于20的数据</span><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">'https://data.gtimg.cn/flashdata/hushen/latest/daily/sz000002.js?maxage=43201&amp;visitDstTime=1'</span><span class="token punctuation">)</span>  <span class="token comment"># 向get中传入一个网址</span><span class="token comment"># type(res)  # 响应对象lass 'requests.models.Response'></span><span class="token comment"># print(res.status_code)  # 响应码</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># print(res.text.split("\n"))</span><span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">[</span><span class="token string">"_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token string">"p1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token string">"p2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token string">"p3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token string">"p4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>    b<span class="token punctuation">[</span><span class="token string">"day"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>    p<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre></li><li><p>在视图中views.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token comment"># 连接 mongodb数据库</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'test3'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> db<span class="token punctuation">.</span>persons<span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">test_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">## 向前端发送时间</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 循环获取数据并添加到列表中</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token comment"># [&#123;'_id': '200727', 'p1': '27.27', 'p2': '26.68', 'p3': '27.28', 'p4': '26.33', 'day': '943467'&#125;,</span>            <span class="token comment"># websorket不需要返回 我们使用send方法发送 json格式化后的数据即可</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>路由urls.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'websocketlink/'</span><span class="token punctuation">,</span> test_websocket<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># websocket常连接实时跟新</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="四、前端Vue"><a href="#四、前端Vue" class="headerlink" title="四、前端Vue"></a>四、前端Vue</h2><p><strong>事例</strong> </p><p>因为我们是实时更新 所以需要写在钩子函数中 <a href="">关于vue生命周期点击查看</a></p><pre class="language-vue" data-language="vue"><code class="language-vue">mounted: function () &#123;  var ed2020 &#x3D; &quot;2020&quot;;  var sign &#x3D; md5(&#39;price&#x3D;500&amp;goodid&#x3D;3,1&#39; + ed2020);  console.log(sign);  var _this &#x3D; this;  &#x2F;&#x2F;判断浏览器是否支持websocket  if (&quot;WebSocket&quot; in window) &#123;    console.log(&quot;支持&quot;);    &#x2F;&#x2F;生成websocket链接    var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:8000&#x2F;user&#x2F;send_websocket&#x2F;&quot;);    &#x2F;&#x2F;发送链接请求    ws.onopen &#x3D; function () &#123;      ws.send(&quot;test&quot;);    &#125;    &#x2F;&#x2F;发送消息    ws.onmessage &#x3D; function (evt) &#123;      &#x2F;&#x2F;将获取信息打印      var received_msg &#x3D; evt.data;      &#x2F;&#x2F; alert(received_msg);    &#125;    &#x2F;&#x2F;捕获断开链接    ws.onclose &#x3D; function () &#123;      console.log(&quot;链接已经关闭&quot;);    &#125;  &#125;&#125;,</code></pre><p>statistics.vue</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1 align&#x3D;&quot;center&quot;&gt;今日股票&lt;&#x2F;h1&gt;    &lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;    &lt;div id&#x3D;&quot;main&quot; :style&#x3D;&quot;&#123;width: &#39;2000px&#39;,height:&#39;600px&#39;&#125;&quot;&gt;&lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import echarts from &#39;echarts&#39;import &#123;getStatistics&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;import md5 from &quot;js-md5&quot;;export default &#123;  name: &quot;statistics&quot;,  data() &#123;    return &#123;&#125;  &#125;,  methods: &#123;    main() &#123;      var data      var myChart &#x3D; echarts.init(document.getElementById(&#39;main&#39;));      let id_list &#x3D; []      let p_list &#x3D; []      getStatistics().then(res &#x3D;&gt; &#123;        data &#x3D; res.data        for (var i in data) &#123;          id_list.push(data[i]._id)          p_list.push(data[i].p1)          var option &#x3D; &#123;            title: &#123;              text: &#39;今日股市&#39;            &#125;,            tooltip: &#123;&#125;,            legend: &#123;&#125;,            xAxis: &#123;              &#x2F;&#x2F; data: id_list              data: id_list            &#125;,            yAxis: &#123;&#125;,            series: [&#123;              name: &#39;每股成交额&#39;,              type: &#39;bar&#39;,              data: p_list              &#x2F;&#x2F; data: pr_list            &#125;]          &#125;;          myChart.setOption(option);        &#125;      &#125;)      console.log(this.id_list)    &#125;  &#125;,  mounted() &#123;    &#x2F;&#x2F; this.main()    var ed2020 &#x3D; &quot;2020&quot;;    var sign &#x3D; md5(&#39;price&#x3D;500&amp;goodid&#x3D;3,1&#39; + ed2020);    console.log(sign);    var _this &#x3D; this;    &#x2F;&#x2F;判断浏览器是否支持websocket    if (&quot;WebSocket&quot; in window) &#123;      console.log(&quot;支持&quot;);      &#x2F;&#x2F;生成websocket链接      var ws &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;localhost:8000&#x2F;user&#x2F;websocketlink&#x2F;&quot;);      &#x2F;&#x2F;发送链接请求      ws.onopen &#x3D; function () &#123;        ws.send(&quot;test&quot;);      &#125;      &#x2F;&#x2F;发送消息      ws.onmessage &#x3D; function (evt) &#123;        &#x2F;&#x2F;将获取信息打印        var received_msg &#x3D; evt.data;        var data        var myChart &#x3D; echarts.init(document.getElementById(&#39;main&#39;));        let id_list &#x3D; []        let p1_list &#x3D; []        let p2_list &#x3D; []        let p3_list &#x3D; []        let p4_list &#x3D; []        data &#x3D; JSON.parse(received_msg)        console.log(data)        for (var i in data) &#123;          id_list.push(data[i]._id)          p1_list.push(data[i].p1)          p2_list.push(data[i].p2)          p3_list.push(data[i].p3)          p4_list.push(data[i].p4)          var option &#x3D; &#123;            title: &#123;              text: &#39;今日股市&#39;            &#125;,            tooltip: &#123;&#125;,            legend: &#123;&#125;,            xAxis: &#123;              &#x2F;&#x2F; data: id_list              data: id_list            &#125;,            yAxis: &#123;&#125;,            series: [              &#123;                name: &#39;每股成交额&#39;,                type: &#39;bar&#39;,                data: p1_list                &#x2F;&#x2F; data: pr_list              &#125;,              &#123;                name: &#39;每股成交额&#39;,                type: &#39;bar&#39;,                data: p2_list                &#x2F;&#x2F; data: pr_list              &#125;,              &#123;                name: &#39;每股成交额&#39;,                type: &#39;bar&#39;,                data: p3_list                &#x2F;&#x2F; data: pr_list              &#125;,              &#123;                name: &#39;每股成交额&#39;,                type: &#39;bar&#39;,                data: p4_list                &#x2F;&#x2F; data: pr_list              &#125;,            ],          &#125;;          myChart.setOption(option);        &#125;      &#125;      &#x2F;&#x2F;捕获断开链接      ws.onclose &#x3D; function () &#123;        console.log(&quot;链接已经关闭&quot;);      &#125;    &#125;  &#125;,&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://img-blog.csdnimg.cn/20201223194549725.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>ok搞定收工</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-、什么是Websocket&quot;&gt;&lt;a href=&quot;#一-、什么是Websocket&quot; class=&quot;headerlink&quot; title=&quot;一 、什么是Websocket&quot;&gt;&lt;/a&gt;一 、&lt;a href=&quot;https://baike.baidu.com/item/</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/tags/websocket/"/>
    
    <category term="ECharts" scheme="https://wyx6.top/tags/ECharts/"/>
    
  </entry>
  
  <entry>
    <title>python与Mongodb操作</title>
    <link href="https://wyx6.top/2020/12/22/python%E4%B8%8EMongodb%E6%93%8D%E4%BD%9C/"/>
    <id>https://wyx6.top/2020/12/22/python%E4%B8%8EMongodb%E6%93%8D%E4%BD%9C/</id>
    <published>2020-12-22T13:05:00.000Z</published>
    <updated>2020-12-22T13:18:45.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-下载安装"><a href="#MongoDB-下载安装" class="headerlink" title="MongoDB 下载安装"></a><a href="https://www.runoob.com/mongodb/mongodb-window-install.html">MongoDB 下载安装</a></h1><p>MongoDB 提供了可用于 32 位和 64 位系统的预编译二进制包，你可以从MongoDB官网下载安装，MongoDB 预编译二进制包下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p><blockquote><p>注意：在 MongoDB 2.2 版本后已经不再支持 Windows XP 系统。最新版本也已经没有了 32 位系统的安装文件。</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/B370EBF1-A8F8-483A-A05C-F0DE0A903A96.jpg" alt="img" loading="lazy"></p><ul><li><strong>MongoDB for Windows 64-bit</strong> 适合 64 位的 Windows Server 2008 R2, Windows 7 , 及最新版本的 Window 系统。</li><li><strong>MongoDB for Windows 32-bit</strong> 适合 32 位的 Window 系统及最新的 Windows Vista。 32 位系统上 MongoDB 的数据库最大为 2GB。</li><li><strong>MongoDB for Windows 64-bit Legacy</strong> 适合 64 位的 Windows Vista, Windows Server 2003, 及 Windows Server 2008 。</li></ul><p>下载 .msi 文件，下载后双击该文件，按操作提示安装即可。</p><p>安装过程中，你可以通过点击 “Custom(自定义)” 按钮来设置你的安装目录。</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/win-install1.jpg" alt="img" loading="lazy"></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/win-install2.jpg" alt="img" loading="lazy"></p><p>下一步安装 <strong>“install mongoDB compass”</strong> 不勾选（当然你也可以选择安装它，可能需要更久的安装时间），MongoDB Compass 是一个图形界面管理工具，我们可以在后面自己到官网下载安装，下载地址：<a href="https://www.mongodb.com/download-center/compass%E3%80%82">https://www.mongodb.com/download-center/compass。</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/8F7AF133-BE49-4BAB-9F93-88A9D666F6C0.jpg" alt="img" loading="lazy"></p><p><strong>创建数据目录</strong></p><p>MongoDB 将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。请注意，数据目录应该放在根目录下 (如： C:\ 或者 D:\ 等 )。</p><p>在本教程中，我们已经在 C 盘安装了 mongodb，现在让我们创建一个 data 的目录然后在 data 目录里创建 db 目录。</p><pre class="language-none"><code class="language-none">cd C:\md &quot;\data\db&quot;</code></pre><p>你也可以通过 window 的资源管理器中创建这些目录，而不一定通过命令行。</p><hr><h2 id="命令行下运行-MongoDB-服务器"><a href="#命令行下运行-MongoDB-服务器" class="headerlink" title="命令行下运行 MongoDB 服务器"></a>命令行下运行 MongoDB 服务器</h2><p>为了从命令提示符下运行 MongoDB 服务器，你必须从 MongoDB 目录的 bin 目录中执行 mongod.exe 文件。</p><pre class="language-none"><code class="language-none">C:\mongodb\bin\mongod --dbpath c:\data\db</code></pre><p>如果执行成功，会输出如下信息：</p><pre class="language-none"><code class="language-none">2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is notinstalled, will zero-out data files2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir&#x3D;c:\data\db\journal2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid&#x3D;2488 port&#x3D;27017 dbpath&#x3D;c:\data\db 64-bit host&#x3D;WIN-1VONBJOCE882015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7&#x2F;Windows Server 2008 R22015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6……</code></pre><hr><h2 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h2><p>我们可以在命令窗口中运行 mongo.exe 命令即可连接上 MongoDB，执行如下命令：</p><pre class="language-none"><code class="language-none">C:\mongodb\bin\mongo.exe</code></pre><h1 id="python操作MongonDB"><a href="#python操作MongonDB" class="headerlink" title="python操作MongonDB"></a>python操作MongonDB</h1><h3 id="连接数据库、指定数据库、指定集合、插入数据"><a href="#连接数据库、指定数据库、指定集合、插入数据" class="headerlink" title="连接数据库、指定数据库、指定集合、插入数据:"></a>连接数据库、指定数据库、指定集合、插入数据:</h3><p>mongodb存储数据以键值形式, 因此在Python中使用字段插入数据.</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token comment">#连接mongodb</span>client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span><span class="token comment">#指定数据库</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4<span class="token comment">#指定集合</span>collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#数据</span>student1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>student2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201802'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>student3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>student4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201804'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>student5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201805'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>student6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201806'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alan'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token comment">#插入一条数据</span>result1 <span class="token operator">=</span> collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span>inserted_id<span class="token punctuation">)</span><span class="token comment"># #插入多条数据</span>result2 <span class="token operator">=</span> collection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span><span class="token punctuation">[</span>student2<span class="token punctuation">,</span> student3<span class="token punctuation">,</span> student4<span class="token punctuation">,</span> student5<span class="token punctuation">,</span> student6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span>inserted_ids<span class="token punctuation">)</span></code></pre><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">insert方法<span class="token punctuation">:</span> <span class="token number">5b3a1942971951218d41c02b</span><span class="token punctuation">[</span>ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02d'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>官方推荐<span class="token punctuation">:</span> <span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>InsertOneResult <span class="token builtin">object</span> at <span class="token number">0x7fa4cc363ec8</span><span class="token operator">></span><span class="token number">5b3a1942971951218d41c02e</span><span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>InsertManyResult <span class="token builtin">object</span> at <span class="token number">0x7fa4cc363f08</span><span class="token operator">></span><span class="token punctuation">[</span>ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02f'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c030'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="3-查询、计数、排序、偏移"><a href="#3-查询、计数、排序、偏移" class="headerlink" title="3. 查询、计数、排序、偏移:"></a>3. 查询、计数、排序、偏移:</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#查询一条数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单条数据'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多条数据'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment">#查询多条数据</span><span class="token keyword">for</span> res <span class="token keyword">in</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$mod'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">#计数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计数'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>count <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$mod'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">#排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'排序'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span> <span class="token comment">#升序, pymongo.DESCENDING为降序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#偏移</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偏移'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#偏移2位,忽略前两个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span>results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#只输出2个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>find({‘age’: {’$mod’: [5, 0]}}): 表示查找年龄取余5余0的值. 还有很多比较符号, 请百度.</p><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">单条数据 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>多条数据 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02e'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201804'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02f'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201805'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>计数 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">3</span>排序 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">]</span>偏移 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">[</span><span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Ray'</span><span class="token punctuation">]</span></code></pre><h3 id="4-更新"><a href="#4-更新" class="headerlink" title="4. 更新:"></a>4. 更新:</h3><h5 id="4-1-不使用-set更新数据"><a href="#4-1-不使用-set更新数据" class="headerlink" title="4.1 不使用$set更新数据:"></a>4.1 不使用$set更新数据:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#修改</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span> <span class="token comment">#修改年龄</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> student<span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span></code></pre><h6 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h6><pre class="language-python" data-language="python"><code class="language-python">更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span></code></pre><h5 id="4-2-使用-set更新数据"><a href="#4-2-使用-set更新数据" class="headerlink" title="4.2 使用$set更新数据:"></a>4.2 使用$set更新数据:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#使用$set更新</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span> <span class="token comment">#修改年龄</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$set'</span><span class="token punctuation">:</span> student<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition, $set为重点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span></code></pre><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span></code></pre><h4 id="比较使用和不适用-set更新数据-发现此时并没有什么区别"><a href="#比较使用和不适用-set更新数据-发现此时并没有什么区别" class="headerlink" title="比较使用和不适用$set更新数据, 发现此时并没有什么区别."></a>比较使用和不适用$set更新数据, 发现此时并没有什么区别.</h4><h3 id="下面介绍区别所在"><a href="#下面介绍区别所在" class="headerlink" title="下面介绍区别所在:"></a>下面介绍区别所在:</h3><h5 id="4-3-区别"><a href="#4-3-区别" class="headerlink" title="4.3 区别"></a>4.3 区别</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#使用和不使用$set更新的区别</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>    <span class="token string">'mother'</span><span class="token punctuation">:</span> <span class="token string">"Jack's mother"</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$set'</span><span class="token punctuation">:</span> student<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span><span class="token comment">#分割线</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不使用: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>    <span class="token string">'father'</span><span class="token punctuation">:</span> <span class="token string">"Jack's father"</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> student<span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span></code></pre><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">使用<span class="token punctuation">:</span> 更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'mother'</span><span class="token punctuation">:</span> <span class="token string">"Jack's mother"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 分割线 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>不使用<span class="token punctuation">:</span> 更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'mother'</span><span class="token punctuation">:</span> <span class="token string">"Jack's mother"</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'father'</span><span class="token punctuation">:</span> <span class="token string">"Jack's father"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析上面运行结果, 可以发现使用$set时, 若更新数据有原数据没有的字段, 则将该字段加到原数据上(上例为新增了mother字段), 而不会删除任何字段. 相反, 若不使用set时, 将从原数据中删除更新数据没有的字段, 再加上新增字段(上例为删除了mother字段, 新增了father字段. 也可以理解为将原数据完全替换为更新数据)</strong></p><h5 id="4-4-update-one和update-many的区别"><a href="#4-4-update-one和update-many的区别" class="headerlink" title="4.4 update_one和update_many的区别:"></a>4.4 update_one和update_many的区别:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#官方推荐使用</span><span class="token comment">#update_one和update_many的区别</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'update_one: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$inc'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span> result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span><span class="token comment">#分割线</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'update_many: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update_many<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$inc'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span> result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span></code></pre><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">update_one<span class="token punctuation">:</span> <span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>UpdateResult <span class="token builtin">object</span> at <span class="token number">0x7f6cace0f9c8</span><span class="token operator">></span><span class="token number">1</span> <span class="token number">1</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 分割线 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>update_many<span class="token punctuation">:</span> <span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>UpdateResult <span class="token builtin">object</span> at <span class="token number">0x7f6cace0fa88</span><span class="token operator">></span><span class="token number">3</span> <span class="token number">3</span></code></pre><p><strong>{‘age’: {’$gt’: 20}}为查找年龄大于20的, {‘inc’: {‘age’: 1}}为将年龄+1</strong></p><h3 id="5-删除"><a href="#5-删除" class="headerlink" title="5. 删除:"></a>5. 删除:</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#删除</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#推荐使用</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>delete_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>deleted_count<span class="token punctuation">)</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>delete_many<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>deleted_count<span class="token punctuation">)</span></code></pre><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1</span><span class="token number">2</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MongoDB-下载安装&quot;&gt;&lt;a href=&quot;#MongoDB-下载安装&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 下载安装&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/mongodb/mongodb-wi</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Mongodb" scheme="https://wyx6.top/tags/Mongodb/"/>
    
  </entry>
  
  <entry>
    <title>python3高阶函数详解</title>
    <link href="https://wyx6.top/2020/12/22/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://wyx6.top/2020/12/22/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2020-12-22T10:45:17.698Z</published>
    <updated>2020-12-22T11:58:14.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Python中，变量可以指向函数</p><p>函数名也是变量</p><p>既然变量可以指向函数，<br>函数的参数能接收变量，</p><p><strong>&lt;&lt;&lt;那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。&gt;&gt;&gt;</strong></p><h1 id="map-function-iterable-…"><a href="#map-function-iterable-…" class="headerlink" title="map(function, iterable, …)"></a>map(function, iterable, …)</h1><p>map(function, iterable, …)</p><p><strong>功能</strong><br><strong>将第一个参数 function 依次作用在参数可迭代对象中的每一个元素上，</strong><br><strong>返回包含每次 function 函数返回值的新迭代器</strong></p><p><strong>参数</strong><br><strong>function – 函数，有两个参数</strong><br><strong>iterable – 俩个可迭代对象（如：序列）</strong></p><p><strong>返回值</strong><br><strong>Python 3.x 返回迭代器</strong></p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def func(a,b):    return a * b     #map第一个实参写函数名                            #实参以最少的一方为准ss &#x3D; map(func,[1,2,3,4,5],[1,2,3,4,5,6,7,8,9])for i in ss:    #用迭代器输出    print(i)</code></pre><h1 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable[, initializer])"></a>reduce(function, iterable[, initializer])</h1><p>reduce(function, iterable[, initializer])</p><p><strong>功能</strong><br><strong>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：</strong><br><strong>用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，</strong><br><strong>得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</strong></p><p><strong>其效果类似：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</strong></p><p><strong>参数</strong><br><strong>function – 函数，有两个参数</strong><br><strong>iterable – 可迭代对象</strong><br><strong>initializer – 可选，初始参数</strong></p><p><strong>返回值</strong><br><strong>返回函数计算结果。</strong></p><p>俩种书写格式</p><pre class="language-none"><code class="language-none"># 1.0import functools# # 2.0# from functools import reduce#ret &#x3D; functools.reduce(lambda a,b:a*b, [11,22,33,44,55])print(ret)</code></pre><h1 id="filter-function-iterable"><a href="#filter-function-iterable" class="headerlink" title="filter(function, iterable)"></a>filter(function, iterable)</h1><p>filter(function, iterable)</p><p><strong>功能</strong><br><strong>该接收两个参数，第一个为函数，</strong><br><strong>第二个为序列，序列的每个元素作为参数传递给函数进行判断，</strong><br><strong>然后返回 True 或 False，最后将返回 True 的元素放到新迭代器对象中</strong></p><p><strong>参数</strong><br><strong>function – 判断函数</strong><br><strong>iterable – 可迭代对象（如：序列）</strong></p><p><strong>返回值</strong><br><strong>返回一个迭代器对象</strong></p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def func(n):    return n % 2 &#x3D;&#x3D; 0ret &#x3D; filter(func,range(1,101))print(list(ret))        #迭代器ret &#x3D; filter(lambda a: a % 3 &#x3D;&#x3D; 0 ,range(10))print(list(ret))</code></pre><h1 id="sorted-iterable-key-abs-reverse-False"><a href="#sorted-iterable-key-abs-reverse-False" class="headerlink" title="sorted(iterable, key=abs, reverse=False)"></a>sorted(iterable, key=abs, reverse=False)</h1><p>sorted(iterable, key=abs, reverse=False)<br>       #可迭代对象 #绝对值  #排序</p><p><strong>功能</strong><br><strong>对所有可迭代的对象进行排序操作</strong></p><p><strong>参数</strong><br><strong>iterable – 可迭代对象。</strong><br><strong>key – key指定的函数将作用于可迭代对象上的每一个元素，并根据key函数返回的结果进行排序</strong><br><strong>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）</strong></p><p><strong>返回值</strong><br><strong>返回重新排序的列表</strong></p><pre class="language-python" data-language="python"><code class="language-python">ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>绝对值ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span></code></pre><h1 id="lambda表达式-匿名函数"><a href="#lambda表达式-匿名函数" class="headerlink" title="lambda表达式(匿名函数)"></a>lambda表达式(匿名函数)</h1><p>匿名函数的另一个别称是“lambda表达式”</p><p>lambda表达式的语法：<br>       <strong>lambda argument_list: expression</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token comment"># lambda 格式：</span><span class="token comment"># lambda 形参:表达式或者返回值</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>       <span class="token comment">#有参无返</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>ff <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>a<span class="token operator">*</span>b          <span class="token comment">#有参有返</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>在函数内部，可以调用其他函数。</p><p>如果一个函数在内部调用自身本身，这个函数就是递归函数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 阶乘</span><span class="token comment"># 1！= 1*1</span><span class="token comment"># 2！= 1*2</span><span class="token comment"># 3！= 1*2*3</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment">#n * (n-1)</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#调用本身</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>斐波那契数列</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="返回函数-闭包"><a href="#返回函数-闭包" class="headerlink" title="返回函数 闭包"></a>返回函数 闭包</h1><p><strong>外层函数返回内层函数的引用 – 起到了让内层函数执行的目的</strong></p><pre class="language-none"><code class="language-none">#返回函数# def outer():#     def inner():#         return sum([i for i in range(1,101) if i % 2 &#x3D;&#x3D; 0])#     return inner()      #外层函数返回内层函数的引用 -- 起到了让内层函数执行的目的# print(outer())def outer(n):    def inner():        return sum([i for i in range(1,n+1) if i % 2 &#x3D;&#x3D; 0])    return inner      #外层函数返回内层函数的引用 -- 起到了让内层函数执行的目的print(outer(100)())</code></pre><h1 id="闭包是“返回函数”的一个典型应用"><a href="#闭包是“返回函数”的一个典型应用" class="headerlink" title="闭包是“返回函数”的一个典型应用"></a>闭包是“返回函数”的一个典型应用</h1><p><strong>闭包的定义：</strong><br><strong>在一个外函数中定义了一个内函数，    #函数的嵌套</strong><br><strong>内函数里运用了外函数的临时变量，    #嵌套作用域变量</strong><br><strong>并且外函数的返回值是内函数的引用。   #返回函数</strong><br><strong>这样就构成了一个闭包。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 闭包</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> a<span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> innerouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="偏函数由functools-partial创建"><a href="#偏函数由functools-partial创建" class="headerlink" title="偏函数由functools.partial创建"></a>偏函数由functools.partial创建</h1><p><strong>偏函数由functools.partial创建</strong></p><p><strong>它的作用就是，把一个函数的某些参数给固定住</strong><br><strong>（也就是设置默认值），</strong><br><strong>返回一个新的函数，调用这个新函数会更简单。</strong></p><p>#比较少用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b                <span class="token comment">#不可以给第一个值固定 否则报错</span>f <span class="token operator">=</span> partial<span class="token punctuation">(</span>func<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#传a的值</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Python中，变量可以指向函数&lt;/p&gt;
&lt;p&gt;函数名也是变量&lt;/p&gt;
&lt;p&gt;既然变量可以指向函数，&lt;br&gt;函数的参数能接收变量，&lt;/p&gt;</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="高阶函数" scheme="https://wyx6.top/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解python3装饰器</title>
    <link href="https://wyx6.top/2020/12/22/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://wyx6.top/2020/12/22/%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-12-22T10:43:01.555Z</published>
    <updated>2020-12-28T07:28:11.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">装饰器</a></h1><p>装饰器的底层实际就是闭包</p><pre><code>**在一个外函数中定义了一个内函数，    #函数的嵌套**、**内函数里运用了外函数的临时变量，    #嵌套作用域变量****并且外函数的返回值是内函数的引用。   #返回函数****这样就构成了一个闭包。**`</code></pre><p>装饰器是在函数调用之上的修饰 他的作用是在不改变原有项目代码的基础上增加一些额外的功能</p><p>装饰器能有助于检查某个人是否被授权去使用一个web应用的端点(endpoint)。它们被大量使用于Flask和Django web框架中。</p><p>日志是装饰器运用的另一个亮点</p><h1 id="装饰器格式"><a href="#装饰器格式" class="headerlink" title="装饰器格式"></a>装饰器格式</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能'</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">#现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'789'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello python'</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="有形参的装饰器"><a href="#有形参的装饰器" class="headerlink" title="有形参的装饰器"></a>有形参的装饰器</h1><pre class="language-none"><code class="language-none">def outer(func):        # @里有形参 这里必须跟    def inner(a,b):            #自上而下的执行        print(&#39;装饰器函数开始执行&#39;)        print(&#39;特殊校验功能开始执行&#39;)        # 这里也得跟形参        func(a,b)      #现在代表ff        print(&#39;装饰器函数结束执行&#39;)    return inner@outerdef ff(a,b):        #有形参    print(&#39;a+b&#x3D;&#39;,(a+b))ff(50,60)</code></pre><h1 id="有形参的装饰器-用不定长参数"><a href="#有形参的装饰器-用不定长参数" class="headerlink" title="有形参的装饰器  用不定长参数"></a>有形参的装饰器  用不定长参数</h1><pre class="language-none"><code class="language-none">def outer(func):        # @里有形参 这里必须跟    def inner(*args,**kwargs):            #自上而下的执行        print(&#39;装饰器函数开始执行&#39;)        print(&#39;特殊校验功能开始执行&#39;)        # 这里也得跟形参        func(*args,**kwargs)      #现在代表ff        print(&#39;装饰器函数结束执行&#39;)    return inner@outerdef ff(a,b,d):        #有形参    print(&#39;a+b+d&#x3D;&#39;,(a+b+d))ff(50,60,89)</code></pre><h1 id="多层装饰器"><a href="#多层装饰器" class="headerlink" title="多层装饰器"></a>多层装饰器</h1><p><strong>多层嵌套装饰器开始的时候，</strong><br><strong>装饰器自上而下开始，</strong><br><strong>然后执行函数操作，</strong><br><strong>结束时，装饰器自下而上结束</strong></p><pre class="language-none"><code class="language-none">def outer1(func):    # @里有形参 这里必须跟    def inner(*args, **kwargs):  # 自上而下的执行        print(&#39;装饰器函数1开始执行&#39;)        print(&#39;特殊校验功能1开始执行&#39;)        # 这里也得跟形参        func(*args, **kwargs)  # 现在代表ff        print(&#39;装饰器函数1结束执行&#39;)    return innerdef outer2(func):    # @里有形参 这里必须跟    def inner(*args, **kwargs):  # 自上而下的执行        print(&#39;装饰器函数2开始执行&#39;)        print(&#39;特殊校验功能2开始执行&#39;)        # 这里也得跟形参        func(*args, **kwargs)  # 现在代表ff        print(&#39;装饰器函数2结束执行&#39;)    return inner@outer1@outer2def ff(a, b, d):  # 有形参    print(&#39;a+b+d&#x3D;&#39;, (a + b + d))ff(50, 60, 89)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/python-func-decorators.html&quot;&gt;装饰器&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="装饰器" scheme="https://wyx6.top/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>django全局限流策略以及中间件(redis mysql)和装饰器(redis mysql)的实现方式</title>
    <link href="https://wyx6.top/2020/12/21/%E9%99%90%E6%B5%81/"/>
    <id>https://wyx6.top/2020/12/21/%E9%99%90%E6%B5%81/</id>
    <published>2020-12-21T12:48:36.094Z</published>
    <updated>2020-12-22T10:43:08.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们这里的限流是指访问接口过多会受到限制，大部分是指恶意访问  例如爬虫等</p><p>在django中我们可以使用django自带的限流策略，全局配置，自定义配置，都可以，</p><p>今天给同学们带来的是用中间件以及装饰器来进行的限流策略</p><h1 id="django自带限流"><a href="#django自带限流" class="headerlink" title="django自带限流"></a>django自带限流</h1><p>有兴趣的可以去看看<a href="https://blog.csdn.net/weixin_45954124/article/details/109319318">django的八大功能</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 安装包</span>pip install djangorestframework<span class="token operator">==</span><span class="token number">3.11</span><span class="token number">.1</span><span class="token comment"># apps进行注册</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment"># 进行全局配置</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment"># 限流（防爬虫）</span>    <span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.throttling.UserRateThrottle'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'10000/hour'</span><span class="token punctuation">,</span>  <span class="token comment"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3000/day'</span><span class="token punctuation">,</span>  <span class="token comment"># 未认证用户每天能访问3次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h1 id="中间件redis实现方法–黑名单效果"><a href="#中间件redis实现方法–黑名单效果" class="headerlink" title="中间件redis实现方法–黑名单效果"></a>中间件redis实现方法–黑名单效果</h1><p>redis读写速度快  使用简单</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> BlackList<span class="token punctuation">,</span> User<span class="token punctuation">,</span> Access<span class="token punctuation">,</span> Role<span class="token keyword">import</span> redis<span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 拦截请求</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/user/verification/'</span><span class="token punctuation">:</span>            x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>                ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>            <span class="token comment"># print(r.get(ip))</span>            <span class="token comment"># 判断是否访问过  访问过就等待 没有就存储</span>            <span class="token keyword">if</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>                r<span class="token punctuation">.</span>incrby<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                count <span class="token operator">=</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        user <span class="token operator">=</span> BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        time_now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>                        time_now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                        banned_time <span class="token operator">=</span> BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>banned_time                        banned_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                        <span class="token comment"># print((time_now - banned_time).seconds)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>time_now <span class="token operator">-</span> banned_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">:</span>                            BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"给你小子一次机会"</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"utils/mymidder--46"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"你完蛋了"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 存储ip</span>                r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># 设置过期时间60秒</span>                r<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span></code></pre><h1 id="中间件mysql实现代码"><a href="#中间件mysql实现代码" class="headerlink" title="中间件mysql实现代码"></a>中间件mysql实现代码</h1><p>增加了mysql读写次数 影响性能</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> BlackList<span class="token punctuation">,</span> User<span class="token punctuation">,</span> Access<span class="token punctuation">,</span> Role<span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/user/verification/'</span><span class="token punctuation">:</span>            x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>            <span class="token comment"># x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')</span>            <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>                ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>            <span class="token comment"># 获取当前时间</span>            time_now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 解析</span>            time_now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取上一次请求时间</span>                start_time <span class="token operator">=</span> CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start_time                <span class="token comment"># 解析</span>                start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                <span class="token comment"># 计算当前时间减去 上一次请求时间  结果为秒</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>                <span class="token comment"># 如果小于等于60秒  就不能再发  过了60秒 就删除并重新创建</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment"># 删除过了时间的</span>                    CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 添加新时间</span>                    CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user/utils--76"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token comment"># 加入第一次操作没有 则添加</span>                CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span></code></pre><h1 id="redis装饰器实现"><a href="#redis装饰器实现" class="headerlink" title="redis装饰器实现"></a>redis装饰器实现</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> CurrentLimiting<span class="token punctuation">,</span> BlackListr <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>db<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token comment"># redis</span><span class="token keyword">def</span> <span class="token function">current_limiting_redis</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数开始执行'</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>            ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>incrby<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user/utils--48"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"你完蛋了"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 存储ip</span>            r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 设置过期时间60秒</span>            r<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner</code></pre><p>在view中调用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 发送验证码</span><span class="token keyword">class</span> <span class="token class-name">VerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@current_limiting_redis</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 生成随机验证码6位</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>        <span class="token comment"># 存储到session</span>        uid <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>        <span class="token comment"># 调用钉钉接口 发送验证码</span>        dindin_post<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">:</span> uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h1 id="mysql装饰器实现"><a href="#mysql装饰器实现" class="headerlink" title="mysql装饰器实现"></a>mysql装饰器实现</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># mysql</span><span class="token keyword">import</span> os<span class="token keyword">import</span> django<span class="token keyword">import</span> datetime<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezoneos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'mydjango.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">current_limiting_mysql</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数开始执行'</span><span class="token punctuation">)</span>        x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>            ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        time_now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>        time_now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            start_time <span class="token operator">=</span> CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start_time            start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user/utils--76"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;我们这里的限流是指访问接口过多会受到限制，大部分是指恶意访问  例如爬虫等&lt;/p&gt;
&lt;p&gt;在django中我们可以使用django自带的限流</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4" scheme="https://wyx6.top/categories/python3/django2-0-4/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="中间件" scheme="https://wyx6.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="限流" scheme="https://wyx6.top/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解python生成器</title>
    <link href="https://wyx6.top/2020/12/21/python%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://wyx6.top/2020/12/21/python%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2020-12-21T12:41:37.000Z</published>
    <updated>2020-12-21T09:20:42.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>利用迭代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。</p><p>但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。</p><p>为了达到记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即生成器(generator)。</p><p>“”” *生成器是一类特殊的迭代器。”””</p><h1 id="创建生成器方法-1"><a href="#创建生成器方法-1" class="headerlink" title="创建生成器方法 1"></a>创建生成器方法 1</h1><p>要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的 [ ] 改成 ( )</p><pre class="language-none"><code class="language-none"># g &#x3D; [i for  i in range(1,101)]            #列表# print(g)g &#x3D; (i for i in range(1, 101))  # 生成器print(g)  # 生成器&lt;generator object &lt;genexpr&gt; at 0x00F60EF0&gt;# 方法1 for循环# for i in g:#     print(i)# 方法2 for 循环的本质# while True:#     try:#         print(next(g))#     except StopIteration as e:#         break# 方法3 列表 元祖# print(list(g))# print(tuple(g))</code></pre><h2 id="创建生成器方法2-return-换成-yield"><a href="#创建生成器方法2-return-换成-yield" class="headerlink" title="创建生成器方法2      return 换成 yield"></a>创建生成器方法2      return 换成 yield</h2><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。</p><pre class="language-none"><code class="language-none"># def Fei(nn):#     sum1,sum2 &#x3D; 0,1#     current &#x3D; 0               #位置#     while current &lt; nn:       #if 换成while#         sum &#x3D; sum1#         sum1,sum2 &#x3D; sum2,sum1 + sum2#         current +&#x3D; 1#         yield sum## if __name__ &#x3D;&#x3D; &#39;__main__&#39;:##     # print(Fei(5))                   #&lt;generator object Fei at 0x016A47F0&gt;##     #第一种方法#     s &#x3D; Fei(int(input(&#39;请输入：&#39;)))# for i in s:#     print(i)# def Fei(nn):#     sum1,sum2 &#x3D; 0,1#     current &#x3D; 0               #位置#     while current &lt; nn:       #if 换成while#         sum &#x3D; sum1#         sum1,sum2 &#x3D; sum2,sum1 + sum2#         current +&#x3D; 1#         yield sum## if __name__ &#x3D;&#x3D; &#39;__main__&#39;:##     # print(Fei(5))                   #&lt;generator object Fei at 0x016A47F0&gt;##     #第一种方法#     s &#x3D; Fei(int(input(&#39;请输入：&#39;)))# for i in s:#     print(i)# 第二种方法# while True:#     try:#         print(next(s))#     except StopIteration:#         break# 第三种方法# print(list(s))# print(tuple(s))# 扩展send()方法# a &#x3D;s.send(None)  #第一个值必须为None 没有为什么# print(a)# a &#x3D;s.send(11)      #后边随便写# print(a)# a &#x3D; s.send(11)# print(a)# a &#x3D; s.send(11)# print(a)# a &#x3D;s.send(11)# print(a)# a &#x3D; s.send(11)# print(a)# a &#x3D; s.send(11)# print(a)</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用了yield关键字的函数不再是函数，而是生成器。（使用了yield的函数就是生成器）</p><p>yield关键字有两点作用：<br>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起<br>将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</p><p>可以使用next()函数让生成器从断点处继续执行，即唤醒生成器（函数）</p><p>Python3中的生成器可以使用return返回最终运行的返回值，而Python2中的生成器不允许使用return返回一个返回值（即可以使用return从生成器中退出，但return后不能有任何表达式）。</p><p>唤醒生成器的三种方试</p><p>send()函数  next()函数 __next__方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成器&quot;&gt;&lt;a href=&quot;#生成器&quot; class=&quot;headerlink&quot; title=&quot;生成器&quot;&gt;&lt;/a&gt;生成器&lt;/h1&gt;&lt;p&gt;利用迭代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。&lt;/p&gt;
&lt;p&gt;但是我们在实现一个迭代器时，</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解python迭代器</title>
    <link href="https://wyx6.top/2020/12/21/python%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://wyx6.top/2020/12/21/python%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2020-12-21T12:41:37.000Z</published>
    <updated>2020-12-21T10:29:55.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>迭代是访问集合元素的一种方式。<br> 迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。<br> 迭代器只能往前不会后退。</p><p> 1.可迭代对象   字符串  列表  字典  元祖  集合 range()<br> 我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫迭代。</p><p> 但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># for i in "laowang":</span><span class="token comment">#     print(i,end=' ')</span><span class="token comment"># print()</span><span class="token comment"># for i in [1,2,3,4,5]:</span><span class="token comment">#     print(i,end=' ')</span><span class="token comment"># print()</span><span class="token comment"># for i in range(1,11):</span><span class="token comment">#     print(i,end=' ')</span><span class="token comment"># print()</span></code></pre><p> 可迭代对象包括：</p><p> 列表、字典、集合、字符串等数据类型。</p><p> 数字类型不可迭代</p><h1 id="如何判断一个对象是否可以迭代"><a href="#如何判断一个对象是否可以迭代" class="headerlink" title="如何判断一个对象是否可以迭代"></a>如何判断一个对象是否可以迭代</h1><p>可以使用 isinstance() 判断一个对象是否是 Iterable（可迭代） 对象：</p><p>在python3.5  3.7.2之前不需要再abc里引入</p><p>from collections.abc import Iterable  # 可迭代对象</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># isinstance(要判断的对象，数据类型)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="可迭代对象的本质"><a href="#可迭代对象的本质" class="headerlink" title="可迭代对象的本质"></a>可迭代对象的本质</h1><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。</p><p>那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。<br>我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)。</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。</p><p>可迭代对象通过__iter__方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><p>那么也就是说，一个具备了__iter__方法的对象，就是一个可迭代对象。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># class My_list(object):</span><span class="token comment">#     def __init__(self):</span><span class="token comment">#         self.aa = []</span><span class="token comment">#</span><span class="token comment">#     def add(self,item):</span><span class="token comment">#         self.aa.append(item)</span><span class="token comment">#</span><span class="token comment">#     def __iter__(self):</span><span class="token comment">#         pass</span><span class="token comment">#</span><span class="token comment"># mm = My_list()</span><span class="token comment"># mm.add(1)</span><span class="token comment"># mm.add(2)</span><span class="token comment"># mm.add(3)</span><span class="token comment"># mm.add(4)</span><span class="token comment"># mm.add(5)</span><span class="token comment">#</span><span class="token comment"># from collections.abc import Iterable</span><span class="token comment"># print(isinstance(mm,Iterable))</span><span class="token comment">#</span><span class="token comment"># for i in mm.aa:</span><span class="token comment">#     print(i)</span></code></pre><h1 id="iter-和next"><a href="#iter-和next" class="headerlink" title="iter()和next()"></a>iter()和next()</h1><pre class="language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token comment"># iter（） 获取可迭代对象的迭代器</span>ali_list <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token comment"># next（）  获取迭代器的下一条数据</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))           #StopIteration 停止迭代异常</span><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable  <span class="token comment"># 迭代器</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>ali_list<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a_list<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 只是可迭代对象</span></code></pre><h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator()"></a>iterator()</h1><p><strong>一个实现了iter方法和next方法的对象，就是迭代器。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># class MyIterator():</span><span class="token comment">#     """迭代器类"""</span><span class="token comment">#     def __init__(self,alist):</span><span class="token comment">#         """属性初始化和赋值"""</span><span class="token comment">#         self.alist = alist</span><span class="token comment">#         self.weizhi = 0        #记录遍历位置</span><span class="token comment">#</span><span class="token comment">#     def __iter__(self):</span><span class="token comment">#         """获取迭代器，自身就为迭代器，所以返回自身"""</span><span class="token comment">#         return self</span><span class="token comment">#</span><span class="token comment">#     def __next__(self):</span><span class="token comment">#         """获取迭代器下一位置数据"""</span><span class="token comment">#         if self.weizhi &lt; len(self.alist):</span><span class="token comment">#             item = self.alist[self.weizhi]</span><span class="token comment">#             self.weizhi += 1</span><span class="token comment">#             return item</span><span class="token comment">#         else:</span><span class="token comment">#             raise StopIteration     #主动抛出 停止异常迭代</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     a_list = [1, 2, 3, 4, 5, 6]</span><span class="token comment">#     ml = MyIterator(a_list)</span><span class="token comment">#     # for i in ml:</span><span class="token comment">#     #     print(i)</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment">#     # for循环本质</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     a_list = [1, 2, 3, 4, 5, 6]</span><span class="token comment">#     while True:</span><span class="token comment">#         try:</span><span class="token comment">#             ret = next(ml)</span><span class="token comment">#             print(ret)</span><span class="token comment">#         except StopIteration as e:</span><span class="token comment">#             print(e)</span><span class="token comment">#             break</span><span class="token comment"># from timeit import time</span><span class="token comment"># def outer(fun):</span><span class="token comment">#     def inner():</span><span class="token comment">#         a = time.time()</span><span class="token comment">#         fun()</span><span class="token comment">#         b = time.time()</span><span class="token comment">#         print(b - a)</span><span class="token comment">#     return inner</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># @outer</span><span class="token comment"># def fun():</span><span class="token comment">#     print("hello")</span><span class="token comment">#     time.sleep(1)</span><span class="token comment">#     print("python")</span><span class="token comment"># fun()</span></code></pre><h1 id="使用迭代器构造斐波那契数列"><a href="#使用迭代器构造斐波那契数列" class="headerlink" title="使用迭代器构造斐波那契数列"></a>使用迭代器构造斐波那契数列</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 单词  current-位置</span><span class="token comment"># class Fei():</span><span class="token comment">#     """斐波那锲数列类"""</span><span class="token comment">#     def __init__(self,nu):</span><span class="token comment">#         """实例属性的初始化和赋值"""</span><span class="token comment">#         self.nn = nu</span><span class="token comment">#         self.current = 0         #记录位置</span><span class="token comment">#         self.sum1 = 0           #定义初始值</span><span class="token comment">#         self.sum2 = 1</span><span class="token comment">#     def __iter__(self):</span><span class="token comment">#         """获取迭代器，即自身"""</span><span class="token comment">#         return self</span><span class="token comment">#     def __next__(self):</span><span class="token comment">#         """获取迭代器下一位置数据"""</span><span class="token comment">#         if self.current &lt; self.nn:</span><span class="token comment">#             num = self.sum1</span><span class="token comment">#             self.sum1,self.sum2 = self.sum2,self.sum1 + self.sum2</span><span class="token comment">#             self.current += 1</span><span class="token comment">#             return num</span><span class="token comment">#         else:</span><span class="token comment">#             raise StopIteration</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     fei = Fei(int(input('请输入：')))</span><span class="token comment">#     """判断是否为迭代器"""</span><span class="token comment"># from collections.abc import Iterator,Iterable</span><span class="token comment"># print(isinstance(fei,Iterable))</span><span class="token comment"># for i in fei:</span><span class="token comment">#     print(i)</span><span class="token comment"># print(list(fei))          #迭代器对象只能被查看一次</span><span class="token comment"># print(tuple(fei))</span><span class="token comment"># while True:</span><span class="token comment">#     try:</span><span class="token comment">#         print(next(fei))</span><span class="token comment">#     except StopIteration as e:</span><span class="token comment">#         break</span><span class="token keyword">class</span> <span class="token class-name">Fei</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>nn <span class="token operator">=</span> nn        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>weizhi <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>a        <span class="token keyword">if</span> self<span class="token punctuation">.</span>weizhi <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>nn<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b            self<span class="token punctuation">.</span>weizhi <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token builtin">sum</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration    <span class="token comment"># def sb(self):</span>    <span class="token comment">#     self.list1.append(sum)</span>    <span class="token comment">#     self.list1.reverse()</span>    <span class="token comment">#     print(self.list1)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    aa <span class="token operator">=</span> Fei<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># print(aa)</span>    <span class="token comment"># print(list(aa[::-1]))</span>a <span class="token operator">=</span> Fei<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;迭代是访问集合元素的一种方式。&lt;br&gt; 迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>权限管理之位运算以及RBAC俩种实现方法</title>
    <link href="https://wyx6.top/2020/12/21/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8ARBAC%E4%BF%A9%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>https://wyx6.top/2020/12/21/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8ARBAC%E4%BF%A9%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</id>
    <published>2020-12-21T11:48:11.233Z</published>
    <updated>2020-12-21T13:12:03.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后台系统设计——角色权限"><a href="#后台系统设计——角色权限" class="headerlink" title="后台系统设计——角色权限"></a>后台系统设计——角色权限</h1><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>不论是哪种后台管理系统，“人员权限”始终是绕不开的话题。无论是移动端，PC端产品，登陆都需要一个账号。只是对于C端的产品，大多都是用户自己注册即可。</p><p>而对于后台产品而言，是需要公司内部人员去创建账号的。每个使用系统的用户都有一个独一无二的账号，每个账号都有自己对应的权限。</p><p>多数情况下，除了超级管理员外，我们会对大多数的账号的权限做一些限制，以此来管理不同用户的使用权限问题。</p><p>譬如，做企业使用类软件，不同部门、不同职位的人的权限是不同的；再例如一款收费产品的收费用户和免费用户权限也是迥然不同的。</p><p>如果每个用户都单独做权限控制的话，当系统用户体量非常大的时候，就会发现以下问题：</p><p>很多账号权限都是一样的，但每次都要再配一次；</p><p>当某类权限用户的权限需要修改时，无法批量修改，只能一个个去修改非常耗时；</p><h1 id="二、经典模型——RBAC"><a href="#二、经典模型——RBAC" class="headerlink" title="二、经典模型——RBAC"></a>二、经典模型——RBAC</h1><p>这时候，聪明的产品先人就创建了“角色”的概念，通过对权限集的抽象，创立了角色，通过修改角色的权限，来控制拥有该角色的人员账号的权限。</p><h2 id="1、RBAC——基于角色的访问控制（Role-Based-Access-Control-）"><a href="#1、RBAC——基于角色的访问控制（Role-Based-Access-Control-）" class="headerlink" title="1、RBAC——基于角色的访问控制（Role-Based Access Control ）"></a><strong>1、RBAC——基于角色的访问控制（Role-Based Access Control ）</strong></h2><p>其基本思想是，对系统操作的各种权限不是直接授予具体的用户，而是在用户集合与权限集合之间建立一个角色集合。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。</p><p>这样做的好处是，不必在每次创建用户时都进行分配权限的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，这样将简化用户的权限管理，减少系统的开销。</p><p>按照百度百科对RBAC的定义，我们可以理解为此模型是通过角色关联用户，角色关联权限的方式，间接赋予用户权限。</p><h2 id="2-基于-Django-的后台管理平台，采用-RBAC-权限管理机制"><a href="#2-基于-Django-的后台管理平台，采用-RBAC-权限管理机制" class="headerlink" title="2.基于 Django 的后台管理平台，采用 RBAC 权限管理机制"></a>2.基于 Django 的后台管理平台，采用 RBAC 权限管理机制</h2><ul><li>用户表、角色表、权限表、资源列表<ul><li><code>用户表</code>：</li><li><code>角色表</code>：</li><li><code>资源列表(路径正则)</code>：资源名称（项目模块名称），资源路径（后台路由）<ul><li>资源分类：商品模块、订单模块、营销模块、权限模块、内容模块、其他模块</li></ul></li><li><code>权限表</code>：对某一个路由的增删改查权限</li><li><img src="https://img-blog.csdnimg.cn/20201221200059924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul><h2 id="3-RBAC角色权限管理机制实现思路"><a href="#3-RBAC角色权限管理机制实现思路" class="headerlink" title="3. RBAC角色权限管理机制实现思路"></a>3. RBAC角色权限管理机制实现思路</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 面向资源编程</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>shiyanlou<span class="token punctuation">.</span>com<span class="token operator">/</span>v1<span class="token operator">/</span>books<span class="token operator">/</span>        <span class="token comment"># 请求后端 books书籍表中数据</span>get    post<span class="token comment"># 用户表</span><span class="token comment"># 角色表</span><span class="token comment"># 权限表</span>get<span class="token operator">/</span>post<span class="token operator">/</span>put<span class="token operator">/</span>delete 对应关系</code></pre><ul><li>所有权限的本质是对数据库中表中数据增删改查的操作</li><li>而这些增删改查的操作是通过前端不同路由，通过get、post、put、delete方法操作数据库的</li><li>对权限的控制，最简单的方法就是判断当前用户是否可以对指定路由请求操作的权限</li><li>把角色和这个角色能够访问的 url 和 请求方式进行关联（因为正是的业务逻辑用户权限划分力度可能非常细致）</li><li>再简单的业务逻辑中这一张表就是权限表</li></ul><table><thead><tr><th>路由 资源(可能对应的是后端路由的 name名称，可以通过name名称解析出对应路由)</th><th>请求方式</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>get</td><td>判断用户是否可以查询books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>post</td><td>判断用户是否可以添加books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>put</td><td>判断用户是否可以更新books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>delete</td><td>判断用户是否可以删除books表中数据</td></tr></tbody></table><ul><li>后端如何判断用户权限<ul><li>用户发送求方法 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的url</li><li>后端首先查询时哪一个用户，然后查询当前用户的角色</li><li>最后判断这个角色是否可以访问 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的对应方法即可</li><li>如果这个角色有权限访问这个url就返回数据，不能访问就返回 401状态码</li></ul></li></ul><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><p><strong>表的设计</strong> </p><img src="https://img-blog.csdnimg.cn/2020122120045577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 角色表</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'角色'</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    per <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    role <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Role<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username<span class="token comment"># 节点表</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'节点表'</span><span class="token comment"># 权限表</span><span class="token keyword">class</span> <span class="token class-name">Access</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    role <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Role<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    node <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Node<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'权限表'</span></code></pre><p>在自定义中间件 添加判断权限</p><p>我们在响应视图前添加如下判断  </p><p>我们在访问<code>/user/blacklist/</code>时进行判断  </p><p>获取token解码获取当前用户信息 进行关联查询</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_decode_handler<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token comment"># 判断用户属于的角色是否有权限</span><span class="token keyword">class</span> <span class="token class-name">JurisdictionMyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/user/blacklist/"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取token</span>                token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token comment"># 获取userid</span>                user_id <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>                <span class="token comment"># 获取用户id角色</span>                role_id <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>role_id                <span class="token comment"># 获取角色的权限（路由）</span>                path <span class="token operator">=</span> Access<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>role_id<span class="token operator">=</span>role_id<span class="token punctuation">)</span>                i <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> i <span class="token keyword">in</span> path <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> i<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name<span class="token punctuation">]</span>                <span class="token comment"># 判断当前用户有没有权限</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> i<span class="token punctuation">:</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">return</span></code></pre><h1 id="三、位运算实现权限管理"><a href="#三、位运算实现权限管理" class="headerlink" title="三、位运算实现权限管理"></a>三、位运算实现权限管理</h1><h2 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1. 位运算"></a>1. 位运算</h2><p>程序中的所有数在计算机内存中都是以二进制的形式<a href="https://baike.baidu.com/item/%E5%82%A8%E5%AD%98/2446499">储存</a>的。位运算就是直接对整数在内存中的二进制位进行<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C/33052">操作</a>。比如，and运算本来是一个逻辑<a href="https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a>，但整数与整数之间也可以进行and运算。举个例子，6的二进制是110，11的二进制是1011，那么6 and 11的结果就是2，它是二进制对应位进行逻辑运算的结果（0表示False，1表示True，空位都当0处理）。</p><p><img src="https://img-blog.csdnimg.cn/20201221202731845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p><strong>二进制</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b001</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b011</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b110</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b111</span><span class="token punctuation">)</span><span class="token comment"># 打印结果</span><span class="token number">1</span><span class="token number">3</span><span class="token number">4</span><span class="token number">6</span><span class="token number">7</span></code></pre><h2 id="2-简单demo事例"><a href="#2-简单demo事例" class="headerlink" title="2. 简单demo事例"></a>2. 简单demo事例</h2><pre class="language-python" data-language="python"><code class="language-python">user <span class="token operator">=</span> <span class="token number">0b110</span>permisssion <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'usermange'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">,</span> <span class="token string">'blacklist'</span><span class="token punctuation">:</span> <span class="token number">0b010</span><span class="token punctuation">,</span> <span class="token string">'login'</span><span class="token punctuation">:</span> <span class="token number">0b001</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> user <span class="token operator">&amp;</span> permisssion<span class="token punctuation">[</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没权限"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@my_decorator</span><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入视图'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>view<span class="token punctuation">(</span><span class="token string">"usermange"</span><span class="token punctuation">)</span>view<span class="token punctuation">(</span><span class="token string">"blacklist"</span><span class="token punctuation">)</span>view<span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token comment"># 打印结果</span>进入视图进入视图没权限</code></pre><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><p>在中间件加入判断  我们的<code>permission</code>也可以创建相应的表</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用位运算来判断权限</span><span class="token keyword">class</span> <span class="token class-name">JurisdictionMyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 权限对应表</span>        permission <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'/user/blacklist/'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">,</span> <span class="token string">'/user/user/'</span><span class="token punctuation">:</span> <span class="token number">0b010</span><span class="token punctuation">,</span> <span class="token string">'/user/user//'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/user/blacklist/"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取当前用户的权限</span>                per <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>                pk<span class="token operator">=</span>jwt_decode_handler<span class="token punctuation">(</span>token<span class="token operator">=</span>request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>per                <span class="token comment"># print(not bin(int(per)))   # False</span>                <span class="token comment"># print(permission[request.path]) # 4</span>                <span class="token comment"># 判断当前用户的权限 是否在 权限对应表中 有相应的权限</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">int</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span> <span class="token operator">&amp;</span> permission<span class="token punctuation">[</span>request<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"utils/mymidder--142"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token keyword">return</span></code></pre><p><strong>在实际开发中，往往一个类对象拥有多种权限，每种权限有两个状态即有和无，正常情况下，有多少个权限，就需要多少个字段保存相应状态，如果权限过多，那么这种方式显得极其笨重，最近学习了一种用位运算权限管理的方式，方便快捷，实现原理简单，大大简化操作，简单实现权限的管理</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;后台系统设计——角色权限&quot;&gt;&lt;a href=&quot;#后台系统设计——角色权限&quot; class=&quot;headerlink&quot; title=&quot;后台系统设计——角色权限&quot;&gt;&lt;/a&gt;后台系统设计——角色权限&lt;/h1&gt;&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; cla</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4" scheme="https://wyx6.top/categories/python3/django2-0-4/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="中间件" scheme="https://wyx6.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="位运算" scheme="https://wyx6.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="RBAC" scheme="https://wyx6.top/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>python浅拷贝与深拷贝以及is 和 == 的区别</title>
    <link href="https://wyx6.top/2020/12/21/python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://wyx6.top/2020/12/21/python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-12-21T08:39:18.038Z</published>
    <updated>2020-12-21T09:01:20.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、浅拷贝"><a href="#一、浅拷贝" class="headerlink" title="一、浅拷贝"></a>一、浅拷贝</h1><p> Python中不但变量名无需事先声明，而且也无需类型声明。</p><p>在Python语言中，对象的类型和内存占用都是运行时确定的。</p><p> 在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。</p><p> 在对象创建后，一个该对象的引用会被赋值给左侧的变量。</p><p> copy模块用于对象的拷贝操作。</p><p> 该模块只提供了两个主要的方法：</p><p> copy.copy与copy.deepcopy，<br> 分别表示浅拷贝与深拷贝</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># a = [11,12]</span><span class="token comment"># b = a</span><span class="token comment"># print(id(a))        #列表是可变类型 每次刷新系统都会随机非配内存空间</span><span class="token comment"># print(id(b))</span><span class="token comment">#        copy.copy</span><span class="token comment">#        浅拷贝    浅拷贝只会拷贝第一层</span><span class="token comment">#                  浅拷贝是对于一个对象的顶层拷贝</span><span class="token comment">#                  通俗的理解是：拷贝了引用，并没有拷贝内容</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token comment"># print(id(a))</span><span class="token comment"># print(id(b))</span><span class="token comment"># # print(c)</span><span class="token comment"># print(id(c))</span><span class="token comment">#</span><span class="token keyword">import</span> copyd <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># print(id(d))</span><span class="token comment"># print(d)        #[[11, 22], [33, 44]]</span><span class="token comment"># print(id(d[0]))</span><span class="token comment"># print(id(d[-1]))</span></code></pre><p> <strong>总结：</strong><br> 浅拷贝是对于一个对象的顶层拷贝，相当于只拷贝了最浅的一层或者第一层。<br> 通俗的理解是：拷贝了引用，并没有拷贝内容</p><h1 id="二、深拷贝"><a href="#二、深拷贝" class="headerlink" title="二、深拷贝"></a>二、深拷贝</h1><p> <strong>copy.deepcopy</strong><br> 深拷贝  深拷贝会完全复制原变量的所有数据（递归性质的拷贝），在内存中生成一套完全一样的内容<br> 我们对这两个变量中的一个进行任意修改都不会影响另一个变量。</p><pre class="language-none"><code class="language-none"># a &#x3D; [11,12]# b &#x3D; [22,23]# c &#x3D; [a,b]# print(id(c))## import copy## d &#x3D; copy.copy(c)# print(id(d))## c[0].append(55)# print(c)# print(b)</code></pre><p> <strong>深拷贝总结：</strong><br> 深拷贝会完全复制原变量的所有数据（递归），<br> 在内存中生成一套完全一样的内容，<br> 我们对这两个变量中的一个进行任意修改都不会影响另一个变量。</p><h1 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h1><p> 浅拷贝对不可变类型和可变类型的copy不同<br> copy.copy对于可变类型，会进行浅拷贝<br> copy.copy对于不可变类型，不会拷贝，仅仅是内存意义上的指向</p><h1 id="is"><a href="#is" class="headerlink" title="is   =="></a>is   ==</h1><p>== 比较的是两个对象的内容是否相等，即内存地址可以不一样，内容一样就可以了。</p><p>is 比较的是两个实例对象是不是完全相同，它们是不是同一个对象，占用的内存地址是否相同。</p><pre class="language-none"><code class="language-none"># a &#x3D; [11,22]# b &#x3D; [11,22]# # print(id(a))# # print(id(b))## if a &#x3D;&#x3D; b:#     print(&#39;意思相等，地址不一&#39;)### if a is b:#     print(&#39;a 是 b，地址相等&#39;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、浅拷贝&quot;&gt;&lt;a href=&quot;#一、浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;一、浅拷贝&quot;&gt;&lt;/a&gt;一、浅拷贝&lt;/h1&gt;&lt;p&gt; Python中不但变量名无需事先声明，而且也无需类型声明。&lt;/p&gt;
&lt;p&gt;在Python语言中，对象的类型和内存占</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>钉钉-gitee三方登录(工厂模式)</title>
    <link href="https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/"/>
    <id>https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/</id>
    <published>2020-12-20T14:59:30.000Z</published>
    <updated>2020-12-28T07:21:43.066Z</updated>
    
    <content type="html"><![CDATA[<p>大家都使用过三方登录 例如（QQ、微信、微博）那我就带着大家学习一下三方登录，并且我们好引入工厂模式来进行，开始吧</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>首先我们简单介绍一下<strong>工厂模式</strong>。大家都知道有一造车知名企业，在疫情期间 ，竟然开始生产口罩</p><p>是什么原因呢！就是工厂模式所带来的好处 ，就是你给我什么  ，我就给你生产什么。</p><p>工厂收到钢铁，那就开始制造汽车 。收到针线 ，就开始制造口罩。</p><p><code>demo事例</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dingding</span><span class="token punctuation">:</span>    <span class="token comment"># 钉钉登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"钉钉登录"</span>    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'123'</span><span class="token keyword">class</span> <span class="token class-name">GitEe</span><span class="token punctuation">:</span>    <span class="token comment"># 码云登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"码云登录"</span>    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'456'</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>   <span class="token comment"># 静态方法无需实例化 直接调用</span>    <span class="token keyword">def</span> <span class="token function">product_login</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dingding"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Dingding<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span>demo1 <span class="token operator">=</span> SimpleFactory<span class="token punctuation">.</span>product_login<span class="token punctuation">(</span><span class="token string">'dingding'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>demo1<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">DingDing</span><span class="token punctuation">:</span>    <span class="token comment"># 钉钉登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 时间戳</span>        timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        appSecret <span class="token operator">=</span> <span class="token string">'YCoNtgYLMDKNS9096KKrnDDazZ7IgJHtGiOA7Y0YvTB8c4tn2vRBvaj_GTIvMkHQ'</span>        <span class="token comment"># 构造签名</span>        signature <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>            hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>appSecret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> digestmod<span class="token operator">=</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 请求接口，换取钉钉用户名</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'tmp_auth_code'</span><span class="token punctuation">:</span> code<span class="token punctuation">&#125;</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature='</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>            signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;timestamp="</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;accessKey=dingoa2kslvfvtiaeic7wi"</span><span class="token punctuation">,</span>                            data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        appid <span class="token operator">=</span> <span class="token string">'dingoa2kslvfvtiaeic7wi'</span>  <span class="token comment"># 应用中的appid</span>        redirect_uri <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/user/dindin_back/'</span>  <span class="token comment"># 钉钉返回信息的回调地址</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"dindin_url"</span><span class="token punctuation">:</span> <span class="token string">"https://oapi.dingtalk.com/connect/qrconnect?appid="</span> <span class="token operator">+</span> appid <span class="token operator">+</span> <span class="token string">'&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri='</span> <span class="token operator">+</span> redirect_uri<span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GitEe</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"https://gitee.com/oauth/token?grant_type=authorization_code&amp;code="</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"&amp;client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;client_secret=b8f5cf324427f286b49276d6db87900b54c8ed49d9d21a88c65ca4e76fa6151c"</span><span class="token punctuation">)</span>        access_token <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span>        <span class="token comment"># print(access_token)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/user?access_token="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"gitee_url"</span><span class="token punctuation">:</span> <span class="token string">"https://gitee.com/oauth/authorize?client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;response_type=code"</span><span class="token punctuation">&#125;</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">product_login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 判断是否携带code值 有则回调 没有则返回url</span>        <span class="token keyword">if</span> code<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dindin_back"</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> d<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>code<span class="token punctuation">)</span>            <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee_back"</span><span class="token punctuation">:</span>                g <span class="token operator">=</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> g<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dingding"</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> DingDing                <span class="token keyword">return</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># demo = Plant.product_login('gitee', '123123123')</span><span class="token comment"># print(demo.geturl())</span></code></pre><h2 id="2-djang-app-views-py"><a href="#2-djang-app-views-py" class="headerlink" title="2.djang/app/views.py"></a>2.djang/app/views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 工厂模式  三方登录</span><span class="token keyword">class</span> <span class="token class-name">PlantLoginAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># 获取三方登录 url地址</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        why <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> plant_login<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_login<span class="token punctuation">(</span>why<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>url<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 回调地址 获取用户详细信息</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>        <span class="token comment"># 可以用很多方法实现  查找 包含 都可</span>        <span class="token comment"># 获取当前url地址 切分后为  ['','user','***_back','']</span>        details <span class="token operator">=</span> plant_login<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_login<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"details"</span><span class="token punctuation">:</span> details<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="3-djang-app-urls-py"><a href="#3-djang-app-urls-py" class="headerlink" title="3.djang/app/urls.py"></a>3.djang/app/urls.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'url/'</span><span class="token punctuation">,</span> PlantLoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># gitee__钉钉 三方登录地址</span><span class="token punctuation">]</span></code></pre><h1 id="vue发送"><a href="#vue发送" class="headerlink" title="vue发送"></a>vue发送</h1><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;center&gt;&lt;h1&gt;用户登录&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;    &lt;a-form-item label&#x3D;&quot;用户名&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input ref&#x3D;&quot;userNameInput&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Basic usage&quot;&gt;        &lt;a-icon slot&#x3D;&quot;prefix&quot; type&#x3D;&quot;user&quot;&#x2F;&gt;        &lt;a-tooltip slot&#x3D;&quot;suffix&quot; title&#x3D;&quot;Extra information&quot;&gt;          &lt;a-icon type&#x3D;&quot;info-circle&quot; style&#x3D;&quot;color: rgba(0,0,0,.45)&quot;&#x2F;&gt;        &lt;&#x2F;a-tooltip&gt;      &lt;&#x2F;a-input&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;密码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input prefix&#x3D;&quot;*&quot; suffix&#x3D;&quot;&quot; v-model&#x3D;&quot;password&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;验证码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input v-model&#x3D;&quot;verification&quot; @blur&#x3D;&quot;isVerification&quot;&#x2F;&gt;      &lt;span v-if&#x3D;&quot;isverification&quot;&gt;验证码错误&lt;&#x2F;span&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;clickVerification&quot;&gt;点击发送验证码&lt;&#x2F;a-button&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item v-bind&#x3D;&quot;buttonlayout&quot;&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;a-button&gt;      &lt;img style&#x3D;&quot;margin-left:20px;cursor:pointer;&quot; @click&#x3D;&quot;dingding&quot; src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;static&#x2F;dingding.png&quot;&#x2F;&gt;      &lt;img style&#x3D;&quot;margin-left:20px;cursor:pointer;&quot; @click&#x3D;&quot;gitee&quot; src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;static&#x2F;gitee.png&quot;&#x2F;&gt;      &lt;h1&gt;Facebook社交登录&lt;&#x2F;h1&gt;      &lt;div class&#x3D;&quot;fb-login-button&quot; data-size&#x3D;&quot;large&quot; data-button-type&#x3D;&quot;continue_with&quot; data-layout&#x3D;&quot;default&quot;           data-auto-logout-link&#x3D;&quot;false&quot;           data-onlogin&#x3D;&quot;login&quot; data-use-continue-as&#x3D;&quot;false&quot; data-width&#x3D;&quot;&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;a-form-item&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;import &#123;postgitee, getisVerification, getVerification, postDinDin, postLogin&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;export default &#123;  data() &#123;    return &#123;      selected: &quot;&quot;,      startdate: &quot;&quot;,      uid: &quot;&quot;,      username: &quot;&quot;,      password: &quot;&quot;,      verification: &quot;&quot;,      isverification: false,      &#x2F;&#x2F;表单样式      formlayout: &#123;        &#x2F;&#x2F;标签        labelCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 8&#125;        &#125;,        &#x2F;&#x2F;文本框        wrapperCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 3&#125;        &#125;      &#125;,      &#x2F;&#x2F;按钮样式      buttonlayout: &#123;        &#x2F;&#x2F;按钮        wrapperCol: &#123;          xs: &#123;            span: 24,            offset: 0          &#125;,          sm: &#123;span: 16, offset: 8&#125;        &#125;      &#125;    &#125;  &#125;,  &#x2F;&#x2F;自定义方法  methods: &#123;    facebook() &#123;      &#x2F;&#x2F; crossorigin&#x3D;&quot;anonymous&quot; src&#x3D;&quot;https:&#x2F;&#x2F;connect.facebook.net&#x2F;zh_CN&#x2F;sdk.js#xfbml&#x3D;1&amp;version&#x3D;v8.0&amp;appId&#x3D;337974204227205&amp;autoLogAppEvents&#x3D;1&quot; nonce&#x3D;&quot;BBgy4tba&quot;      FB.login(function (response) &#123;        console.log(response);      &#125;);    &#125;,    gitee() &#123;      postgitee(&#123;why: &quot;gitee&quot;&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        window.open(res.gitee_url)      &#125;)    &#125;,    &#x2F;&#x2F;判断验证码    isVerification() &#123;      getisVerification(&#123;verification: this.verification, uid: this.uid&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        if (res.code &#x3D;&#x3D; 200) &#123;          this.isverification &#x3D; false        &#125; else &#123;          this.isverification &#x3D; true        &#125;      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;发送钉钉验证码    clickVerification() &#123;      getVerification().then(res &#x3D;&gt; &#123;        console.log(res)        this.uid &#x3D; res.uid      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;钉钉登录    dingding: function () &#123;      postDinDin(&#123;why: &quot;dingding&quot;&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        &#x2F;&#x2F;打开新窗口跳转到此地址        window.open(res.dindin_url)      &#125;)      &#x2F;&#x2F; window.location.href &#x3D; &quot;http:&#x2F;&#x2F;localhost:8000&#x2F;dingding_url&#x2F;&quot;;    &#125;,    submit: function () &#123;      &#x2F;&#x2F; let just &#x3D; true;      &#x2F;&#x2F; just &#x3D; this.isVerification() &amp; just;      if (this.isverification &#x3D;&#x3D;&#x3D; false) &#123;        let params &#x3D; &#123;          username: this.username,          password: this.password,        &#125;        &#x2F;&#x2F;登录        postLogin(params).then(res &#x3D;&gt; &#123;          console.log(res)          if (res.token) &#123;            localStorage.setItem(&quot;token&quot;, res.token)            localStorage.setItem(&quot;username&quot;, res.username)            localStorage.setItem(&quot;id&quot;, res.id)          &#125; else &#123;            alert(&quot;登录失败&quot;)          &#125;        &#125;).catch(err &#x3D;&gt; &#123;          console.log(err)        &#125;)      &#125;&#125;;&lt;&#x2F;script&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家都使用过三方登录 例如（QQ、微信、微博）那我就带着大家学习一下三方登录，并且我们好引入工厂模式来进行，开始吧&lt;/p&gt;
&lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Python3+Django2.0.4三方社交账号接入Gitee.com(码云)</title>
    <link href="https://wyx6.top/2020/12/20/gitee(%E7%A0%81%E4%BA%91)%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>https://wyx6.top/2020/12/20/gitee(%E7%A0%81%E4%BA%91)%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2020-12-20T14:59:23.000Z</published>
    <updated>2020-12-21T08:37:45.312Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://v3u.cn/a_id_154">教程</a></p><p><a href="https://gitee.com/api/v5/oauth_doc#/">码云官方文档</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>1.获取登录跳转地址   <strong>注意</strong>(回调地址必须和应用中 一致)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"gitee_url"</span><span class="token punctuation">:</span> <span class="token string">"https://gitee.com/oauth/authorize?client_id=你自己的ClientID&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;response_type=code"</span><span class="token punctuation">&#125;</span></code></pre><p>2.回调地址  必须和上边路由中填写一致  否则跳转不过去</p><p>登录完成后会携带code值 跳转到回调地址</p><pre class="language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"https://gitee.com/oauth/token?grant_type=authorization_code&amp;code="</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"&amp;client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;client_secret=b8f5cf324427f286b49276d6db87900b54c8ed49d9d21a88c65ca4e76fa6151c"</span><span class="token punctuation">)</span>        access_token <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span>        <span class="token comment"># print(access_token)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/user?access_token="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://v3u.cn/a_id_154&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/api/v5/oauth_doc#/&quot;&gt;码云官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="三方登录" scheme="https://wyx6.top/tags/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Python3+Django3.1三方社交账号接入微博</title>
    <link href="https://wyx6.top/2020/12/20/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>https://wyx6.top/2020/12/20/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2020-12-20T14:59:23.000Z</published>
    <updated>2020-12-23T10:22:52.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三方登录微博"><a href="#三方登录微博" class="headerlink" title="三方登录微博"></a><a href="https://blog.csdn.net/weixin_45954124/article/details/109514154">三方登录微博</a></h1><ol><li><h2 id="流程图-必会"><a href="#流程图-必会" class="headerlink" title="流程图 必会"></a>流程图 必会</h2><p><img src="https://img-blog.csdnimg.cn/20201105161254552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li><li><h2 id="生成微博授权URL接口"><a href="#生成微博授权URL接口" class="headerlink" title="生成微博授权URL接口"></a>生成微博授权URL接口</h2><ol><li><h3 id="创建apps-oauth模块进行oauth认证"><a href="#创建apps-oauth模块进行oauth认证" class="headerlink" title="创建apps/oauth模块进行oauth认证"></a>创建apps/oauth模块进行oauth认证</h3> <pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''2.1 在apps文件夹下新建应用： oauth'''</span>cd syl<span class="token operator">/</span>appspython <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py startapp oauth <span class="token comment"># 切换到apps文件夹下执行创建命令</span><span class="token triple-quoted-string string">'''2.2 添加子路由： oauth/urls.py'''</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.3 在syl/settings.py中添加应用'''</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'oauth.apps.OauthConfig'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.4 在syl/urls.py主路由中添加'''</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'oauth/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'oauth.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li><li><h3 id="添加子路由：-oauth-urls-py"><a href="#添加子路由：-oauth-urls-py" class="headerlink" title="添加子路由： oauth/urls.py"></a>添加子路由： oauth/urls.py</h3> <pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'weibo/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>WeiboUrl<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># /oauth/weibo/ 返回微博登录地址</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="1-3-视图函数-oauth-views-py"><a href="#1-3-视图函数-oauth-views-py" class="headerlink" title="1.3 视图函数: oauth/views.py"></a>1.3 视图函数: oauth/views.py</h3> <pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render  <span class="token comment"># Create your views here.</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny <span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode <span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> OauthUser <span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> jwt_payload_handler<span class="token punctuation">,</span> jwt_encode_handler <span class="token keyword">from</span> apps<span class="token punctuation">.</span>user<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_response_payload_handler <span class="token keyword">from</span> apps<span class="token punctuation">.</span>user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User  <span class="token comment"># 生成前端跳转到微博扫码页面的url</span> <span class="token keyword">class</span> <span class="token class-name">WeiboUrl</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">'''     生成微博的登陆页面路由地址     https://api.weibo.com/oauth2/authorize? # 微博oauth认证地址     client_id=4152203033&amp; # 注册开发者id     response_type=code&amp;     redirect_uri=http://127.0.0.1:8888/oauth/callback/ # 获取code后将code回     调给后端地址     '''</span>     <span class="token comment"># 自定义权限类</span>     permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>         url <span class="token operator">=</span> <span class="token string">'https://api.weibo.com/oauth2/authorize?'</span>  <span class="token comment"># 微博授权的url地址</span>         data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>             <span class="token string">'client_id'</span><span class="token punctuation">:</span> <span class="token string">'3757426334'</span><span class="token punctuation">,</span>  <span class="token comment"># WEIBO_APP_KEY,</span>             <span class="token string">'response_type'</span><span class="token punctuation">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span>             <span class="token string">'redirect_uri'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:8888/oauth/callback/'</span><span class="token punctuation">,</span>  <span class="token comment"># VUE的回调，微博后台授权的回调地址</span>         <span class="token punctuation">&#125;</span>         weibo_url <span class="token operator">=</span> url <span class="token operator">+</span> urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>         <span class="token comment"># https://api.weibo.com/oauth2/authorize? client_id = 4152203033 &amp; response_type = code &amp; redirect_uri = http://127.0.0.1:8000/api/ weibo_back /</span>         <span class="token comment"># return Response(&#123;'weibo_url': weibo_url&#125;)</span>         <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'url'</span><span class="token punctuation">:</span> weibo_url<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><h3 id="测试生成微博售前URL接口"><a href="#测试生成微博售前URL接口" class="headerlink" title="测试生成微博售前URL接口"></a>测试生成微博售前URL接口</h3><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;oauth&#x2F;weibo&#x2F;</code></pre></li></ol></li></ol><p>   <img src="https://img-blog.csdnimg.cn/20201105161310653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>   在浏览器访问返回地址即可回到新浪扫码界面</p><p>   <img src="https://img-blog.csdnimg.cn/20201105161336538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><ol start="3"><li><h2 id="微博回调接口"><a href="#微博回调接口" class="headerlink" title="微博回调接口"></a>微博回调接口</h2><ol><li><h3 id="oauth-urls-py-中添加路由"><a href="#oauth-urls-py-中添加路由" class="headerlink" title="oauth/urls.py 中添加路由"></a>oauth/urls.py 中添加路由</h3><pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'weibo/callback/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>OauthWeiboCallback<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#/oauth/weibo/callback/</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="oauth-views-py-中添加试图函数"><a href="#oauth-views-py-中添加试图函数" class="headerlink" title="oauth/views.py 中添加试图函数"></a>oauth/views.py 中添加试图函数</h3><pre class="language-python" data-language="python"><code class="language-python">      </code></pre><h1 id="通过vue前端传入的code，微博身份验证"><a href="#通过vue前端传入的code，微博身份验证" class="headerlink" title="通过vue前端传入的code，微博身份验证"></a>通过vue前端传入的code，微博身份验证</h1><p>  class OauthWeiboCallback(APIView):</p><pre><code>  # 自定义权限类  permission_classes = (AllowAny,)  def post(self, request):      # 接收vue端传过来的code（微博的用户code）      # 1.使用微博用户code+微博开发者账号信息换取微博的认证access_token      code = request.data.get(&#39;code&#39;)      data = &#123;          &#39;client_id&#39;: &#39;3757426334&#39;,          &#39;client_secret&#39;: &#39;c1a95726376bddd06de0143818b35cc6&#39;,          &#39;grant_type&#39;: &#39;authorization_code&#39;,          &#39;code&#39;: code,          &#39;redirect_uri&#39;: &#39;http://127.0.0.1:8888/oauth/callback/&#39;,      &#125;      url = &#39;https://api.weibo.com/oauth2/access_token&#39;      data = requests.post(url=url, data=data).json()  # 拿取请求的返回结果      # access_token = data.get(&#39;uid&#39;)  # 获取到的微博token      weibo_uid = data.get(&#39;uid&#39;)  # 获取到少码用户的id      # 2. 根据uid 查询绑定情况      try:          oauth_user = OauthUser.objects.get(uid=weibo_uid, oauth_type=&#39;1&#39;)      except Exception as e:          oauth_user = None      # 返回动作, 登录成功/需要绑定用户 type 0 登录成功, 1, 授权成功, 需要绑定      if oauth_user:          # 4. 如果绑定了, 返回token, 登录成功          user = oauth_user.user          payload = jwt_payload_handler(user)          token = jwt_encode_handler(payload)          # jwt_response_payload_handler为user模块定义的jwt返回的信息          data = jwt_response_payload_handler(token, user)          data[&#39;type&#39;] = &#39;0&#39;  # 指定为登录成功          return Response(&#123;&#39;code&#39;: 0, &#39;msg&#39;: &#39;登录成功&#39;, &#39;data&#39;: data&#125;)      else:          # 5. 如果没绑定, 返回标志, 让前端跳转到绑定页面          return Response(&#123;&#39;code&#39;: 0, &#39;msg&#39;: &#39;授权成功&#39;, &#39;data&#39;: &#123;&#39;type&#39;: &#39;1&#39;,                                                              &#39;uid&#39;: weibo_uid&#125;&#125;)</code></pre><pre class="language-none"><code class="language-none">   3. ### oauth&#x2F;models.py 中添加用户绑定模型​&#96;&#96;&#96;python     from django.db import models                 # Create your models here.     # 把三方的用户信息，和本地的用户信息进行绑定     class OauthUser(models.Model):         OAUTHTYPE &#x3D; (             (&#39;1&#39;, &#39;weibo&#39;),             (&#39;2&#39;, &#39;weixin&#39;),         )         uid &#x3D; models.CharField(&#39;三方用户id&#39;, max_length&#x3D;64)         # 三方用户id         user &#x3D; models.ForeignKey(&#39;user.User&#39;, on_delete&#x3D;models.CASCADE)         # 本地用户外键，关联User表         oauth_type &#x3D; models.CharField(&#39;认证类型&#39;, max_length&#x3D;10, choices&#x3D;OAUTHTYPE)         # 1,2 ...</code></pre><h5 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h5><p> python manager.py makemigrations<br> python manager.py migrate</p></li></ol></li><li><h2 id="微博绑定用户接口"><a href="#微博绑定用户接口" class="headerlink" title="微博绑定用户接口"></a>微博绑定用户接口</h2></li><li><h3 id="oauth-urls-py-中添加路由-1"><a href="#oauth-urls-py-中添加路由-1" class="headerlink" title="oauth/urls.py 中添加路由"></a>oauth/urls.py 中添加路由</h3><pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'weibo/binduser/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>OauthWeiboBindUser<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#/oauth/weibo/callback/</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="oauth-views-py-中添加试图函数-1"><a href="#oauth-views-py-中添加试图函数-1" class="headerlink" title="oauth/views.py 中添加试图函数"></a>oauth/views.py 中添加试图函数</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">OauthWeiboBindUser</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 绑定用户, 1. 已注册用户, 2. 未注册用户</span>        <span class="token comment"># 1.1 获取用户名, 密码, weibo_uid</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        weibo_uid <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'weibo_uid'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> weibo_uid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'参数不全'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment"># 0.判断是否存在此用户</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            user <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token comment"># 1. 已注册用户</span>        <span class="token keyword">if</span> user<span class="token punctuation">:</span>            <span class="token comment"># 1.2 , 如果存在就验证 密码, 验证通过,就绑定, 返回token,登录成功</span>            <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                ou <span class="token operator">=</span> OauthUser<span class="token punctuation">(</span>uid<span class="token operator">=</span>weibo_uid<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> oauth_type<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>                ou<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token comment"># 通过user对象获取到jwt的                payload信息</span>                token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 生成token</span>                data <span class="token operator">=</span> jwt_response_payload_handler<span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>                data<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token comment"># 指定为登录成功</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'密码错误'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 2. 未注册用户</span>            <span class="token comment"># 2.1 生成新用户, 设置用户名密码, 保存, 然后绑定, 返回token, 登录成功</span>            user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            ou <span class="token operator">=</span> OauthUser<span class="token punctuation">(</span>uid<span class="token operator">=</span>weibo_uid<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> oauth_type<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>            ou<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            data <span class="token operator">=</span> jwt_response_payload_handler<span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>            data<span class="token punctuation">[</span><span class="token string">'t y p e'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token comment"># 指定为登录成功</span>            returnResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三方登录微博&quot;&gt;&lt;a href=&quot;#三方登录微博&quot; class=&quot;headerlink&quot; title=&quot;三方登录微博&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_45954124/article/details/10951</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django3.1--vue" scheme="https://wyx6.top/categories/python3/django3-1-vue/"/>
    
    
    <category term="三方登录" scheme="https://wyx6.top/tags/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Python3+Django2.0.4三方社交账号接入钉钉</title>
    <link href="https://wyx6.top/2020/12/20/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>https://wyx6.top/2020/12/20/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2020-12-20T14:59:23.000Z</published>
    <updated>2020-12-21T08:37:20.313Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://v3u.cn/a_id_124">教程</a></p><p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/kymkv6">钉钉官方文档</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>1.获取登录跳转地址   <strong>注意</strong>(回调地址必须和应用中 一致)</p><pre class="language-python" data-language="python"><code class="language-python">appid <span class="token operator">=</span> <span class="token string">'dingoa2kslvfvtiaeic7wi'</span>  <span class="token comment"># 应用中的appid</span>        redirect_uri <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/user/dindin_back/'</span>  <span class="token comment"># 钉钉返回信息的回调地址</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"dindin_url"</span><span class="token punctuation">:</span> <span class="token string">"https://oapi.dingtalk.com/connect/qrconnect?appid="</span> <span class="token operator">+</span> appid <span class="token operator">+</span> <span class="token string">'&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri='</span> <span class="token operator">+</span> redirect_uri<span class="token punctuation">&#125;</span></code></pre><p>2.回调地址  必须和上边路由中填写一致  否则跳转不过去</p><p>登录完成后会携带code值 跳转到回调地址</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> jsoncode <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 时间戳</span>        timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        appSecret <span class="token operator">=</span> <span class="token string">'YCoNtgYLMDKNS9096KKrnDDazZ7IgJHtGiOA7Y0YvTB8c4tn2vRBvaj_GTIvMkHQ'</span>        <span class="token comment"># 构造签名</span>        signature <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>            hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>appSecret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> digestmod<span class="token operator">=</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 请求接口，换取钉钉用户名</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'tmp_auth_code'</span><span class="token punctuation">:</span> code<span class="token punctuation">&#125;</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature='</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>            signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;timestamp="</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;accessKey=dingoa2kslvfvtiaeic7wi"</span><span class="token punctuation">,</span>                            data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://v3u.cn/a_id_124&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ding-doc.dingtalk.com/doc#/serverapi2/kymkv6&quot;&gt;钉钉官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;代码实</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="三方登录" scheme="https://wyx6.top/tags/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>pypy3与python多线程比较</title>
    <link href="https://wyx6.top/2020/12/20/pypy3%E4%B8%8Epython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AF%94%E8%BE%83/"/>
    <id>https://wyx6.top/2020/12/20/pypy3%E4%B8%8Epython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AF%94%E8%BE%83/</id>
    <published>2020-12-20T14:59:15.000Z</published>
    <updated>2020-12-21T08:33:43.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pypy简介"><a href="#pypy简介" class="headerlink" title="pypy简介"></a>pypy简介</h1><ul><li><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>PyPy [1] 是Python开发者为了更好的Hack <a href="https://baike.baidu.com/item/Python">Python</a>创建的项目。此外，PyPy比CPython是更加灵活，易于使用和试验，以制定具体的功能在不同情况的实现方法，可以很容易实施。 该项目的目标是，让PyPy比C实现的Python更为容易的适应各个项目和方便裁剪。</p></li><li><h2 id="现状介绍"><a href="#现状介绍" class="headerlink" title="现状介绍"></a>现状介绍</h2><ul><li><p>PyPy是Armin Rigo开发的，<a href="https://baike.baidu.com/item/Python">Python</a>语言的动态编译器，是Psyco的后继项目。PyPy的目的是，做到Psyco没有做到的<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91">动态编译</a>。</p></li><li><p>PyPy开始只是研究性质的项目。但是开发非常成熟，在2007年中旬发布了1.0 Release版本后，大家关注的焦点是，能否在2008年出现可供生产环境使用的版本。</p></li><li><p>最新的(2018.12.15)PyPy版本是PyPy3 v6.0.0，兼容Python3.5.3。可以运行在Linux的32位和64位、MacOSX和Windows的32位平台中，但是基于arm平台的正在开发中。它支持Python语言的所有核心部分以及大多数的Python语言标准库函数模块，并且通过了Python语言的test suite。与CPython的区别可以去看它的兼容性页面.</p></li><li><p>PyPy还提供了<a href="https://baike.baidu.com/item/JIT">JIT</a>编译器和<a href="https://baike.baidu.com/item/%E6%B2%99%E7%9B%92">沙盒</a>功能，因此运行速度比CPython要快，以及可以安全的运行一些不被信任的代码。PyPy还有一个单独的支持微线程的版本。</p></li><li><p>另外，PyPy 也有 每夜构建 版本供开发者测试。</p></li><li><p>PyPy是作为Specific Targeted Research Projects（特定领域研究项目）从2004年12月到2007年3月，开始接受<a href="https://baike.baidu.com/item/%E6%AC%A7%E7%9B%9F">欧盟</a>的援助。</p></li></ul></li><li><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li><p>PyPy的第一部分：用<a href="https://baike.baidu.com/item/Python">Python</a>实现的Python</p></li><li><p>其实这么说并不准确，准确得说应该是用rPython实现的Python，rPython是Python的一个子集，虽然rPython不是完整的Python，但用rPython写的这个Python实现却是可以解释完整的Python语言。</p></li><li><p>PyPy的第二部分：<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a></p></li><li><p>这是一个编译rPython的编译器，或者说这个编译器有一个rPython的前端，目前也只有这么一个前端，不过它的后端却是不少，也就是说这个编译器支持许多的目标语言，比较重要的有：<a href="https://baike.baidu.com/item/C/7252092">C</a>，<a href="https://baike.baidu.com/item/CIL">CIL</a>，<a href="https://baike.baidu.com/item/Javascript/321142">Javascript</a> … [2] </p></li></ul><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul><li>大量的性能改进。</li><li>Bug修复，以及与CPython的兼容性修复。</li><li>现在stackless功能默认启用。</li><li>NumPy effort现在更名为numpypy，使用时可以简单写作：import numpypy as numpy。</li><li>JSON编码器已被替换为一个新的，是用纯Python编写的，某些情况下比CPython的C扩展快2倍，比PyPy 1.6中的快20倍左右。</li><li>一些RPython模块的内存占用已得到大幅改善。</li></ul><p>另外，有一些功能正在开发，将包含在1.8版本中，这些功能包括：</p><ul><li>特殊列表实现。可以大幅改善一些应用程序的性能/内存影响。</li><li>NumPy effort即将支持多维数组。</li><li>两个新的JIT编译器后端，尤其针对<a href="https://baike.baidu.com/item/PowerPC/7381773">PowerPC</a>和<a href="https://baike.baidu.com/item/ARM%E5%A4%84%E7%90%86%E5%99%A8/1835861">ARM处理器</a>。</li></ul></li></ul><p>​    </p><h1 id="一、python多线程"><a href="#一、python多线程" class="headerlink" title="一、python多线程"></a>一、python多线程</h1><pre class="language-none"><code class="language-none">from django.test import TestCase# Create your tests here.import threadingnum &#x3D; 0def change_it(n):    global num    for i in range(1000000):        num &#x3D; num + n        num &#x3D; num - n    print(num)threads &#x3D; [    threading.Thread(target&#x3D;change_it, args&#x3D;(8,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(10,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(5,))][t.start() for t in threads][t.join() for t in threads]print(num)</code></pre><p>我们运行三次</p><p>第一次</p><pre class="language-none"><code class="language-none">100-5-5</code></pre><p>第二次</p><pre class="language-none"><code class="language-none">0101010</code></pre><p>第三次</p><pre class="language-none"><code class="language-none">081818</code></pre><h1 id="二、pypy3多线程"><a href="#二、pypy3多线程" class="headerlink" title="二、pypy3多线程"></a>二、pypy3多线程</h1><pre class="language-none"><code class="language-none">from django.test import TestCase# Create your tests here.import threadingnum &#x3D; 0def change_it(n):    global num    for i in range(1000000):        num &#x3D; num + n        num &#x3D; num - n    print(num)threads &#x3D; [    threading.Thread(target&#x3D;change_it, args&#x3D;(8,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(10,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(5,))][t.start() for t in threads][t.join() for t in threads]print(num)</code></pre><p>我们运行三次</p><p>第一次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>第二次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>第三次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>我们发现pypy3在处理多线程的时候是比python处理能力更强</p><h1 id="三、我们再看接下来的比较"><a href="#三、我们再看接下来的比较" class="headerlink" title="三、我们再看接下来的比较"></a>三、我们再看接下来的比较</h1><pre class="language-none"><code class="language-none">import times1 &#x3D; time.time()ss &#x3D; [x ** 2 for x in range(10000000)]print(&quot;运行时间：&quot;, time.time() - s1)</code></pre><p>pypy3运行速度是不如python的</p><p>所以我们在合适的地方选择合适解释器</p><p>并没有一个解释器是完美的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pypy简介&quot;&gt;&lt;a href=&quot;#pypy简介&quot; class=&quot;headerlink&quot; title=&quot;pypy简介&quot;&gt;&lt;/a&gt;pypy简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="pypy3" scheme="https://wyx6.top/tags/pypy3/"/>
    
  </entry>
  
  <entry>
    <title>git分支管理</title>
    <link href="https://wyx6.top/2020/12/20/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <id>https://wyx6.top/2020/12/20/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</id>
    <published>2020-12-20T14:58:59.000Z</published>
    <updated>2020-12-21T13:42:27.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-分支相关常用命令"><a href="#git-分支相关常用命令" class="headerlink" title="git 分支相关常用命令"></a>git 分支相关常用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash">// 查看本地分支<span class="token function">git</span> branch// 查看远程分支<span class="token function">git</span> branch -r// 查看分支详细信息<span class="token function">git</span> branch -vv// 同步远程仓库<span class="token function">git</span> fetch// 创建分支dev<span class="token function">git</span> branch dev// 切换到分支dev<span class="token function">git</span> checkout dev// 删除分支dev<span class="token function">git</span> branch -d dev// 创建并切换到分支dev<span class="token function">git</span> checkout -b dev// 合并分支<span class="token function">git</span> merge dev</code></pre><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><h3 id="创建远程分支"><a href="#创建远程分支" class="headerlink" title="创建远程分支"></a>创建远程分支</h3><p><code>git push (远程仓库名) (分支名)</code> 或</p><pre class="language-none"><code class="language-none">git push (远程仓库名) (本地分支名:运程分支名)&#x2F;&#x2F; 创建远程分支dev  git push origin dev&#x2F;&#x2F; 或             git push origin dev:dev</code></pre><p>意思为取出本地的dev分支，推送到远程的仓库中的dev分支去。</p><h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3><blockquote><p>从远程分支 <code>checkout</code> 出来的本地分支，称为 <em>跟踪分支</em> (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 <code>git push</code>，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 <code>git pull</code> 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</p></blockquote><pre class="language-none"><code class="language-none">git checkout -b [分支名] [远程名]&#x2F;[分支名]git checkout --track origin&#x2F;dev&#x2F;&#x2F; 从远程分支dev创建本地分支featuregit checkout -b feature origin&#x2F;dev</code></pre><blockquote><p>在克隆仓库时，Git 通常会自动创建一个名为 <code>master</code> 的分支来跟踪 <code>origin/master</code>。这正是 <code>git push</code> 和 <code>git pull</code> 一开始就能正常工作的原因。</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">// 将本地分支feature的远程分支设为orgin/dev<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev</code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>语法：<code>git push [远程名] :[分支名]</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">// 删除远程分支dev<span class="token function">git</span> push origin :dev</code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>从仓库更新更新跟踪的远程分支</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span class="token function">git</span> pull origin</code></pre><p>从远程分支master合并到当前分支</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master</code></pre><p>相当于</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next</code></pre><p>参考：<a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">Git-分支-远程分支</a></p><h1 id="与Github同步"><a href="#与Github同步" class="headerlink" title="与Github同步"></a>与Github同步</h1><p>将本地的一个目录下的文件与Github上一个仓库相关联。</p><pre class="language-bash" data-language="bash"><code class="language-bash">// 初始化本地<span class="token function">git</span> init// 增加远程仓库地址<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:Zhao-Hui-Huang/GitLearn.git// 从远程仓库同步<span class="token function">git</span> fetch// 检出<span class="token function">git</span> checkout --track origin/master<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m<span class="token string">'add test file'</span><span class="token function">git</span> push</code></pre><h1 id="Git-比较命令"><a href="#Git-比较命令" class="headerlink" title="Git 比较命令"></a>Git 比较命令</h1><pre class="language-bash" data-language="bash"><code class="language-bash">// 比较工作区与暂存区的文件<span class="token function">git</span> <span class="token function">diff</span>// 比较暂存区与最后一次commit的文件<span class="token function">git</span> <span class="token function">diff</span> --cached// 比较工作区与最后一次commit的文件<span class="token function">git</span> <span class="token function">diff</span> HEAD</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git-分支相关常用命令&quot;&gt;&lt;a href=&quot;#git-分支相关常用命令&quot; class=&quot;headerlink&quot; title=&quot;git 分支相关常用命令&quot;&gt;&lt;/a&gt;git 分支相关常用命令&lt;/h1&gt;&lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; cla</summary>
      
    
    
    
    <category term="git" scheme="https://wyx6.top/categories/git/"/>
    
    
    <category term="git常用命令" scheme="https://wyx6.top/tags/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>django启动https协议</title>
    <link href="https://wyx6.top/2020/12/20/django%E5%90%AF%E5%8A%A8https%E5%8D%8F%E8%AE%AE/"/>
    <id>https://wyx6.top/2020/12/20/django%E5%90%AF%E5%8A%A8https%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-12-20T14:58:43.000Z</published>
    <updated>2020-12-21T08:35:05.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>django 默认的runserver使用的是http协议，如果需要https协议，需要以下库</p><blockquote><p><code>pip install django-sslserver</code></p><p>执行pip install命令安装：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> django-sslserver</code></pre><h2 id="配置django的settings-py文件"><a href="#配置django的settings-py文件" class="headerlink" title="配置django的settings.py文件"></a>配置django的settings.py文件</h2><p>在INSTALLED_APPS下添加</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">'sslserver'</span><span class="token punctuation">,</span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>使用命令在终端以https的方式运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">python manage.py runsslserver</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;django 默认的runserver使用的是http协议，如果需要https协议，需要以下库&lt;/p&gt;
&lt;blockquot</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django+vue实现钉钉群机器人验证码</title>
    <link href="https://wyx6.top/2020/12/16/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://wyx6.top/2020/12/16/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2020-12-16T13:49:15.000Z</published>
    <updated>2020-12-21T08:37:28.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-vue实现钉钉群机器人验证码"><a href="#django-vue实现钉钉群机器人验证码" class="headerlink" title="django+vue实现钉钉群机器人验证码"></a>django+vue实现钉钉群机器人验证码</h1><pre><code>又是忙碌的一天，今天给大家带来的教程是使用**钉钉群机器人发送随机验证码**，</code></pre><p>在vue中输入然后在后端进行判断并返回相应的返回值，首先我们去看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><p>然后开始操作<br>我们需要django+vue跨域  <a href="https://blog.csdn.net/weixin_45954124/article/details/109367680">点击查看</a></p><h2 id="一、创建钉钉群机器人"><a href="#一、创建钉钉群机器人" class="headerlink" title="一、创建钉钉群机器人"></a>一、创建钉钉群机器人</h2><p>首先明确一点，钉钉自定义机器人早就不支持在手机端创建了，所以打开你的pc端或者mac端的钉钉客户端，在需要机器人的聊天群界面，点击智能群助手</p><p><img src="https://img-blog.csdnimg.cn/20201216200147346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200145997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20201216200144171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200144155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200143887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>需要注意</strong>的是，在安全设置一栏里，我们选择加签的方式来验证，在此说明一下，钉钉机器人的安全策略有三种，第一种是使用关键字，就是说你推送的消息里必须包含你创建机器人时定义的关键字，如果不包含就推送不了消息，第二种就是使用加密签名，第三种是定义几个ip源，非这些源的请求会被拒绝，综合来看还是第二种又安全又灵活。<br><img src="https://img-blog.csdnimg.cn/20201216200141694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  创建成功后，系统会分配给你一个webhook地址，这个地址需要保存一下，地址中有唯一的accesstoken</p><p><img src="https://img-blog.csdnimg.cn/20201216200144351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>  ok，那么怎么利用这个地址让你的机器人推送消息呢？查看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><h2 id="二、测试发送信息"><a href="#二、测试发送信息" class="headerlink" title="二、测试发送信息"></a>二、测试发送信息</h2><p>发现文档居然还是python2.0的版本，好吧，我们自己来翻译成3.0</p><ul><li><h3 id="在项目下新建包utils-dindin-py"><a href="#在项目下新建包utils-dindin-py" class="headerlink" title="在项目下新建包utils/dindin.py"></a>在项目下新建包utils/dindin.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> requests<span class="token punctuation">,</span> json  <span class="token comment"># 导入依赖库</span><span class="token comment"># https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38</span>timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#这里的secret是我们cp备份的</span>secret <span class="token operator">=</span> <span class="token string">'SECc96a44d409036efafe8645c659a551e3ad3ad15bdfd8a408b6254927a2d0d1ca'</span>secret_enc <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>string_to_sign <span class="token operator">=</span> <span class="token string">'&#123;&#125;\n&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>string_to_sign_enc <span class="token operator">=</span> string_to_sign<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>hmac_code <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secret_enc<span class="token punctuation">,</span> string_to_sign_enc<span class="token punctuation">,</span> digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>hmac_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span>  <span class="token comment"># eu4Q16kFubncXuZprXxwRuvDx3Yh/roFWEPn0T5MRPo%3D</span><span class="token comment"># print(timestamp)</span><span class="token comment"># print(sign)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 定义数据类型</span><span class="token comment">#这里webhook是我们创建成功后 webhook地址</span>webhook <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38&amp;timestamp='</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;sign="</span> <span class="token operator">+</span> sign<span class="token comment"># 定义要发送的数据</span><span class="token comment"># "at": &#123;"atMobiles": "['"+ mobile + "']"</span><span class="token keyword">def</span> <span class="token function">dindin_post</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"content"</span><span class="token punctuation">:</span> text<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 发送post请求</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>dindin_post<span class="token punctuation">(</span><span class="token number">134235</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>测试发送成功</strong><br><img src="https://img-blog.csdnimg.cn/20201216200344887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li></ul><h2 id="三、创建user（app）"><a href="#三、创建user（app）" class="headerlink" title="三、创建user（app）"></a>三、创建user（app）</h2><ol><li><h3 id="user-models-py"><a href="#user-models-py" class="headerlink" title="user/models.py"></a>user/models.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username</code></pre></li><li><h3 id="我们这里重写了django自带的用户表，所以要在settings中重新定义"><a href="#我们这里重写了django自带的用户表，所以要在settings中重新定义" class="headerlink" title="我们这里重写了django自带的用户表，所以要在settings中重新定义"></a>我们这里重写了django自带的用户表，所以要在settings中重新定义</h3><pre class="language-python" data-language="python"><code class="language-python">AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">'user.User'</span></code></pre></li><li><h3 id="user-views-py"><a href="#user-views-py" class="headerlink" title="user/views.py"></a>user/views.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment">#</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> utils<span class="token punctuation">.</span>dindin <span class="token keyword">import</span> dindin_post<span class="token keyword">import</span> random<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token keyword">import</span> jwt<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token comment"># 注册</span><span class="token keyword">class</span> <span class="token class-name">RegisterAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 存储数据</span>            User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>make_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user.view--16"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 登录</span><span class="token keyword">class</span> <span class="token class-name">LoginAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 判断密码</span>        <span class="token keyword">if</span> user_obj<span class="token punctuation">:</span>            <span class="token keyword">if</span> check_password<span class="token punctuation">(</span>password<span class="token punctuation">,</span> user_obj<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># jwt加密</span>                encode_jwt <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"uid"</span><span class="token punctuation">:</span> user_obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>encode_jwt<span class="token punctuation">)</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">:</span> encode_jwt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 发送验证码</span><span class="token keyword">class</span> <span class="token class-name">VerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 生成随机验证码6位</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>        <span class="token comment"># 存储到session</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">=</span> code  <span class="token comment"># 存储的也是 key-value 键值对</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>set_expiry<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 session 存活期 单位是秒</span>        <span class="token comment"># 调用钉钉接口 发送验证码</span>        dindin_post<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 校验验证码</span><span class="token keyword">class</span> <span class="token class-name">IsVerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        verification <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"verification"</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> verification <span class="token operator">==</span> code<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><h3 id="配置子路由user-urls-py"><a href="#配置子路由user-urls-py" class="headerlink" title="配置子路由user/urls.py"></a>配置子路由user/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>staticfiles<span class="token punctuation">.</span>urls <span class="token keyword">import</span> staticfiles_urlpatterns<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span> DefaultRouter<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token punctuation">,</span> refresh_jwt_token<span class="token comment"># ... the rest of your URLconf goes here ...</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 定义超链接路由</span>    <span class="token comment"># re_path('^static/upload/(?P&lt;path>.*)$',serve,&#123;'document_root':'/static/upload/'&#125;),</span>    path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> RegisterAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 注册</span>    path<span class="token punctuation">(</span><span class="token string">'mylogin/'</span><span class="token punctuation">,</span> LoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 登录自定义token</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_url/'</span><span class="token punctuation">,</span> DingDingAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 钉钉三方登录路由</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_back/'</span><span class="token punctuation">,</span> DingBackApiView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 三方登录回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'verification/'</span><span class="token punctuation">,</span> VerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 发送验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'isverification/'</span><span class="token punctuation">,</span> IsVerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 判断验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 全局token，登录视图 使用djangorestframework-jwt==1.11.0</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="配置主路由django-urls-py"><a href="#配置主路由django-urls-py" class="headerlink" title="配置主路由django/urls.py"></a>配置主路由django/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> re_path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'user/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'user.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="三、前端vue构建登录注册页面"><a href="#三、前端vue构建登录注册页面" class="headerlink" title="三、前端vue构建登录注册页面"></a>三、前端vue构建登录注册页面</h2><p><img src="https://img-blog.csdnimg.cn/20201216201121216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216201924820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><ol><li><h3 id="src-http-apis-js"><a href="#src-http-apis-js" class="headerlink" title="src/http/apis.js"></a>src/http/apis.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/* eslint-disable */</span><span class="token comment">// 用户登录</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>get<span class="token punctuation">,</span> post<span class="token punctuation">,</span> put<span class="token punctuation">,</span> del<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRegister</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/register/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/verification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getisVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/isverification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/login/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postDinDin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/dindin_url/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre></li><li><h3 id="注册页面src-components-register-vue"><a href="#注册页面src-components-register-vue" class="headerlink" title="注册页面src/components/register.vue"></a>注册页面src/components/register.vue</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;center&gt;&lt;h1&gt;用户注册&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;    &lt;a-form-item label&#x3D;&quot;用户名&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input ref&#x3D;&quot;userNameInput&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Basic usage&quot;&gt;        &lt;a-icon slot&#x3D;&quot;prefix&quot; type&#x3D;&quot;user&quot;&#x2F;&gt;        &lt;a-tooltip slot&#x3D;&quot;suffix&quot; title&#x3D;&quot;Extra information&quot;&gt;          &lt;a-icon type&#x3D;&quot;info-circle&quot; style&#x3D;&quot;color: rgba(0,0,0,.45)&quot;&#x2F;&gt;        &lt;&#x2F;a-tooltip&gt;      &lt;&#x2F;a-input&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;密码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input prefix&#x3D;&quot;*&quot; suffix&#x3D;&quot;&quot; v-model&#x3D;&quot;password&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item v-bind&#x3D;&quot;buttonlayout&quot;&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submit&quot;&gt;注册&lt;&#x2F;a-button&gt;    &lt;&#x2F;a-form-item&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;import &#123;postRegister&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;export default &#123;  data() &#123;    return &#123;      username: &quot;&quot;,      password: &quot;&quot;,      &#x2F;&#x2F;表单样式      formlayout: &#123;        &#x2F;&#x2F;标签        labelCol: &#123;          xs: &#123;span: 10&#125;,          sm: &#123;span: 8&#125;        &#125;,        &#x2F;&#x2F;文本框        wrapperCol: &#123;          xs: &#123;span: 10&#125;,          sm: &#123;span: 3&#125;        &#125;      &#125;,      &#x2F;&#x2F;按钮样式      buttonlayout: &#123;        &#x2F;&#x2F;按钮        wrapperCol: &#123;          xs: &#123;            span: 24,            offset: 0          &#125;,          sm: &#123;span: 16, offset: 8&#125;        &#125;      &#125;    &#125;  &#125;,  &#x2F;&#x2F;自定义方法  methods: &#123;    submit: function () &#123;      let params &#x3D; &#123;        username: this.username,        password: this.password,      &#125;      postRegister(params).then(res &#x3D;&gt; &#123;        console.log(res)        if (res.code &#x3D;&#x3D; 200) &#123;          this.$router.push(&#39;&#x2F;login&#39;)        &#125; else &#123;          alert(&quot;失败&quot;)        &#125;      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;  &#125;&#125;;&lt;&#x2F;script&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre></li><li><h3 id="登录页面src-components-login-vue"><a href="#登录页面src-components-login-vue" class="headerlink" title="登录页面src/components/login.vue"></a>登录页面src/components/login.vue</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;center&gt;&lt;h1&gt;用户登录&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;    &lt;a-form-item label&#x3D;&quot;用户名&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input ref&#x3D;&quot;userNameInput&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Basic usage&quot;&gt;        &lt;a-icon slot&#x3D;&quot;prefix&quot; type&#x3D;&quot;user&quot;&#x2F;&gt;        &lt;a-tooltip slot&#x3D;&quot;suffix&quot; title&#x3D;&quot;Extra information&quot;&gt;          &lt;a-icon type&#x3D;&quot;info-circle&quot; style&#x3D;&quot;color: rgba(0,0,0,.45)&quot;&#x2F;&gt;        &lt;&#x2F;a-tooltip&gt;      &lt;&#x2F;a-input&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;密码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input prefix&#x3D;&quot;*&quot; suffix&#x3D;&quot;&quot; v-model&#x3D;&quot;password&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;验证码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input v-model&#x3D;&quot;verification&quot; @blur&#x3D;&quot;isVerification&quot;&#x2F;&gt;      &lt;span v-if&#x3D;&quot;isverification&quot;&gt;验证码错误&lt;&#x2F;span&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;clickVerification&quot;&gt;点击发送验证码&lt;&#x2F;a-button&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item v-bind&#x3D;&quot;buttonlayout&quot;&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;a-button&gt;      &lt;img style&#x3D;&quot;margin-left:20px;cursor:pointer;&quot; @click&#x3D;&quot;dingding&quot; src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;static&#x2F;dingding.png&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;import &#123;getisVerification, getVerification, postDinDin, postLogin&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;export default &#123;  data() &#123;    return &#123;      selected: &quot;&quot;,      startdate: &quot;&quot;,      dinDinUrl: &quot;&quot;,      username: &quot;&quot;,      password: &quot;&quot;,      verification: &quot;&quot;,      isverification: false,      &#x2F;&#x2F;表单样式      formlayout: &#123;        &#x2F;&#x2F;标签        labelCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 8&#125;        &#125;,        &#x2F;&#x2F;文本框        wrapperCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 3&#125;        &#125;      &#125;,      &#x2F;&#x2F;按钮样式      buttonlayout: &#123;        &#x2F;&#x2F;按钮        wrapperCol: &#123;          xs: &#123;            span: 24,            offset: 0          &#125;,          sm: &#123;span: 16, offset: 8&#125;        &#125;      &#125;    &#125;  &#125;,  &#x2F;&#x2F;自定义方法  methods: &#123;    &#x2F;&#x2F;判断验证码    isVerification() &#123;      getisVerification(&#123;verification: this.verification&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        if (res.code &#x3D;&#x3D; 200) &#123;          this.isverification &#x3D; false        &#125; else &#123;          this.isverification &#x3D; true        &#125;      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;发送钉钉验证码    clickVerification() &#123;      getVerification().then(res &#x3D;&gt; &#123;        console.log(res)      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;钉钉登录    dingding: function () &#123;      postDinDin().then(res &#x3D;&gt; &#123;        console.log(res)        this.dinDinUrl &#x3D; res.dindin_url        &#x2F;&#x2F;打开新窗口跳转到此地址        window.open(res.dindin_url)      &#125;)    &#125;,    submit: function () &#123;      &#x2F;&#x2F; let just &#x3D; true;      &#x2F;&#x2F; just &#x3D; this.isVerification() &amp; just;      if (this.isverification &#x3D;&#x3D;&#x3D; false) &#123;        let params &#x3D; &#123;          username: this.username,          password: this.password,        &#125;        &#x2F;&#x2F;登录        postLogin(params).then(res &#x3D;&gt; &#123;          console.log(res)          if (res.token) &#123;            localStorage.setItem(&quot;token&quot;, res.token)            localStorage.setItem(&quot;username&quot;, res.username)            localStorage.setItem(&quot;id&quot;, res.id)          &#125; else &#123;            alert(&quot;登录失败&quot;)          &#125;        &#125;).catch(err &#x3D;&gt; &#123;          console.log(err)        &#125;)      &#125;&#125;;&lt;&#x2F;script&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre></li><li><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> register <span class="token keyword">from</span> <span class="token string">'@/components/register'</span><span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">'@/components/login'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">var</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'register'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>register        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'login'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>login        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span>routes<span class="token punctuation">,</span>  mode<span class="token operator">:</span><span class="token string">'history'</span>   <span class="token comment">/*hash*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;django-vue实现钉钉群机器人验证码&quot;&gt;&lt;a href=&quot;#django-vue实现钉钉群机器人验证码&quot; class=&quot;headerlink&quot; title=&quot;django+vue实现钉钉群机器人验证码&quot;&gt;&lt;/a&gt;django+vue实现钉钉群机器人验证码&lt;/</summary>
      
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="python" scheme="https://wyx6.top/tags/python/"/>
    
  </entry>
  
</feed>
