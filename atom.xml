<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心瘾</title>
  
  
  <link href="https://wyx6.top/atom.xml" rel="self"/>
  
  <link href="https://wyx6.top/"/>
  <updated>2020-12-20T14:59:30.436Z</updated>
  <id>https://wyx6.top/</id>
  
  <author>
    <name>王彦翔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>钉钉-gitee三方登录(工厂模式)</title>
    <link href="https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/"/>
    <id>https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/</id>
    <published>2020-12-20T14:59:30.000Z</published>
    <updated>2020-12-20T14:59:30.436Z</updated>
    
    <content type="html"><![CDATA[<p>大家都使用过三方登录 例如（QQ、微信、微博）那我就带着大家学习一下三方登录，并且我们好引入工厂模式来进行，开始吧</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>首先我们简单介绍一下<strong>工厂模式</strong>。大家都知道有一造车知名企业，在疫情期间 ，竟然开始生产口罩</p><p>是什么原因呢！就是工厂模式所带来的好处 ，就是你给我什么  ，我就给你生产什么。</p><p>工厂收到钢铁，那就开始制造汽车 。收到针线 ，就开始制造口罩。</p><p><code>demo事例</code></p><pre class="language-none"><code class="language-none">class Dingding:    # 钉钉登录类    def __repr__(self):        return &quot;钉钉登录&quot;    def geturl(self):        return &#39;123&#39;class GitEe:    # 码云登录类    def __repr__(self):        return &quot;码云登录&quot;    def geturl(self):        return &#39;456&#39;# 工厂类class SimpleFactory:    @staticmethod   # 静态方法无需实例化 直接调用    def product_login(name):        if name &#x3D;&#x3D; &quot;dingding&quot;:            return Dingding()        elif name &#x3D;&#x3D; &quot;gitee&quot;:            return GitEe()demo1 &#x3D; SimpleFactory.product_login(&#39;dingding&#39;)print(demo1.geturl())</code></pre><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">DingDing</span><span class="token punctuation">:</span>    <span class="token comment"># 钉钉登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 时间戳</span>        timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        appSecret <span class="token operator">=</span> <span class="token string">'YCoNtgYLMDKNS9096KKrnDDazZ7IgJHtGiOA7Y0YvTB8c4tn2vRBvaj_GTIvMkHQ'</span>        <span class="token comment"># 构造签名</span>        signature <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>            hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>appSecret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> digestmod<span class="token operator">=</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 请求接口，换取钉钉用户名</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'tmp_auth_code'</span><span class="token punctuation">:</span> code<span class="token punctuation">&#125;</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature='</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>            signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;timestamp="</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;accessKey=dingoa2kslvfvtiaeic7wi"</span><span class="token punctuation">,</span>                            data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        appid <span class="token operator">=</span> <span class="token string">'dingoa2kslvfvtiaeic7wi'</span>  <span class="token comment"># 应用中的appid</span>        redirect_uri <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/user/dindin_back/'</span>  <span class="token comment"># 钉钉返回信息的回调地址</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"dindin_url"</span><span class="token punctuation">:</span> <span class="token string">"https://oapi.dingtalk.com/connect/qrconnect?appid="</span> <span class="token operator">+</span> appid <span class="token operator">+</span> <span class="token string">'&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri='</span> <span class="token operator">+</span> redirect_uri<span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GitEe</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"https://gitee.com/oauth/token?grant_type=authorization_code&amp;code="</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"&amp;client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;client_secret=b8f5cf324427f286b49276d6db87900b54c8ed49d9d21a88c65ca4e76fa6151c"</span><span class="token punctuation">)</span>        access_token <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span>        <span class="token comment"># print(access_token)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/user?access_token="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"gitee_url"</span><span class="token punctuation">:</span> <span class="token string">"https://gitee.com/oauth/authorize?client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;response_type=code"</span><span class="token punctuation">&#125;</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">product_login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 判断是否携带code值 有则回调 没有则返回url</span>        <span class="token keyword">if</span> code<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dindin_back"</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> d<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>code<span class="token punctuation">)</span>            <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee_back"</span><span class="token punctuation">:</span>                g <span class="token operator">=</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> g<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dingding"</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> DingDing                <span class="token keyword">return</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># demo = Plant.product_login('gitee', '123123123')</span><span class="token comment"># print(demo.geturl())</span></code></pre><h2 id="2-djang-app-views-py"><a href="#2-djang-app-views-py" class="headerlink" title="2.djang/app/views.py"></a>2.djang/app/views.py</h2><pre class="language-none"><code class="language-none"># 工厂模式  三方登录class PlantLoginAPIView(APIView):    permission_classes &#x3D; (AllowAny,)    # 获取三方登录 url地址    def post(self, request):        why &#x3D; request.data.get(&quot;why&quot;)        url &#x3D; plant_login.Plant.product_login(why, None)        return Response(url.geturl())    # 回调地址 获取用户详细信息    def get(self, request):        code &#x3D; request.GET.get(&quot;code&quot;)        # 可以用很多方法实现  查找 包含 都可        # 获取当前url地址 切分后为  [&#39;&#39;,&#39;user&#39;,&#39;***_back&#39;,&#39;&#39;]        details &#x3D; plant_login.Plant.product_login(request.path_info.split(&#39;&#x2F;&#39;)[2], code)        return Response(&#123;&quot;msg&quot;: &quot;ok&quot;, &quot;details&quot;: details&#125;)</code></pre><h2 id="3-djang-app-urls-py"><a href="#3-djang-app-urls-py" class="headerlink" title="3.djang/app/urls.py"></a>3.djang/app/urls.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'url/'</span><span class="token punctuation">,</span> PlantLoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># gitee__钉钉 三方登录地址</span><span class="token punctuation">]</span></code></pre><h1 id="vue发送"><a href="#vue发送" class="headerlink" title="vue发送"></a>vue发送</h1><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;center&gt;&lt;h1&gt;用户登录&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;    &lt;a-form-item label&#x3D;&quot;用户名&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input ref&#x3D;&quot;userNameInput&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Basic usage&quot;&gt;        &lt;a-icon slot&#x3D;&quot;prefix&quot; type&#x3D;&quot;user&quot;&#x2F;&gt;        &lt;a-tooltip slot&#x3D;&quot;suffix&quot; title&#x3D;&quot;Extra information&quot;&gt;          &lt;a-icon type&#x3D;&quot;info-circle&quot; style&#x3D;&quot;color: rgba(0,0,0,.45)&quot;&#x2F;&gt;        &lt;&#x2F;a-tooltip&gt;      &lt;&#x2F;a-input&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;密码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input prefix&#x3D;&quot;*&quot; suffix&#x3D;&quot;&quot; v-model&#x3D;&quot;password&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;验证码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input v-model&#x3D;&quot;verification&quot; @blur&#x3D;&quot;isVerification&quot;&#x2F;&gt;      &lt;span v-if&#x3D;&quot;isverification&quot;&gt;验证码错误&lt;&#x2F;span&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;clickVerification&quot;&gt;点击发送验证码&lt;&#x2F;a-button&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item v-bind&#x3D;&quot;buttonlayout&quot;&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;a-button&gt;      &lt;img style&#x3D;&quot;margin-left:20px;cursor:pointer;&quot; @click&#x3D;&quot;dingding&quot; src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;static&#x2F;dingding.png&quot;&#x2F;&gt;      &lt;img style&#x3D;&quot;margin-left:20px;cursor:pointer;&quot; @click&#x3D;&quot;gitee&quot; src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;static&#x2F;gitee.png&quot;&#x2F;&gt;      &lt;h1&gt;Facebook社交登录&lt;&#x2F;h1&gt;      &lt;div class&#x3D;&quot;fb-login-button&quot; data-size&#x3D;&quot;large&quot; data-button-type&#x3D;&quot;continue_with&quot; data-layout&#x3D;&quot;default&quot;           data-auto-logout-link&#x3D;&quot;false&quot;           data-onlogin&#x3D;&quot;login&quot; data-use-continue-as&#x3D;&quot;false&quot; data-width&#x3D;&quot;&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;a-form-item&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;import &#123;postgitee, getisVerification, getVerification, postDinDin, postLogin&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;export default &#123;  data() &#123;    return &#123;      selected: &quot;&quot;,      startdate: &quot;&quot;,      uid: &quot;&quot;,      username: &quot;&quot;,      password: &quot;&quot;,      verification: &quot;&quot;,      isverification: false,      &#x2F;&#x2F;表单样式      formlayout: &#123;        &#x2F;&#x2F;标签        labelCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 8&#125;        &#125;,        &#x2F;&#x2F;文本框        wrapperCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 3&#125;        &#125;      &#125;,      &#x2F;&#x2F;按钮样式      buttonlayout: &#123;        &#x2F;&#x2F;按钮        wrapperCol: &#123;          xs: &#123;            span: 24,            offset: 0          &#125;,          sm: &#123;span: 16, offset: 8&#125;        &#125;      &#125;    &#125;  &#125;,  &#x2F;&#x2F;自定义方法  methods: &#123;    facebook() &#123;      &#x2F;&#x2F; crossorigin&#x3D;&quot;anonymous&quot; src&#x3D;&quot;https:&#x2F;&#x2F;connect.facebook.net&#x2F;zh_CN&#x2F;sdk.js#xfbml&#x3D;1&amp;version&#x3D;v8.0&amp;appId&#x3D;337974204227205&amp;autoLogAppEvents&#x3D;1&quot; nonce&#x3D;&quot;BBgy4tba&quot;      FB.login(function (response) &#123;        console.log(response);      &#125;);    &#125;,    gitee() &#123;      postgitee(&#123;why: &quot;gitee&quot;&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        window.open(res.gitee_url)      &#125;)    &#125;,    &#x2F;&#x2F;判断验证码    isVerification() &#123;      getisVerification(&#123;verification: this.verification, uid: this.uid&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        if (res.code &#x3D;&#x3D; 200) &#123;          this.isverification &#x3D; false        &#125; else &#123;          this.isverification &#x3D; true        &#125;      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;发送钉钉验证码    clickVerification() &#123;      getVerification().then(res &#x3D;&gt; &#123;        console.log(res)        this.uid &#x3D; res.uid      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;钉钉登录    dingding: function () &#123;      postDinDin(&#123;why: &quot;dingding&quot;&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        &#x2F;&#x2F;打开新窗口跳转到此地址        window.open(res.dindin_url)      &#125;)      &#x2F;&#x2F; window.location.href &#x3D; &quot;http:&#x2F;&#x2F;localhost:8000&#x2F;dingding_url&#x2F;&quot;;    &#125;,    submit: function () &#123;      &#x2F;&#x2F; let just &#x3D; true;      &#x2F;&#x2F; just &#x3D; this.isVerification() &amp; just;      if (this.isverification &#x3D;&#x3D;&#x3D; false) &#123;        let params &#x3D; &#123;          username: this.username,          password: this.password,        &#125;        &#x2F;&#x2F;登录        postLogin(params).then(res &#x3D;&gt; &#123;          console.log(res)          if (res.token) &#123;            localStorage.setItem(&quot;token&quot;, res.token)            localStorage.setItem(&quot;username&quot;, res.username)            localStorage.setItem(&quot;id&quot;, res.id)          &#125; else &#123;            alert(&quot;登录失败&quot;)          &#125;        &#125;).catch(err &#x3D;&gt; &#123;          console.log(err)        &#125;)      &#125;&#125;;&lt;&#x2F;script&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家都使用过三方登录 例如（QQ、微信、微博）那我就带着大家学习一下三方登录，并且我们好引入工厂模式来进行，开始吧&lt;/p&gt;
&lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;</summary>
      
    
    
    
    <category term="django--vue" scheme="https://wyx6.top/categories/django-vue/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>钉钉三方登录</title>
    <link href="https://wyx6.top/2020/12/20/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>https://wyx6.top/2020/12/20/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</id>
    <published>2020-12-20T14:59:23.000Z</published>
    <updated>2020-12-20T14:59:23.542Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>pypy3与python多线程比较</title>
    <link href="https://wyx6.top/2020/12/20/pypy3%E4%B8%8Epython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AF%94%E8%BE%83/"/>
    <id>https://wyx6.top/2020/12/20/pypy3%E4%B8%8Epython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AF%94%E8%BE%83/</id>
    <published>2020-12-20T14:59:15.000Z</published>
    <updated>2020-12-20T14:59:15.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pypy简介"><a href="#pypy简介" class="headerlink" title="pypy简介"></a>pypy简介</h1><ul><li><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>PyPy [1] 是Python开发者为了更好的Hack <a href="https://baike.baidu.com/item/Python">Python</a>创建的项目。此外，PyPy比CPython是更加灵活，易于使用和试验，以制定具体的功能在不同情况的实现方法，可以很容易实施。 该项目的目标是，让PyPy比C实现的Python更为容易的适应各个项目和方便裁剪。</p></li><li><h2 id="现状介绍"><a href="#现状介绍" class="headerlink" title="现状介绍"></a>现状介绍</h2><ul><li><p>PyPy是Armin Rigo开发的，<a href="https://baike.baidu.com/item/Python">Python</a>语言的动态编译器，是Psyco的后继项目。PyPy的目的是，做到Psyco没有做到的<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91">动态编译</a>。</p></li><li><p>PyPy开始只是研究性质的项目。但是开发非常成熟，在2007年中旬发布了1.0 Release版本后，大家关注的焦点是，能否在2008年出现可供生产环境使用的版本。</p></li><li><p>最新的(2018.12.15)PyPy版本是PyPy3 v6.0.0，兼容Python3.5.3。可以运行在Linux的32位和64位、MacOSX和Windows的32位平台中，但是基于arm平台的正在开发中。它支持Python语言的所有核心部分以及大多数的Python语言标准库函数模块，并且通过了Python语言的test suite。与CPython的区别可以去看它的兼容性页面.</p></li><li><p>PyPy还提供了<a href="https://baike.baidu.com/item/JIT">JIT</a>编译器和<a href="https://baike.baidu.com/item/%E6%B2%99%E7%9B%92">沙盒</a>功能，因此运行速度比CPython要快，以及可以安全的运行一些不被信任的代码。PyPy还有一个单独的支持微线程的版本。</p></li><li><p>另外，PyPy 也有 每夜构建 版本供开发者测试。</p></li><li><p>PyPy是作为Specific Targeted Research Projects（特定领域研究项目）从2004年12月到2007年3月，开始接受<a href="https://baike.baidu.com/item/%E6%AC%A7%E7%9B%9F">欧盟</a>的援助。</p></li></ul></li><li><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li><p>PyPy的第一部分：用<a href="https://baike.baidu.com/item/Python">Python</a>实现的Python</p></li><li><p>其实这么说并不准确，准确得说应该是用rPython实现的Python，rPython是Python的一个子集，虽然rPython不是完整的Python，但用rPython写的这个Python实现却是可以解释完整的Python语言。</p></li><li><p>PyPy的第二部分：<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a></p></li><li><p>这是一个编译rPython的编译器，或者说这个编译器有一个rPython的前端，目前也只有这么一个前端，不过它的后端却是不少，也就是说这个编译器支持许多的目标语言，比较重要的有：<a href="https://baike.baidu.com/item/C/7252092">C</a>，<a href="https://baike.baidu.com/item/CIL">CIL</a>，<a href="https://baike.baidu.com/item/Javascript/321142">Javascript</a> … [2] </p></li></ul><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul><li>大量的性能改进。</li><li>Bug修复，以及与CPython的兼容性修复。</li><li>现在stackless功能默认启用。</li><li>NumPy effort现在更名为numpypy，使用时可以简单写作：import numpypy as numpy。</li><li>JSON编码器已被替换为一个新的，是用纯Python编写的，某些情况下比CPython的C扩展快2倍，比PyPy 1.6中的快20倍左右。</li><li>一些RPython模块的内存占用已得到大幅改善。</li></ul><p>另外，有一些功能正在开发，将包含在1.8版本中，这些功能包括：</p><ul><li>特殊列表实现。可以大幅改善一些应用程序的性能/内存影响。</li><li>NumPy effort即将支持多维数组。</li><li>两个新的JIT编译器后端，尤其针对<a href="https://baike.baidu.com/item/PowerPC/7381773">PowerPC</a>和<a href="https://baike.baidu.com/item/ARM%E5%A4%84%E7%90%86%E5%99%A8/1835861">ARM处理器</a>。</li></ul></li></ul><p>​    </p><h1 id="一、python多线程"><a href="#一、python多线程" class="headerlink" title="一、python多线程"></a>一、python多线程</h1><pre class="language-none"><code class="language-none">from django.test import TestCase# Create your tests here.import threadingnum &#x3D; 0def change_it(n):    global num    for i in range(1000000):        num &#x3D; num + n        num &#x3D; num - n    print(num)threads &#x3D; [    threading.Thread(target&#x3D;change_it, args&#x3D;(8,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(10,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(5,))][t.start() for t in threads][t.join() for t in threads]print(num)</code></pre><p>我们运行三次</p><p>第一次</p><pre class="language-none"><code class="language-none">100-5-5</code></pre><p>第二次</p><pre class="language-none"><code class="language-none">0101010</code></pre><p>第三次</p><pre class="language-none"><code class="language-none">081818</code></pre><h1 id="二、pypy3多线程"><a href="#二、pypy3多线程" class="headerlink" title="二、pypy3多线程"></a>二、pypy3多线程</h1><pre class="language-none"><code class="language-none">from django.test import TestCase# Create your tests here.import threadingnum &#x3D; 0def change_it(n):    global num    for i in range(1000000):        num &#x3D; num + n        num &#x3D; num - n    print(num)threads &#x3D; [    threading.Thread(target&#x3D;change_it, args&#x3D;(8,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(10,)),    threading.Thread(target&#x3D;change_it, args&#x3D;(5,))][t.start() for t in threads][t.join() for t in threads]print(num)</code></pre><p>我们运行三次</p><p>第一次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>第二次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>第三次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>我们发现pypy3在处理多线程的时候是比python处理能力更强</p><h1 id="三、我们再看接下来的比较"><a href="#三、我们再看接下来的比较" class="headerlink" title="三、我们再看接下来的比较"></a>三、我们再看接下来的比较</h1><pre class="language-none"><code class="language-none">import times1 &#x3D; time.time()ss &#x3D; [x ** 2 for x in range(10000000)]print(&quot;运行时间：&quot;, time.time() - s1)</code></pre><p>pypy3运行速度是不如python的</p><p>所以我们在合适的地方选择合适解释器</p><p>并没有一个解释器是完美的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pypy简介&quot;&gt;&lt;a href=&quot;#pypy简介&quot; class=&quot;headerlink&quot; title=&quot;pypy简介&quot;&gt;&lt;/a&gt;pypy简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="pypy3" scheme="https://wyx6.top/tags/pypy3/"/>
    
  </entry>
  
  <entry>
    <title>git分支管理</title>
    <link href="https://wyx6.top/2020/12/20/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
    <id>https://wyx6.top/2020/12/20/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</id>
    <published>2020-12-20T14:58:59.000Z</published>
    <updated>2020-12-20T14:58:59.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-分支相关常用命令"><a href="#git-分支相关常用命令" class="headerlink" title="git 分支相关常用命令"></a>git 分支相关常用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash">// 查看本地分支<span class="token function">git</span> branch// 查看远程分支<span class="token function">git</span> branch -r// 查看分支详细信息<span class="token function">git</span> branch -vv// 同步远程仓库<span class="token function">git</span> fetch// 创建分支dev<span class="token function">git</span> branch dev// 切换到分支dev<span class="token function">git</span> checkout dev// 删除分支dev<span class="token function">git</span> branch -d dev// 创建并切换到分支dev<span class="token function">git</span> checkout -b dev// 合并分支<span class="token function">git</span> merge dev<span class="token number">123456789101112131415161718</span></code></pre><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><h3 id="创建远程分支"><a href="#创建远程分支" class="headerlink" title="创建远程分支"></a>创建远程分支</h3><p><code>git push (远程仓库名) (分支名)</code> 或</p><pre class="language-none"><code class="language-none">git push (远程仓库名) (本地分支名:运程分支名)&#x2F;&#x2F; 创建远程分支dev  git push origin dev&#x2F;&#x2F; 或             git push origin dev:dev1234</code></pre><p>意思为取出本地的dev分支，推送到远程的仓库中的dev分支去。</p><h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3><blockquote><p>从远程分支 <code>checkout</code> 出来的本地分支，称为 <em>跟踪分支</em> (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 <code>git push</code>，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 <code>git pull</code> 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</p></blockquote><pre class="language-none"><code class="language-none">git checkout -b [分支名] [远程名]&#x2F;[分支名]git checkout --track origin&#x2F;dev&#x2F;&#x2F; 从远程分支dev创建本地分支featuregit checkout -b feature origin&#x2F;dev12</code></pre><blockquote><p>在克隆仓库时，Git 通常会自动创建一个名为 <code>master</code> 的分支来跟踪 <code>origin/master</code>。这正是 <code>git push</code> 和 <code>git pull</code> 一开始就能正常工作的原因。</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">// 将本地分支feature的远程分支设为orgin/dev<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev<span class="token number">12</span></code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>语法：<code>git push [远程名] :[分支名]</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">// 删除远程分支dev<span class="token function">git</span> push origin :dev<span class="token number">12</span></code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>从仓库更新更新跟踪的远程分支</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span class="token function">git</span> pull origin<span class="token number">12</span></code></pre><p>从远程分支master合并到当前分支</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span class="token number">1</span></code></pre><p>相当于</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next<span class="token number">12</span></code></pre><p>参考：<a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">Git-分支-远程分支</a></p><h1 id="与Github同步"><a href="#与Github同步" class="headerlink" title="与Github同步"></a>与Github同步</h1><p>将本地的一个目录下的文件与Github上一个仓库相关联。</p><pre class="language-bash" data-language="bash"><code class="language-bash">// 初始化本地<span class="token function">git</span> init// 增加远程仓库地址<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:Zhao-Hui-Huang/GitLearn.git// 从远程仓库同步<span class="token function">git</span> fetch// 检出<span class="token function">git</span> checkout --track origin/master<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m<span class="token string">'add test file'</span><span class="token function">git</span> push<span class="token number">123456789101112</span></code></pre><h1 id="Git-比较命令"><a href="#Git-比较命令" class="headerlink" title="Git 比较命令"></a>Git 比较命令</h1><pre class="language-bash" data-language="bash"><code class="language-bash">// 比较工作区与暂存区的文件<span class="token function">git</span> <span class="token function">diff</span>// 比较暂存区与最后一次commit的文件<span class="token function">git</span> <span class="token function">diff</span> --cached// 比较工作区与最后一次commit的文件<span class="token function">git</span> <span class="token function">diff</span> HEAD</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git-分支相关常用命令&quot;&gt;&lt;a href=&quot;#git-分支相关常用命令&quot; class=&quot;headerlink&quot; title=&quot;git 分支相关常用命令&quot;&gt;&lt;/a&gt;git 分支相关常用命令&lt;/h1&gt;&lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; cla</summary>
      
    
    
    
    <category term="git" scheme="https://wyx6.top/categories/git/"/>
    
    
    <category term="git常用命令" scheme="https://wyx6.top/tags/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>django启动https协议</title>
    <link href="https://wyx6.top/2020/12/20/django%E5%90%AF%E5%8A%A8https%E5%8D%8F%E8%AE%AE/"/>
    <id>https://wyx6.top/2020/12/20/django%E5%90%AF%E5%8A%A8https%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-12-20T14:58:43.000Z</published>
    <updated>2020-12-20T14:58:43.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>django 默认的runserver使用的是http协议，如果需要https协议，需要以下库</p><blockquote><p><code>pip install django-sslserver</code></p><p>执行pip install命令安装：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> django-sslserver</code></pre><h2 id="配置django的settings-py文件"><a href="#配置django的settings-py文件" class="headerlink" title="配置django的settings.py文件"></a>配置django的settings.py文件</h2><p>在INSTALLED_APPS下添加</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">'sslserver'</span><span class="token punctuation">,</span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>使用命令在终端以https的方式运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">python manage.py runsslserver</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;django 默认的runserver使用的是http协议，如果需要https协议，需要以下库&lt;/p&gt;
&lt;blockquot</summary>
      
    
    
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django+vue实现钉钉群机器人验证码</title>
    <link href="https://wyx6.top/2020/12/16/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://wyx6.top/2020/12/16/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2020-12-16T13:49:15.000Z</published>
    <updated>2020-12-16T13:49:15.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-vue实现钉钉群机器人验证码"><a href="#django-vue实现钉钉群机器人验证码" class="headerlink" title="django+vue实现钉钉群机器人验证码"></a>django+vue实现钉钉群机器人验证码</h1><pre><code>又是忙碌的一天，今天给大家带来的教程是使用**钉钉群机器人发送随机验证码**，</code></pre><p>在vue中输入然后在后端进行判断并返回相应的返回值，首先我们去看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><p>然后开始操作<br>我们需要django+vue跨域  <a href="https://blog.csdn.net/weixin_45954124/article/details/109367680">点击查看</a></p><h2 id="一、创建钉钉群机器人"><a href="#一、创建钉钉群机器人" class="headerlink" title="一、创建钉钉群机器人"></a>一、创建钉钉群机器人</h2><p>首先明确一点，钉钉自定义机器人早就不支持在手机端创建了，所以打开你的pc端或者mac端的钉钉客户端，在需要机器人的聊天群界面，点击智能群助手</p><p><img src="https://img-blog.csdnimg.cn/20201216200147346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200145997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20201216200144171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200144155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200143887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>需要注意</strong>的是，在安全设置一栏里，我们选择加签的方式来验证，在此说明一下，钉钉机器人的安全策略有三种，第一种是使用关键字，就是说你推送的消息里必须包含你创建机器人时定义的关键字，如果不包含就推送不了消息，第二种就是使用加密签名，第三种是定义几个ip源，非这些源的请求会被拒绝，综合来看还是第二种又安全又灵活。<br><img src="https://img-blog.csdnimg.cn/20201216200141694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  创建成功后，系统会分配给你一个webhook地址，这个地址需要保存一下，地址中有唯一的accesstoken</p><p><img src="https://img-blog.csdnimg.cn/20201216200144351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>  ok，那么怎么利用这个地址让你的机器人推送消息呢？查看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><h2 id="二、测试发送信息"><a href="#二、测试发送信息" class="headerlink" title="二、测试发送信息"></a>二、测试发送信息</h2><p>发现文档居然还是python2.0的版本，好吧，我们自己来翻译成3.0</p><ul><li><h3 id="在项目下新建包utils-dindin-py"><a href="#在项目下新建包utils-dindin-py" class="headerlink" title="在项目下新建包utils/dindin.py"></a>在项目下新建包utils/dindin.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> requests<span class="token punctuation">,</span> json  <span class="token comment"># 导入依赖库</span><span class="token comment"># https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38</span>timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#这里的secret是我们cp备份的</span>secret <span class="token operator">=</span> <span class="token string">'SECc96a44d409036efafe8645c659a551e3ad3ad15bdfd8a408b6254927a2d0d1ca'</span>secret_enc <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>string_to_sign <span class="token operator">=</span> <span class="token string">'&#123;&#125;\n&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>string_to_sign_enc <span class="token operator">=</span> string_to_sign<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>hmac_code <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secret_enc<span class="token punctuation">,</span> string_to_sign_enc<span class="token punctuation">,</span> digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>hmac_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span>  <span class="token comment"># eu4Q16kFubncXuZprXxwRuvDx3Yh/roFWEPn0T5MRPo%3D</span><span class="token comment"># print(timestamp)</span><span class="token comment"># print(sign)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 定义数据类型</span><span class="token comment">#这里webhook是我们创建成功后 webhook地址</span>webhook <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38&amp;timestamp='</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;sign="</span> <span class="token operator">+</span> sign<span class="token comment"># 定义要发送的数据</span><span class="token comment"># "at": &#123;"atMobiles": "['"+ mobile + "']"</span><span class="token keyword">def</span> <span class="token function">dindin_post</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"content"</span><span class="token punctuation">:</span> text<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 发送post请求</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>dindin_post<span class="token punctuation">(</span><span class="token number">134235</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>测试发送成功</strong><br><img src="https://img-blog.csdnimg.cn/20201216200344887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li></ul><h2 id="三、创建user（app）"><a href="#三、创建user（app）" class="headerlink" title="三、创建user（app）"></a>三、创建user（app）</h2><ol><li><h3 id="user-models-py"><a href="#user-models-py" class="headerlink" title="user/models.py"></a>user/models.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username</code></pre></li><li><h3 id="我们这里重写了django自带的用户表，所以要在settings中重新定义"><a href="#我们这里重写了django自带的用户表，所以要在settings中重新定义" class="headerlink" title="我们这里重写了django自带的用户表，所以要在settings中重新定义"></a>我们这里重写了django自带的用户表，所以要在settings中重新定义</h3><pre class="language-python" data-language="python"><code class="language-python">AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">'user.User'</span></code></pre></li><li><h3 id="user-views-py"><a href="#user-views-py" class="headerlink" title="user/views.py"></a>user/views.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment">#</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> utils<span class="token punctuation">.</span>dindin <span class="token keyword">import</span> dindin_post<span class="token keyword">import</span> random<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token keyword">import</span> jwt<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token comment"># 注册</span><span class="token keyword">class</span> <span class="token class-name">RegisterAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 存储数据</span>            User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>make_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user.view--16"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 登录</span><span class="token keyword">class</span> <span class="token class-name">LoginAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 判断密码</span>        <span class="token keyword">if</span> user_obj<span class="token punctuation">:</span>            <span class="token keyword">if</span> check_password<span class="token punctuation">(</span>password<span class="token punctuation">,</span> user_obj<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># jwt加密</span>                encode_jwt <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"uid"</span><span class="token punctuation">:</span> user_obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>encode_jwt<span class="token punctuation">)</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">:</span> encode_jwt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 发送验证码</span><span class="token keyword">class</span> <span class="token class-name">VerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 生成随机验证码6位</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>        <span class="token comment"># 存储到session</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">=</span> code  <span class="token comment"># 存储的也是 key-value 键值对</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>set_expiry<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 session 存活期 单位是秒</span>        <span class="token comment"># 调用钉钉接口 发送验证码</span>        dindin_post<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 校验验证码</span><span class="token keyword">class</span> <span class="token class-name">IsVerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        verification <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"verification"</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> verification <span class="token operator">==</span> code<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><h3 id="配置子路由user-urls-py"><a href="#配置子路由user-urls-py" class="headerlink" title="配置子路由user/urls.py"></a>配置子路由user/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>staticfiles<span class="token punctuation">.</span>urls <span class="token keyword">import</span> staticfiles_urlpatterns<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span> DefaultRouter<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token punctuation">,</span> refresh_jwt_token<span class="token comment"># ... the rest of your URLconf goes here ...</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 定义超链接路由</span>    <span class="token comment"># re_path('^static/upload/(?P&lt;path>.*)$',serve,&#123;'document_root':'/static/upload/'&#125;),</span>    path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> RegisterAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 注册</span>    path<span class="token punctuation">(</span><span class="token string">'mylogin/'</span><span class="token punctuation">,</span> LoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 登录自定义token</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_url/'</span><span class="token punctuation">,</span> DingDingAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 钉钉三方登录路由</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_back/'</span><span class="token punctuation">,</span> DingBackApiView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 三方登录回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'verification/'</span><span class="token punctuation">,</span> VerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 发送验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'isverification/'</span><span class="token punctuation">,</span> IsVerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 判断验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 全局token，登录视图 使用djangorestframework-jwt==1.11.0</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="配置主路由django-urls-py"><a href="#配置主路由django-urls-py" class="headerlink" title="配置主路由django/urls.py"></a>配置主路由django/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> re_path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'user/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'user.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="三、前端vue构建登录注册页面"><a href="#三、前端vue构建登录注册页面" class="headerlink" title="三、前端vue构建登录注册页面"></a>三、前端vue构建登录注册页面</h2><p><img src="https://img-blog.csdnimg.cn/20201216201121216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216201924820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><ol><li><h3 id="src-http-apis-js"><a href="#src-http-apis-js" class="headerlink" title="src/http/apis.js"></a>src/http/apis.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/* eslint-disable */</span><span class="token comment">// 用户登录</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>get<span class="token punctuation">,</span> post<span class="token punctuation">,</span> put<span class="token punctuation">,</span> del<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRegister</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/register/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/verification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getisVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/isverification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/login/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postDinDin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/dindin_url/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre></li><li><h3 id="注册页面src-components-register-vue"><a href="#注册页面src-components-register-vue" class="headerlink" title="注册页面src/components/register.vue"></a>注册页面src/components/register.vue</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;center&gt;&lt;h1&gt;用户注册&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;    &lt;a-form-item label&#x3D;&quot;用户名&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input ref&#x3D;&quot;userNameInput&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Basic usage&quot;&gt;        &lt;a-icon slot&#x3D;&quot;prefix&quot; type&#x3D;&quot;user&quot;&#x2F;&gt;        &lt;a-tooltip slot&#x3D;&quot;suffix&quot; title&#x3D;&quot;Extra information&quot;&gt;          &lt;a-icon type&#x3D;&quot;info-circle&quot; style&#x3D;&quot;color: rgba(0,0,0,.45)&quot;&#x2F;&gt;        &lt;&#x2F;a-tooltip&gt;      &lt;&#x2F;a-input&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;密码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input prefix&#x3D;&quot;*&quot; suffix&#x3D;&quot;&quot; v-model&#x3D;&quot;password&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item v-bind&#x3D;&quot;buttonlayout&quot;&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submit&quot;&gt;注册&lt;&#x2F;a-button&gt;    &lt;&#x2F;a-form-item&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;import &#123;postRegister&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;export default &#123;  data() &#123;    return &#123;      username: &quot;&quot;,      password: &quot;&quot;,      &#x2F;&#x2F;表单样式      formlayout: &#123;        &#x2F;&#x2F;标签        labelCol: &#123;          xs: &#123;span: 10&#125;,          sm: &#123;span: 8&#125;        &#125;,        &#x2F;&#x2F;文本框        wrapperCol: &#123;          xs: &#123;span: 10&#125;,          sm: &#123;span: 3&#125;        &#125;      &#125;,      &#x2F;&#x2F;按钮样式      buttonlayout: &#123;        &#x2F;&#x2F;按钮        wrapperCol: &#123;          xs: &#123;            span: 24,            offset: 0          &#125;,          sm: &#123;span: 16, offset: 8&#125;        &#125;      &#125;    &#125;  &#125;,  &#x2F;&#x2F;自定义方法  methods: &#123;    submit: function () &#123;      let params &#x3D; &#123;        username: this.username,        password: this.password,      &#125;      postRegister(params).then(res &#x3D;&gt; &#123;        console.log(res)        if (res.code &#x3D;&#x3D; 200) &#123;          this.$router.push(&#39;&#x2F;login&#39;)        &#125; else &#123;          alert(&quot;失败&quot;)        &#125;      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;  &#125;&#125;;&lt;&#x2F;script&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre></li><li><h3 id="登录页面src-components-login-vue"><a href="#登录页面src-components-login-vue" class="headerlink" title="登录页面src/components/login.vue"></a>登录页面src/components/login.vue</h3><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;center&gt;&lt;h1&gt;用户登录&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;    &lt;a-form-item label&#x3D;&quot;用户名&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input ref&#x3D;&quot;userNameInput&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Basic usage&quot;&gt;        &lt;a-icon slot&#x3D;&quot;prefix&quot; type&#x3D;&quot;user&quot;&#x2F;&gt;        &lt;a-tooltip slot&#x3D;&quot;suffix&quot; title&#x3D;&quot;Extra information&quot;&gt;          &lt;a-icon type&#x3D;&quot;info-circle&quot; style&#x3D;&quot;color: rgba(0,0,0,.45)&quot;&#x2F;&gt;        &lt;&#x2F;a-tooltip&gt;      &lt;&#x2F;a-input&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;密码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input prefix&#x3D;&quot;*&quot; suffix&#x3D;&quot;&quot; v-model&#x3D;&quot;password&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item label&#x3D;&quot;验证码&quot; v-bind&#x3D;&quot;formlayout&quot;&gt;      &lt;a-input v-model&#x3D;&quot;verification&quot; @blur&#x3D;&quot;isVerification&quot;&#x2F;&gt;      &lt;span v-if&#x3D;&quot;isverification&quot;&gt;验证码错误&lt;&#x2F;span&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;clickVerification&quot;&gt;点击发送验证码&lt;&#x2F;a-button&gt;    &lt;&#x2F;a-form-item&gt;    &lt;a-form-item v-bind&#x3D;&quot;buttonlayout&quot;&gt;      &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submit&quot;&gt;登录&lt;&#x2F;a-button&gt;      &lt;img style&#x3D;&quot;margin-left:20px;cursor:pointer;&quot; @click&#x3D;&quot;dingding&quot; src&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;static&#x2F;dingding.png&quot;&#x2F;&gt;    &lt;&#x2F;a-form-item&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;import &#123;getisVerification, getVerification, postDinDin, postLogin&#125; from &quot;..&#x2F;http&#x2F;apis&quot;;export default &#123;  data() &#123;    return &#123;      selected: &quot;&quot;,      startdate: &quot;&quot;,      dinDinUrl: &quot;&quot;,      username: &quot;&quot;,      password: &quot;&quot;,      verification: &quot;&quot;,      isverification: false,      &#x2F;&#x2F;表单样式      formlayout: &#123;        &#x2F;&#x2F;标签        labelCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 8&#125;        &#125;,        &#x2F;&#x2F;文本框        wrapperCol: &#123;          xs: &#123;span: 24&#125;,          sm: &#123;span: 3&#125;        &#125;      &#125;,      &#x2F;&#x2F;按钮样式      buttonlayout: &#123;        &#x2F;&#x2F;按钮        wrapperCol: &#123;          xs: &#123;            span: 24,            offset: 0          &#125;,          sm: &#123;span: 16, offset: 8&#125;        &#125;      &#125;    &#125;  &#125;,  &#x2F;&#x2F;自定义方法  methods: &#123;    &#x2F;&#x2F;判断验证码    isVerification() &#123;      getisVerification(&#123;verification: this.verification&#125;).then(res &#x3D;&gt; &#123;        console.log(res)        if (res.code &#x3D;&#x3D; 200) &#123;          this.isverification &#x3D; false        &#125; else &#123;          this.isverification &#x3D; true        &#125;      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;发送钉钉验证码    clickVerification() &#123;      getVerification().then(res &#x3D;&gt; &#123;        console.log(res)      &#125;).catch(err &#x3D;&gt; &#123;        console.log(err)      &#125;)    &#125;,    &#x2F;&#x2F;钉钉登录    dingding: function () &#123;      postDinDin().then(res &#x3D;&gt; &#123;        console.log(res)        this.dinDinUrl &#x3D; res.dindin_url        &#x2F;&#x2F;打开新窗口跳转到此地址        window.open(res.dindin_url)      &#125;)    &#125;,    submit: function () &#123;      &#x2F;&#x2F; let just &#x3D; true;      &#x2F;&#x2F; just &#x3D; this.isVerification() &amp; just;      if (this.isverification &#x3D;&#x3D;&#x3D; false) &#123;        let params &#x3D; &#123;          username: this.username,          password: this.password,        &#125;        &#x2F;&#x2F;登录        postLogin(params).then(res &#x3D;&gt; &#123;          console.log(res)          if (res.token) &#123;            localStorage.setItem(&quot;token&quot;, res.token)            localStorage.setItem(&quot;username&quot;, res.username)            localStorage.setItem(&quot;id&quot;, res.id)          &#125; else &#123;            alert(&quot;登录失败&quot;)          &#125;        &#125;).catch(err &#x3D;&gt; &#123;          console.log(err)        &#125;)      &#125;&#125;;&lt;&#x2F;script&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;&lt;&#x2F;style&gt;</code></pre></li><li><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> register <span class="token keyword">from</span> <span class="token string">'@/components/register'</span><span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">'@/components/login'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">var</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'register'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>register        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'login'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>login        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span>routes<span class="token punctuation">,</span>  mode<span class="token operator">:</span><span class="token string">'history'</span>   <span class="token comment">/*hash*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;django-vue实现钉钉群机器人验证码&quot;&gt;&lt;a href=&quot;#django-vue实现钉钉群机器人验证码&quot; class=&quot;headerlink&quot; title=&quot;django+vue实现钉钉群机器人验证码&quot;&gt;&lt;/a&gt;django+vue实现钉钉群机器人验证码&lt;/</summary>
      
    
    
    
    <category term="django--vue" scheme="https://wyx6.top/categories/django-vue/"/>
    
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="django2.0.4" scheme="https://wyx6.top/tags/django2-0-4/"/>
    
    <category term="python3.7.4" scheme="https://wyx6.top/tags/python3-7-4/"/>
    
  </entry>
  
  <entry>
    <title>python基础垃圾回收机制</title>
    <link href="https://wyx6.top/2020/12/15/python%E5%9F%BA%E7%A1%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://wyx6.top/2020/12/15/python%E5%9F%BA%E7%A1%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2020-12-15T12:41:37.000Z</published>
    <updated>2020-12-16T13:47:54.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python基础垃圾回收机制"><a href="#python基础垃圾回收机制" class="headerlink" title="python基础垃圾回收机制"></a>python基础垃圾回收机制</h1><h2 id="一、引用计数"><a href="#一、引用计数" class="headerlink" title="一、引用计数"></a>一、引用计数</h2><ul><li><p>Python垃圾回收主要以引用计数为主，分代回收为辅。引用计数法的原理是每个对象维护一个<strong>ob_ref</strong>，用来记录当前对象被引用的次数，也就是来追踪到底有多少引用指向了这个对象，当发生以下四种情况的时候，该对象的引用计数器**+1**</p></li><li><p>我们使用python内置模块 sys 中  getrefcount()方法 来查看引用计数</p></li><li><p>事例 1</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Pro</span><span class="token punctuation">:</span>   <span class="token comment">#创建  计数 +1</span>    <span class="token keyword">pass</span>p1 <span class="token operator">=</span> Pro<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#实例  计数 +1</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#打印结果 2</span></code></pre></li><li><p>事例 2</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Pro</span><span class="token punctuation">:</span>  <span class="token comment">#创建  计数 +1</span>    <span class="token keyword">pass</span>p1 <span class="token operator">=</span> Pro<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#引用  计数 +1</span>p2 <span class="token operator">=</span> p1  <span class="token comment">#引用 计数 +1</span><span class="token keyword">del</span> p2  <span class="token comment">#删除引用 计数 -1                     </span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getrefcount<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#打印结果 2</span></code></pre></li><li><p><strong>引入：</strong></p><ul><li><p>当我们向p2赋值的时候会不会在内存中开辟新的空间存储p2  答案是<strong>不会</strong></p><ul><li>打印内存地址 <code>id()</code> 进行查看</li><li>使用 <code>is</code>来进行判断</li></ul></li><li><p>如何查看实例化对象占用了多少内存</p><ul><li><p><code>sys.getsizeof()</code> 查看某一变量的大小</p><pre class="language-none"><code class="language-none">print(sys.getsizeof(p1))  # 52 字节</code></pre></li></ul></li></ul></li><li><p><strong>当指向该对象的内存的引用计数器为0的时候，该内存将会被Python虚拟机销毁</strong></p></li><li><p><strong>引用计数法有很明显的优点：</strong></p><ol><li>高效</li><li>运行期没有停顿 可以类比一下Ruby的垃圾回收机制，也就是 实时性：一旦没有引用，内存就直接释放了。不用像其他机制等到特定时机。实时性还带来一个好处：处理回收内存的时间分摊到了平时。</li><li>对象有确定的生命周期</li><li>易于实现</li></ol></li><li><p><strong>原始的引用计数法也有明显的缺点：</strong></p><ol><li><p>维护引用计数消耗资源，维护引用计数的次数和引用赋值成正比，而不像mark and sweep等基本与回收的内存数量有关。</p></li><li><p>无法解决循环引用的问题。A和B相互引用而再没有外部引用A与B中的任何一个，它们的引用计数都为1，但显然应该被回收。<br>循环引用的示例：</p><pre class="language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre></li></ol></li><li><p>**为了解决这两个致命弱点，Python又引入了以下两种GC机制。标记清除  **</p></li></ul><h2 id="二、标记清除（待续）"><a href="#二、标记清除（待续）" class="headerlink" title="二、标记清除（待续）"></a>二、标记清除（待续）</h2><p>过一段时间去扫描内存中所有的计数变量  每扫一次会给这些变量分层（给这些变量打标签）</p><h2 id="三、分代回收"><a href="#三、分代回收" class="headerlink" title="三、分代回收"></a>三、分代回收</h2><p>​    第一次扫描有10个  第二次扫描有5个  有5个被回收 剩下的五个打上<strong>标签</strong>叫<code>青年代(经常扫描的)</code>引用次数低于中年代(青年代)和老年代 多次扫描还存活的叫<code>中年代</code>  一直被引用一直存在的叫<code>老年代</code> 过一段时间我就不去扫描<code>老年代(一般不回收)</code>了</p><ol><li><p>解决嵌套引用问题</p><pre class="language-none"><code class="language-none">import sysclass Person:    passclass Dog:    pass# 实例化p &#x3D; Person()d &#x3D; Dog()# 嵌套引用p.pet &#x3D; d  # 人的宠物 Dog()d.master &#x3D; p  # 狗的主人 Person()</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python基础垃圾回收机制&quot;&gt;&lt;a href=&quot;#python基础垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;python基础垃圾回收机制&quot;&gt;&lt;/a&gt;python基础垃圾回收机制&lt;/h1&gt;&lt;h2 id=&quot;一、引用计数&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建自己的高逼格博客</title>
    <link href="https://wyx6.top/2020/12/15/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%AB%98%E9%80%BC%E6%A0%BC%E5%8D%9A%E5%AE%A2/"/>
    <id>https://wyx6.top/2020/12/15/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%AB%98%E9%80%BC%E6%A0%BC%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-12-15T03:48:52.000Z</published>
    <updated>2020-12-16T23:39:37.745Z</updated>
    
    <content type="html"><![CDATA[<p>花了几天搭建了个网站，先上链接，欢迎来访：<a href="http://wyx6.top/">翔翔博客</a></p><p>现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。</p><p>而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。</p><p>那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>教程分三个部分，</p><ul><li>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</li><li>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</li><li>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</li></ul><hr><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h1 id="Hexo简介-1"><a href="#Hexo简介-1" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h1 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h1><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><pre class="language-none"><code class="language-none">sudo apt-get install git</code></pre><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h1 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：<a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本就行了。</p><p>linux：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>安装完后，打开命令行</p><pre class="language-none"><code class="language-none">node -vnpm -v</code></pre><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h1><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><pre class="language-none"><code class="language-none">npm install -g hexo-cli</code></pre><p>依旧用<code>hexo -v</code>查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><pre class="language-none"><code class="language-none">hexo init blog</code></pre><p>blog  (自己起的名字)  然后</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog //进入这个blog文件夹<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><pre class="language-none"><code class="language-none">hexo ghexo server</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="img" loading="lazy"><br>使用ctrl+c可以关闭服务。</p><h1 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h1><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" alt="img" loading="lazy"></p><p>创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://也就是xxxx.github.io/">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img src="https://img-blog.csdnimg.cn/20201215105231380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>点击create repository。</p><h1 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h1><p>到你的git bash中，右击选择 git bash Here</p><pre class="language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre class="language-none"><code class="language-none">git config user.namegit config user.email</code></pre><p>然后创建SSH,一路回车</p><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstd106j20kb073gll.jpg" alt="img" loading="lazy"></p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" alt="img" loading="lazy"></p><p>在gitbash中，查看是否成功</p><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><h1 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git  branch: master</code></pre><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><p>然后</p><pre class="language-none"><code class="language-none">hexo cleanhexo generatehexo deploy</code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstbtvfj20lq01u3yd.jpg" alt="img" loading="lazy"></p><h1 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h1><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5">阿里云</a>上买一个域名，我买的是 <code>fangzh.top</code>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><img src="https://img-blog.csdnimg.cn/202012151052303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址  <a href="https://zhuanlan.zhihu.com/p/111786790">查看设置</a>。</p><img src="https://img-blog.csdnimg.cn/2020121515361029.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>fangzh.top</code></p><p><img src="https://img-blog.csdnimg.cn/20201215105231646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://img-blog.csdnimg.cn/2020121510523576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>最后，在gitbash中，输入</p><pre class="language-none"><code class="language-none">hexo cleanhexo ghexo d</code></pre><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><pre class="language-none"><code class="language-none">hexo new newpapername</code></pre><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><pre class="language-none"><code class="language-none">hexo cleanhexo ghexo d</code></pre><p>就可以看到更新了。</p><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p><h1 id="1-hexo基本配置"><a href="#1-hexo基本配置" class="headerlink" title="1. hexo基本配置"></a>1. hexo基本配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方的配置</a>描述。</p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td></tr><tr><td><code>root</code></td><td>网站根目录</td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013/07/14/hello-world</td></tr><tr><td><code>:year-:month-:day-:title.html</code></td><td>2013-07-14-hello-world.html</td></tr><tr><td><code>:category/:title</code></td><td>foo/bar/hello-world</td></tr></tbody></table><p>再往下翻，中间这些都默认就好了。</p><pre class="language-none"><code class="language-none">theme: landscape# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repo: &lt;repository url&gt;  branch: [branch]</code></pre><p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class="language-none"><code class="language-none">title: Hello Worlddate: 2013&#x2F;7&#x2F;13 20:46:25---</code></pre><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><pre class="language-none"><code class="language-none">categories:- Diarytags:- PS3- Games</code></pre><h3 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h3><p>当你每一次使用代码</p><pre class="language-none"><code class="language-none">hexo new paper</code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><p>而new这个命令其实是：</p><pre class="language-none"><code class="language-none">hexo new [layout] &lt;title&gt;</code></pre><p>只不过这个layout默认是post罢了。</p><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p><pre class="language-none"><code class="language-none">hexo new page board</code></pre><p>系统会自动给你在source文件夹下创建一个board文件夹，<a href="http://以及board文件夹中的index.md/">以及board文件夹中的index.md</a>，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="language-none"><code class="language-none">hexo new draft newpage</code></pre><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="language-none"><code class="language-none">hexo server --draft</code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><pre class="language-none"><code class="language-none">hexo publish draft newpage</code></pre><p>就会自动把newpage.md发送到post中。</p><hr><h1 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/">点这里</a></p><p><img src="https://img-blog.csdnimg.cn/20201215105247115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如<a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是<a href="https://yun.yunyoujun.cn/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">yum</a>这个主题，好像是从WordPress移植过来的，展示效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20201215105242867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>不管怎么样，至少是符合我个人的审美。</p><p>直接在github链接上下载下来，然后放到<code>theme</code>文件夹下就行了，然后再在刚才说的配置文件中把<code>theme</code>换成那个主题文件夹的名字，它就会自动在<code>theme</code>文件夹中搜索你配置的主题。</p><p>而后进入<code>hueman</code>这个文件夹，可以看到里面也有一个配置文件<code>_config.xml</code>，貌似它默认是<code>_config.xml.example</code>，把它复制一份，重命名为<code>_config.xml</code>就可以了。这个配置文件是修改你整个主题的配置文件。</p><h3 id="menu（菜单栏）"><a href="#menu（菜单栏）" class="headerlink" title="menu（菜单栏）"></a>menu（菜单栏）</h3><p>也就是上面菜单栏上的这些东西。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstfwjbj20jd0233ye.jpg" alt="img" loading="lazy"></p><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</p><pre class="language-none"><code class="language-none">hexo new page about</code></pre><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，<a href="http://以及index.md/">以及index.md</a>，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><p>如果你想要自己再自定义一个菜单栏的选项，那么就</p><pre class="language-none"><code class="language-none">hexo new page yourdiy</code></pre><p>然后在主题配置文件的menu菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: &#39;中文意思&#39;</code>就可以显示中文了。</p><h3 id="customize-定制"><a href="#customize-定制" class="headerlink" title="customize(定制)"></a>customize(定制)</h3><p>在这里可以修改你的个人logo，默认是那个hueman，在<code>source/css/images</code>文件夹中放入自己要的logo，再改一下<code>url</code>的链接名字就可以了。</p><p><code>favicon</code>是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p><code>social_links</code> ，可以显示你的社交链接，而且是有logo的。</p><p><strong>tips:</strong></p><p>在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。</p><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><p><strong>1. 什么是RSS？</strong></p><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。</p><p><strong>2. 为什么要用RSS？</strong></p><p>就如同订阅公众号一样，你对某个公众号感兴趣，你总不可能一直时不时搜索这个公众号来看它的文章吧。博客也是一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过RSS订阅它们，然后在RSS阅读器上可以实时推送这些消息。现在网上的垃圾消息太多了，如果你每一天都在看这些消息中度过，漫无目的的浏览，只会让你的时间一点一点的流逝，太不值得了。如果你关注的博主每次都发的消息都是精华，而且不是每一天十几条几十条的轰炸你，那么这个博主就值得你的关注，你就可以通过RSS订阅他。</p><p>在我的理解中，如果你不想每天都被那些没有质量的消息轰炸，只想安安静静的关注几个博主，每天看一些有质量的内容也不用太多，那么RSS订阅值得你的拥有。</p><p><strong>3. 添加RSS功能</strong></p><p>先安装RSS插件</p><pre class="language-none"><code class="language-none">npm i hexo-generator-feed</code></pre><p>而后在你整个项目的<code>_config.yml</code>中找到Extensions，添加：</p><pre class="language-none"><code class="language-none"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20</code></pre><p>这个时候你的RSS链接就是 域名<code>/atom.xml</code>了。</p><p>所以，在主题配置文件中的这个<code>social links</code>，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><pre class="language-none"><code class="language-none">rss: &#x2F;atom.xml</code></pre><p><strong>4. 如何关注RSS？</strong></p><p>首先，你需要一个RSS阅读器，在这里我推荐<code>inoreader</code>，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到<code>inoreader</code>上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索<code>阮一峰</code>，应该就能出来了。</p><p>我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。当然，还有我！！赶快关注我吧！你值得拥有：<a href="http://fangzh.top/atom.xml">http://fangzh.top/atom.xml</a></p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h3 id="widgets-侧边栏"><a href="#widgets-侧边栏" class="headerlink" title="widgets(侧边栏)"></a>widgets(侧边栏)</h3><p>侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把<code>communication</code>写在上面，在<code>zh-CN.yml</code>中的<code>sidebar</code>，添加<code>communication: &#39;中文&#39;</code>。</p><p>然后在<code>hueman/layout/widget</code>中添加一个<code>communicaiton.ejs</code>，填入模板：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget-wrap widget-list"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget-title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'sidebar.communiation'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里添加你要写的内容<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><h3 id="search-搜索框"><a href="#search-搜索框" class="headerlink" title="search(搜索框)"></a>search(搜索框)</h3><p>默认搜索框是不能够用的，</p><blockquote><p>you need to install <code>hexo-generator-json-content</code> before using Insight Search</p></blockquote><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h3 id="comment-评论系统"><a href="#comment-评论系统" class="headerlink" title="comment(评论系统)"></a>comment(评论系统)</h3><p>这里的多数都是国外的，基本用不了。这个<code>valine</code>好像不错，还能统计文章阅读量，可以自己试一试，<a href="https://valine.js.org/quickstart.html#npm">链接</a>。</p><h3 id="miscellaneous-其他"><a href="#miscellaneous-其他" class="headerlink" title="miscellaneous(其他)"></a>miscellaneous(其他)</h3><p>这里我就改了一个<code>links</code>，可以添加友链。注意空格要对！不然会报错！</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义</li><li>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中<code>comment</code>是评论系统，<code>common</code>是常规的布局，最常修改的在这里面，比如修改页面<code>head</code>和<code>footer</code>的内容。</li><li>scripts：js脚本，暂时没什么用</li><li>source：里面放了一些css的样式，以及图片</li></ul><hr><h1 id="3-git分支进行多终端工作"><a href="#3-git分支进行多终端工作" class="headerlink" title="3. git分支进行多终端工作"></a>3. git分支进行多终端工作</h1><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstj43xj20800d7glz.jpg" alt="可以看到，并没有source等源文件在内" loading="lazy"></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksthbryj20eb07swej.jpg" alt="img" loading="lazy"></p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><p>首先，先在github上新建一个hexo分支，如图：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstkyz7j20cp0bgdg5.jpg" alt="img" loading="lazy"></p><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstl8uxj20ql0dsgmo.jpg" alt="img" loading="lazy"></p><p>然后在本地的任意目录下，打开git bash，</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone git@github.com:ZJUFangzh/ZJUFangzh.github.io.git</code></pre><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的<code>ZJUFangzh.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><pre class="language-none"><code class="language-none">.DS_StoreThumbs.dbdb.json*.lognode_modules&#x2F;public&#x2F;.deploy*&#x2F;</code></pre><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit –m <span class="token string">"add branch"</span><span class="token function">git</span> push </code></pre><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk4k1j20yq0h9gmr.jpg" alt="img" loading="lazy"></p><p>这样就上传完了。</p><h3 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h3><p>一样的，跟之前的环境搭建一样，</p><ul><li>安装git</li></ul><pre class="language-none"><code class="language-none">sudo apt-get install git</code></pre><ul><li>设置git全局邮箱和用户名</li></ul><pre class="language-none"><code class="language-none">git config --global user.name &quot;yourgithubname&quot;git config --global user.email &quot;yourgithubemail&quot;</code></pre><ul><li>设置ssh key</li></ul><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail&quot;#生成后填到github和coding上（有coding平台的话）#验证是否成功ssh -T git@github.comssh -T git@git.coding.net #(有coding平台的话)</code></pre><ul><li>安装nodejs</li></ul><pre class="language-none"><code class="language-none">sudo apt-get install nodejssudo apt-get install npm</code></pre><ul><li>安装hexo</li></ul><pre class="language-none"><code class="language-none">sudo npm install hexo-cli -g</code></pre><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><pre class="language-none"><code class="language-none">git clone git@………………</code></pre><p>然后进入克隆到的文件夹：</p><pre class="language-none"><code class="language-none">cd xxx.github.ionpm installnpm install hexo-deployer-git --save</code></pre><p>生成，部署：</p><pre class="language-none"><code class="language-none">hexo ghexo d</code></pre><p>然后就可以开始写你的新博客了</p><pre class="language-none"><code class="language-none">hexo new newpage</code></pre><p><strong>Tips:</strong></p><ol><li>不要忘了，每次写完最好都把源文件上传一下</li></ol><pre class="language-none"><code class="language-none">git add .git commit –m &quot;xxxx&quot;git push </code></pre><ol><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</li></ol><pre class="language-none"><code class="language-none">git pull</code></pre><hr><h1 id="4-coding-page上部署实现国内外分流"><a href="#4-coding-page上部署实现国内外分流" class="headerlink" title="4. coding page上部署实现国内外分流"></a>4. coding page上部署实现国内外分流</h1><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><p><strong>1. 申请coding账户，新建项目</strong></p><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。</p><p><strong>2. 添加ssh key</strong></p><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><pre class="language-none"><code class="language-none">ssh -T git@git.coding.net</code></pre><p><strong>3. 修改_config.yml</strong></p><p>hexo官方文档是这样的：</p><pre class="language-none"><code class="language-none">deploy:  type: git  message: [message]  repo:    github: &lt;repository url&gt;,[branch]    coding: &lt;repository url&gt;,[branch] </code></pre><p>那么，我们只需要：</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo:     coding: git@git.coding.net:ZJUFangzh&#x2F;ZJUFangzh.git,master    github: git@github.com:ZJUFangzh&#x2F;ZJUFangzh.github.io.git,master</code></pre><p><strong>4. 部署</strong></p><p>保存一下，直接</p><pre class="language-none"><code class="language-none">hexo ghexo d</code></pre><p>这样就可以在coding的项目上看到你部署的文件了。</p><p><strong>5. 开启coding pages服务，绑定域名</strong></p><p>如图：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstnswnj20xr0bugmj.jpg" alt="img" loading="lazy"></p><p><strong>6. 阿里云添加解析</strong></p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstjxu6j20o709bdg1.jpg" alt="img" loading="lazy"></p><p>这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。</p><p><strong>7. 去除coding page的跳转广告</strong></p><p>coding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到<code>pages服务</code>这里。</p><p>这里：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstmpshj20j80cbmxq.jpg" alt="img" loading="lazy"></p><p>只要你在页面上添加一行文字，写<code>Hosted by Coding Pages</code>，然后点下面的小勾勾，两个工作日内它就会审核通过了。</p><pre class="language-none"><code class="language-none">&lt;p&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</code></pre><p>我的选择是把这一行代码放在主题文件夹<code>/layout/common/footer.ejs</code>里面，也就是本来在页面中看到的页脚部分。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk1skj20lh0630su.jpg" alt="img" loading="lazy"></p><p>当然，为了统一，我又在后面加上了and <strong>Github</strong>哈哈，可以不加。</p><pre class="language-none"><code class="language-none">&lt;p&gt;&lt;span&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and &lt;span&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Github&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</code></pre><p>这是最终加上去的代码。</p><hr><h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><p>本文参考了: <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar.com</a>这里面说的很详细了。</p><h1 id="1-SEO优化"><a href="#1-SEO优化" class="headerlink" title="1. SEO优化"></a>1. SEO优化</h1><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p><blockquote><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></blockquote><h3 id="百度seo"><a href="#百度seo" class="headerlink" title="百度seo"></a>百度seo</h3><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code></p><p>来查看一下。</p><p><strong>1. 登录百度站长平台添加网站</strong></p><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index">百度站长平台</a>，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><p><strong>2. 提交链接</strong></p><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save</code></pre><p>这时候你需要在你的根目录下<code>_config.xml</code>中看看url有没有改成你自己的：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstpzd9j20ar03b749.jpg" alt="img" loading="lazy"></p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstwp4pj20fc0kyq4n.jpg" alt="img" loading="lazy"></p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件<code>/layout/common/head.ejs</code>的适当位置，然后验证一下就可以了。</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</li></ul><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu9fa6j20v60m4404.jpg" alt="img" loading="lazy"></p><p><strong>ps:</strong> 百度收录比较慢，慢慢等个十天半个月再去<code>site:&lt;域名&gt;</code>看看有没有被收录。</p><h3 id="google的SEO"><a href="#google的SEO" class="headerlink" title="google的SEO"></a>google的SEO</h3><p>流程一样，google更简单，而且收录更快，进入<a href="https://search.google.com/search-console/sitemaps?resource_id=http://fangzh.top/&hl=zh-CN">google站点地图</a>，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 <a href="http://yourname.github.io/">yourname.github.io</a>，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkswrucmj20q30lkq72.jpg" alt="img" loading="lazy"></p><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h1 id="2-评论系统"><a href="#2-评论系统" class="headerlink" title="2. 评论系统"></a>2. 评论系统</h1><p>评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar</a>这个博主用的来比力评论系统，感觉也还不错。</p><p><a href="https://livere.com/">来比力官网</a>，注册好后，点击管理页面，在<code>代码管理</code>中找到安装代码：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu93vyj20tk0m440w.jpg" alt="img" loading="lazy"></p><p>获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。</p><pre class="language-none"><code class="language-none">&lt;%- partial(&#39;comment&#x2F;livebe&#39;) %&gt;</code></pre><p>然后可以自己设置一些东西：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksufavtj20v70o9mzw.jpg" alt="img" loading="lazy"></p><p>还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。</p><h1 id="3-添加百度统计"><a href="#3-添加百度统计" class="headerlink" title="3. 添加百度统计"></a>3. 添加百度统计</h1><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。</p><p><a href="https://tongji.baidu.com/">百度统计</a>，注册一下，这里的账号好像和百度账号不是一起的。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvbdmwj20lf0kx78n.jpg" alt="img" loading="lazy"></p><p>照样把代码复制到<code>head.ejs</code>文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。</p><h1 id="4-文章阅读量统计leanCloud"><a href="#4-文章阅读量统计leanCloud" class="headerlink" title="4. 文章阅读量统计leanCloud"></a>4. 文章阅读量统计leanCloud</h1><p><a href="https://leancloud.cn/">leanCloud</a>，进去后注册一下，进入后创建一个应用：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstp8rdj20h30cimxt.jpg" alt="img" loading="lazy"></p><p>在<code>存储</code>中创建Class，命名为Counter,</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstygbpj20gq0k0abm.jpg" alt="img" loading="lazy"></p><p>然后在设置页面看到你的<code>应用Key</code>，在主题的配置文件中：</p><pre class="language-none"><code class="language-none">leancloud_visitors:  enable: true  app_id: 你的id  app_key: 你的key</code></pre><p>在<code>article.ejs</code>中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了，</p><pre class="language-none"><code class="language-none">阅读数量:&lt;span id&#x3D;&quot;&lt;%&#x3D; url_for(post.path) %&gt;&quot; class&#x3D;&quot;leancloud_visitors&quot; data-flag-title&#x3D;&quot;&lt;%- post.title %&gt;&quot;&gt;&lt;&#x2F;span&gt;次</code></pre><p>然后在<code>footer.ejs</code>的最后，添加：</p><pre class="language-none"><code class="language-none">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;2.5.0&#x2F;av-min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    var APP_ID &#x3D; &#39;你的app id&#39;;    var APP_KEY &#x3D; &#39;你的app key&#39;;    AV.init(&#123;        appId: APP_ID,        appKey: APP_KEY    &#125;);    &#x2F;&#x2F; 显示次数    function showTime(Counter) &#123;        var query &#x3D; new AV.Query(&quot;Counter&quot;);        if($(&quot;.leancloud_visitors&quot;).length &gt; 0)&#123;            var url &#x3D; $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim();            &#x2F;&#x2F; where field            query.equalTo(&quot;words&quot;, url);            &#x2F;&#x2F; count            query.count().then(function (number) &#123;                &#x2F;&#x2F; There are number instances of MyClass where words equals url.                $(document.getElementById(url)).text(number?  number : &#39;--&#39;);            &#125;, function (error) &#123;                &#x2F;&#x2F; error is an instance of AVError.            &#125;);        &#125;    &#125;    &#x2F;&#x2F; 追加pv    function addCount(Counter) &#123;        var url &#x3D; $(&quot;.leancloud_visitors&quot;).length &gt; 0 ? $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim() : &#39;icafebolger.com&#39;;        var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;);        var query &#x3D; new Counter;        query.save(&#123;            words: url        &#125;).then(function (object) &#123;        &#125;)    &#125;    $(function () &#123;        var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;);        addCount(Counter);        showTime(Counter);    &#125;);&lt;&#x2F;script&gt;</code></pre><p>重新部署后就可以了。</p><h1 id="5-引入不蒜子访问量和访问人次统计"><a href="#5-引入不蒜子访问量和访问人次统计" class="headerlink" title="5. 引入不蒜子访问量和访问人次统计"></a>5. 引入不蒜子访问量和访问人次统计</h1><p>不蒜子的添加非常非常方便，<a href="http://busuanzi.ibruce.info/">不蒜子</a></p><p>在<code>footer.ejs</code>中的合适位置，看你要显示在哪个地方，添加：</p><pre class="language-none"><code class="language-none">&lt;!--这一段是不蒜子的访问量统计代码--&gt;&lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次 &amp;nbsp;   &lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人次&lt;&#x2F;span&gt;</code></pre><p>就可以了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于hueman主题，其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。</p><p>多看看别的博主的那些功能，如果有你能找到自己喜欢的功能，那么好好发动搜索技能，很快就能找到怎么做了。加油吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;花了几天搭建了个网站，先上链接，欢迎来访：&lt;a href=&quot;http://wyx6.top/&quot;&gt;翔翔博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://wyx6.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker命令详解</title>
    <link href="https://wyx6.top/2020/12/15/ubuntu%20docker%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wyx6.top/2020/12/15/ubuntu%20docker%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-12-15T03:10:21.000Z</published>
    <updated>2020-12-15T07:48:39.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker命令详解"><a href="#docker命令详解" class="headerlink" title="docker命令详解"></a>docker命令详解</h1><h3 id="此次操作都是在ubuntu17-01下进行-docker版本是17-10-0-ce-docker-compose是1-17-1"><a href="#此次操作都是在ubuntu17-01下进行-docker版本是17-10-0-ce-docker-compose是1-17-1" class="headerlink" title="此次操作都是在ubuntu17.01下进行,docker版本是17.10.0-ce,docker-compose是1.17.1."></a>此次操作都是在ubuntu17.01下进行,docker版本是17.10.0-ce,docker-compose是1.17.1.</h3><h3 id="docker-存在的意义"><a href="#docker-存在的意义" class="headerlink" title="docker 存在的意义"></a>docker 存在的意义</h3><p>· 使用dokcer加速本地开发和构建，开发人员可以构建、运行并分享Docker容器，容器可以在开发环境中构建，然后轻松地提交到测试环境中，并最终进入生产环境</p><p>· 能够让独立服务或应用程序在不同环境中，得到相同的运行结果。</p><p>· 用docker 创建隔离环境进行测试</p><p>· docker 可以让开发者先在本机上构建一个复杂的程序测试，而不是一开始就在生产环境进行测试</p><h3 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h3><p>· Docker 的常用文档:<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p>· Docker 镜像: 用户基于镜像来运行自己的容器，可以把镜像当做容器的『源代码』，镜像体积很小，易于分享、存储和更新</p><p>· Registry: Docker 用 Registry 保存用户构建的镜像，Registry 分为公共和私有两种:</p><p>o Docker 公司运营的公共 Registry 叫做 Docker Hub，我们可以在上面注册账号，分享并保存自己的镜像。</p><p>o 可以在 Docker Hub 保存自己的私有镜像或者架设自己私有的 Registry</p><p>· Docker 容器: 把应用程序或服务打包放进去，容器是基于镜像启动的，容器中可以运行一个或多个进程。</p><p>o 镜像是 Docker 生命周期中的构建或打包阶段</p><p>o 容器则是启动或执行阶段</p><p>o </p><h3 id="docker的使用命令"><a href="#docker的使用命令" class="headerlink" title="docker的使用命令"></a>docker的使用命令</h3><p>1 docker 命令介绍</p><p>docker –help</p><p>管理命令:</p><p> container  管理容器</p><p> image    管理镜像</p><p> network   管理网络</p><p>命令：</p><p> attach    介入到一个正在运行的容器</p><p> build    根据 Dockerfile 构建一个镜像</p><p> commit    根据容器的更改创建一个新的镜像</p><p> cp      在本地文件系统与容器中复制 文件/文件夹</p><p> create    创建一个新容器</p><p> exec     在容器中执行一条命令</p><p> images    列出镜像</p><p> kill     杀死一个或多个正在运行的容器   </p><p> logs     取得容器的日志</p><p> pause    暂停一个或多个容器的所有进程</p><p> ps      列出所有容器</p><p> pull     拉取一个镜像或仓库到 registry</p><p> push     推送一个镜像或仓库到 registry</p><p> rename    重命名一个容器</p><p> restart   重新启动一个或多个容器</p><p> rm      删除一个或多个容器</p><p> rmi     删除一个或多个镜像</p><p> run     在一个新的容器中执行一条命令</p><p> search    在 Docker Hub 中搜索镜像</p><p> start    启动一个或多个已经停止运行的容器</p><p> stats    显示一个容器的实时资源占用</p><p> stop     停止一个或多个正在运行的容器</p><p> tag     为镜像创建一个新的标签</p><p> top     显示一个容器内的所有进程</p><p> unpause   恢复一个或多个容器内所有被暂停的进程</p><ol start="2"><li>更详细的功能参数配置</li></ol><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–api-enable-cors=false</td><td>开放远程API调用的 CORS 头信息。这个接口开关对想进行二次开发的上层应用提供了支持.</td></tr><tr><td>-b, –bridge=””</td><td>挂载已经存在的网桥设备到 Docker 容器里。注意，使用 none可以停用容器里的网络.</td></tr><tr><td>–bip=””</td><td>使用 CIDR 地址来设定网络桥的 IP。注意，此参数和 -b 不能一起使用.</td></tr><tr><td>-D, –debug=false</td><td>开启Debug模式。例如：docker -d -D</td></tr><tr><td>-d, –daemon=false</td><td>开启Daemon模式.</td></tr><tr><td>–dns=[]</td><td>强制容器使用DNS服务器.例如： docker -d –dns 8.8.8.8</td></tr><tr><td>–dns-search=[]</td><td>强制容器使用指定的DNS搜索域名.例如： docker -d –dns-searchexample.com</td></tr><tr><td>-e, –exec-driver=”native”</td><td>强制容器使用指定的运行时驱动.例如：docker -d -e lxc</td></tr><tr><td>-G, –group=”docker”</td><td>在后台运行模式下，赋予指定的Group到相应的unix socket上。注意，当此参数 –group 赋予空字符串时，将去除组信息。</td></tr><tr><td>-g, –graph=”/var/lib/docker”</td><td>配置Docker运行时根目录</td></tr><tr><td>-H, –host=[]</td><td>在后台模式下指定socket绑定，可以绑定一个或多个 tcp://host:port, unix:///path/to/socket, fd://  或 fd://socketfd。例如：$ docker -H tcp://0.0.0.0:2375 ps或者 $ export DOCKER_HOST=”tcp://0.0.0.0:2375” $ docker ps</td></tr><tr><td>–icc=true</td><td>启用内联容器的通信.</td></tr><tr><td>–ip=”0.0.0.0”</td><td>容器绑定IP时使用的默认IP地址.</td></tr><tr><td>–ip-forward=true</td><td>启动容器的 net.ipv4.ip_forward.</td></tr><tr><td>–iptables=true</td><td>启动Docker容器自定义的iptable规则.</td></tr><tr><td>–mtu=0</td><td>设置容器网络的MTU值，如果没有这个参数，选用默认 route MTU，如果没有默认route，就设置成常量值 1500.</td></tr><tr><td>-p, –pidfile=”/var/run/docker.pid”</td><td>后台进程PID文件路径.</td></tr><tr><td>-r, –restart=true</td><td>重启之前运行中的容器.</td></tr><tr><td>-s, –storage-driver=””</td><td>强制容器运行时使用指定的存储驱动，例如,指定使用devicemapper,可以这样：docker -d -s devicemapper</td></tr><tr><td>–selinux-enabled=false</td><td>启用selinux支持</td></tr><tr><td>–storage-opt=[]</td><td>配置存储驱动的参数</td></tr><tr><td>–tls=false</td><td>启动TLS认证开关</td></tr><tr><td>–tlscacert=”/Users/dxiao/.docker/ca.pem”</td><td>通过CA认证过的的certificate文件路径</td></tr><tr><td>–tlscert=”/Users/dxiao/.docker/cert.pem”</td><td>TLS的certificate文件路径</td></tr><tr><td>–tlskey=”/Users/dxiao/.docker/key.pem”</td><td>TLS的key文件路径</td></tr><tr><td>–tlsverify=false</td><td>使用TLS并做后台进程与客户端通讯的验证</td></tr><tr><td>-v, –version=false</td><td>显示版本信息</td></tr></tbody></table><p> 注意：其中带有[] 的启动参数可以指定多次，例如</p><p>docker run -a stdin -a stdout -a stderr -i -t ubuntu /bin/bash</p><h3 id="docker基本"><a href="#docker基本" class="headerlink" title="docker基本"></a>docker基本</h3><p>· 查看系统内核</p><p>· uname -r</p><p>· 启动docker 境像</p><p>· systemctl start docker</p><p>· 3.查看docker版本</p><p>· docker verison</p><p>· 4.显示docker系统的信息</p><p>· docker info</p><h3 id="操作docker镜像"><a href="#操作docker镜像" class="headerlink" title="操作docker镜像"></a>操作docker镜像</h3><p>1.检索image</p><p>docker search image-name</p><p>2.下载image</p><p>docker pull image-name</p><p>3.列出镜像列表</p><p>docker images</p><p>4.删除一个或者多个镜像</p><p>docker rmi image-name</p><p>5.显示一个镜像的历史</p><p>docker history image-name  </p><p>6.通过容器创建镜像</p><p> 从已经创建的容器中更新镜像，并且提交这个镜像  使用 Dockerfile 指令来创建一个新的镜像 下面通过已存在的容器创建一个新的镜像。</p><p>docker commit -m=”First Image” -a=”keke” 7a15f99695c0 keke/unbantu:17.10.0</p><p>上面命令参数说明：</p><p>   -m 提交的描述信息</p><p>   -a 指定镜像作者</p><p>   7a15f99695c0 记住这个是容器id，不是镜像id</p><p>   keke/unbantu:17.10.0 创建的目标镜像名</p><ol><li><p>在<a href="https://www.docker.com/">Docker</a> 注册账户，发布的镜像都在<a href="https://cloud.docker.com/repository/list">这个页面里</a>展示</p></li><li><p>将上面做的镜像unbantu，起个新的名字unbantu-test</p></li></ol><p>docker tag keke/unbantu:17.10.0 keke/unbantu-test:lastest</p><ol><li>登录docker</li></ol><p>docker login</p><p>4.上传unbantu镜像</p><p>docker push keke/unbantu-test:lastest</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p><p>1.在容器中安装新的程序</p><p>docker run image-name apt-get install -y -name</p><p>2.在容器中运行”echo”命令，输出”hello word”</p><p>docker run image-name echo “hello word”</p><p>3.交互式进入容器中</p><p>docker run -i -t image_name /bin/bash  </p><p>注意:在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失.</p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>1.列出当前所有正在运行的container</p><p>docker ps</p><p>2.列出所有的container</p><p>docker ps -a  </p><p>3.列出最近一次启动的container</p><p>docker ps -l  </p><p>4.保存对容器的修改 当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p><p>1.保存对容器的修改; -a, –author=”” Author; -m, –message=”” Commit message</p><p>docker commit ID new-image-name</p><p>5.操作容器</p><p>1.删除所有容器</p><p>docker rm <code>docker ps -a -q</code></p><p>2.删除单个容器; -f, –force=false; -l, –link=false Remove the specified link and not the underlying container; -v, –volumes=false Remove the volumes associated to the container</p><p>docker rm Name/ID</p><p>3.停止、启动、杀死一个容器</p><p>docker stop Name/ID  </p><p>docker start Name/ID  </p><p>docker kill Name/ID</p><p>4.从一个容器中取日志; -f, –follow=false Follow log output; -t, –timestamps=false Show timestamps</p><p>docker logs Name/ID  </p><p>5.列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的</p><p>docker diff Name/ID</p><p>6.显示一个运行的容器里面的进程信息</p><p>docker top Name/ID  </p><p>7.从容器里面拷贝文件/目录到本地一个路径</p><p>docker cp Name:/container-path to-path  </p><p>docker cp ID:/container-path to-path</p><p>8.重启一个正在运行的容器; -t, –time=10 Number of seconds to try to stop for before killing the container, Default=10</p><p>docker restart Name/ID</p><p>9.附加到一个运行的容器上面; –no-stdin=false Do not attach stdin; –sig-proxy=true Proxify all received signal to the process</p><p>docker attach ID #重新启动并运行一个交互式会话shell</p><p>注意：attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C.</p><h3 id="保存和加载镜像"><a href="#保存和加载镜像" class="headerlink" title="保存和加载镜像"></a>保存和加载镜像</h3><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。</p><p>1.保存镜像到一个tar包; -o, –output=”” Write to an file</p><p>docker save image-name -o file-path</p><p>2.加载一个tar包格式的镜像; -i, –input=”” Read from a tar archive file</p><p>docker load -i file-path</p><p>3.从机器A拷贝到机器B</p><p>docker save image-name &gt; /home/keke/main.tar</p><p> 使用scp将main.tar拷到机器A上:</p><p>docker load &lt; /home/keke/main.tar</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>1.登陆registry server; -e, –email=”” Email; -p, –password=”” Password; -u, –username=”” Username</p><p>docker login</p><h3 id="发布-docker镜像"><a href="#发布-docker镜像" class="headerlink" title="发布    docker镜像"></a>发布    docker镜像</h3><p>docker push new-image-name</p><h3 id="构建镜像-Dockerfile-docker-build"><a href="#构建镜像-Dockerfile-docker-build" class="headerlink" title="构建镜像    (Dockerfile + docker build)"></a>构建镜像    (Dockerfile + docker build)</h3><p>FROM …</p><p>RUN …</p><h1 id="指定容器内的程序将会使用容器的指定端口"><a href="#指定容器内的程序将会使用容器的指定端口" class="headerlink" title="指定容器内的程序将会使用容器的指定端口"></a>指定容器内的程序将会使用容器的指定端口</h1><h1 id="配合-docker-run-p"><a href="#配合-docker-run-p" class="headerlink" title="配合 docker run -p"></a>配合 docker run -p</h1><p>EXPOSE …</p><p>· RUN: 指定镜像被构建时要运行的命令</p><p>· CMD: 指定容器被启动时要运行的命令</p><p>· ENTRYPOINT: 同 CMD ，但不会被 docker run -t 覆盖</p><p>· WORKDIR: CMD/ENTRYPOINT 会在这个目录下执行</p><p>· VOLUME</p><p>· ADD</p><p>· COPY</p><p>docker history images-name</p><p>1.从新镜像启动容器</p><p>docker run -d -p 4000:80 –name [name] #可以在 Dokcer 宿主机上指定一个具体的端口映射到容器的80端口上</p><h3 id="守护容器"><a href="#守护容器" class="headerlink" title="守护容器"></a>守护容器</h3><p>docker run -d container-name #创建守护容器</p><p>docker top container-name #查看容器内进程</p><p>docker exec container-name touch a.txt #在容器内部运行进程</p><p>docker stop container-name #停止容器</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h3 id="官方英文资源"><a href="#官方英文资源" class="headerlink" title="官方英文资源"></a>官方英文资源</h3><p>· Docker官网：<a href="http://www.docker.com/">http://www.docker.com</a></p><p>· Docker windows入门：<a href="https://docs.docker.com/windows/">https://docs.docker.com/windows/</a></p><p>· Docker Linux 入门：<a href="https://docs.docker.com/linux/">https://docs.docker.com/linux/</a></p><p>· Docker mac 入门：<a href="https://docs.docker.com/mac/">https://docs.docker.com/mac/</a></p><p>· Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/">https://docs.docker.com/engine/userguide/</a></p><p>· Docker 官方博客：<a href="http://blog.docker.com/">http://blog.docker.com/</a></p><p>· Docker Hub: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>· Docker开源： <a href="https://www.docker.com/open-source">https://www.docker.com/open-source</a></p><h3 id="中文资源"><a href="#中文资源" class="headerlink" title="中文资源"></a>中文资源</h3><p>· Docker中文网站：<a href="http://www.docker.org.cn/">http://www.docker.org.cn</a></p><p>· Docker中文文档：<a href="http://www.dockerinfo.net/document">http://www.dockerinfo.net/document</a></p><p>· Docker安装手册：<a href="http://www.docker.org.cn/book/install.html">http://www.docker.org.cn/book/install.html</a></p><p>· 一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22">https://blog.csphere.cn/archives/22</a></p><p>· Docker中文指南：<a href="http://www.widuu.com/chinese_docker/index.html">http://www.widuu.com/chinese_docker/index.html</a></p><h3 id="其它资源"><a href="#其它资源" class="headerlink" title="其它资源"></a>其它资源</h3><p>· <a href="https://github.com/eon01/DockerCheatSheet">Docker 快速手册！</a></p><p>· <a href="http://www.runoob.com/docker/docker-tutorial.html">Docker 教程</a></p><p>· <a href="http://blog.csdn.net/zhangchao19890805/article/details/52756865">MySQL Docker 单一机器上如何配置自动备份</a></p><p>· <a href="https://segmentfault.com/t/docker">https://segmentfault.com/t/docker</a></p><p>· <a href="https://github.com/docker/docker">https://github.com/docker/docker</a></p><p>· <a href="https://wiki.openstack.org/wiki/Docker">https://wiki.openstack.org/wiki/Docker</a></p><p>· <a href="https://wiki.archlinux.org/index.php/Docker">https://wiki.archlinux.org/index.php/Docker</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker命令详解&quot;&gt;&lt;a href=&quot;#docker命令详解&quot; class=&quot;headerlink&quot; title=&quot;docker命令详解&quot;&gt;&lt;/a&gt;docker命令详解&lt;/h1&gt;&lt;h3 id=&quot;此次操作都是在ubuntu17-01下进行-docker版本是17</summary>
      
    
    
    
    
    <category term="docker" scheme="https://wyx6.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>配置Uwsgi+Nginx+Django+Vue</title>
    <link href="https://wyx6.top/2020/12/11/nginx+uwsgi/"/>
    <id>https://wyx6.top/2020/12/11/nginx+uwsgi/</id>
    <published>2020-12-11T08:59:26.000Z</published>
    <updated>2020-12-15T07:45:30.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><ol><li><h2 id="web容器"><a href="#web容器" class="headerlink" title="web容器"></a>web容器</h2><ul><li><h3 id="什么是web容器"><a href="#什么是web容器" class="headerlink" title="什么是web容器"></a>什么是web容器</h3><ul><li>1.web容器是帮助我们部署java、php、python、vue等项目的</li></ul></li><li><h3 id="作用（处理请求，返回数据）"><a href="#作用（处理请求，返回数据）" class="headerlink" title="作用（处理请求，返回数据）"></a>作用（处理请求，返回数据）</h3><ul><li>第一，帮助django服务端处理客户端连接，官方号称可以处理10万（实现高并发） </li><li>第二，帮助处理静态资源请求（html、css、JS），返回给客户端浏览器（django等web服务 器处理静态资源能力差）</li></ul></li><li><h3 id="常见web容器"><a href="#常见web容器" class="headerlink" title="常见web容器"></a>常见web容器</h3><ul><li>nginx（python、php） <ul><li>LNMP <ul><li>L：LInux</li><li>N：Nginx </li><li>M：MySQL </li><li>P： php </li></ul></li></ul></li><li>apache（PHP） <ul><li>LAMP <ul><li>L：LInux </li><li>A：Apache </li><li>M：MySQL </li><li>P： php </li></ul></li></ul></li><li>Tomcat（JAVE）</li></ul></li></ul></li><li><h2 id="什么是WSGI（web协议）"><a href="#什么是WSGI（web协议）" class="headerlink" title="什么是WSGI（web协议）"></a>什么是WSGI（web协议）</h2><ul><li><p>WSGI是一种 python专用 的web协议 和http类似 </p></li><li><p>WSGI实质：WSGI是一种描述web服务器（如 nginx，uWSGI web服务器 ）如何与 web框架 （如用 Django、Flask框架写的程序）通信的规范、协议 </p></li><li><p>WSGI定义了使用 python编写的web app(django)与web server（uWSGI）之间接口格式 </p></li><li><h3 id="为什么需要web协议："><a href="#为什么需要web协议：" class="headerlink" title="为什么需要web协议："></a>为什么需要web协议：</h3><ul><li>1）不同的框架有不同的开发方式，但是无论如何，开发出的 应用程序(django)都要和服务器 (nginx)程序配合 ，才能为用户提供服务。 </li><li>2） 这样， 服务器程序(nginx) 就需要为不同的框架提供不同的支持,只有支持它的服务器才 能被开发出的应用使用，显然这是不可行的。 </li><li>3）web协议本质：就是定义了 Web服务器和Web应用程序或框架之间的一种简单而通用的接口规范 。</li></ul></li></ul></li><li><h2 id="uWSGI-（web服务器-和nginx类似）"><a href="#uWSGI-（web服务器-和nginx类似）" class="headerlink" title="uWSGI （web服务器 和nginx类似）"></a>uWSGI （web服务器 和nginx类似）</h2><ul><li>什么是uWSGI： uWSGI是一个全功能的HTTP服务器，实现了 WSGI协议 、 uwsgi协议 、 http协议 等。</li><li>uWSGI作用：它要做的就是把HTTP协议转化成语言支持的网络协议，比如把 HTTP协议转化成WSGI 协议，让Python可以直接使用 。 </li><li>uWSGI特点：轻量级，易部署，性能比nginx差很多,支持多种协议</li></ul></li><li><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><ul><li>Django是一个Web框架，框架的作用在于处理request和 reponse，其他的不是框架所关心的内容。 </li><li>所以如何部署Django不是Django所需要关心的。</li></ul></li><li><h2 id="nginx-uwsgi-django部署各模块作用"><a href="#nginx-uwsgi-django部署各模块作用" class="headerlink" title="nginx+uwsgi+django部署各模块作用"></a>nginx+uwsgi+django部署各模块作用</h2><ul><li><p><img src="https://img-blog.csdnimg.cn/20201211201749149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li><li><h3 id="Django-Uwsgi-Nginx方案"><a href="#Django-Uwsgi-Nginx方案" class="headerlink" title="Django + Uwsgi + Nginx方案"></a>Django + Uwsgi + Nginx方案</h3><ul><li><p><img src="https://img-blog.csdnimg.cn/2020121120172881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li><li><h4 id="请求处理整体流程"><a href="#请求处理整体流程" class="headerlink" title="请求处理整体流程"></a>请求处理整体流程</h4><ul><li>nginx接收到浏览器发送过来的http请求，将包进行解析，分析url </li><li>静态文件请求： 就直接访问用户给nginx配置的静态文件目录 (html/css/js/图片) ， 直接返回用户请求的静态文件 </li><li>动态接口请求： 那么nginx就将请求转发给uWSGI，最后到达django处理</li></ul></li><li><h4 id="各模块作用"><a href="#各模块作用" class="headerlink" title="各模块作用"></a>各模块作用</h4><ul><li>nginx ：是对外的服务器，外部浏览器通过url访问nginx，nginx主要处理静态请求    (html/css/js/图片)</li><li>uWSGI ：是对内的服务器，主要用来 处理动态请求 。(从mysql、redis、es等中动态查询到的 数据) </li><li>uwsgi ：是一种web协议，接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并 发给wsgi </li><li>wsgi ：是python专用的web协议，根据请求调用应用程序（django）的某个文件，某个文件 的某个函数 </li><li>django ：是真正干活的，查询数据等资源，把处理的结果再次返回给WSGI， WSGI 将返回值 进行打包，打包成uwsgi能够接收的格式 </li><li>uwsgi ：接收wsgi发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器</li></ul></li></ul></li><li><h3 id="Django-uWSGI方案特点"><a href="#Django-uWSGI方案特点" class="headerlink" title="Django + uWSGI方案特点"></a>Django + uWSGI方案特点</h3><ul><li>没有nginx而只有uwsgi的服务器，则是Internet请求直接由uwsgi处理，并反馈到web项目中。</li><li>nginx可以实现安全过滤，防DDOS等保护安全的操作，并且如果配置了多台服务器，nginx可以保 证服务器的负载相对均衡。 </li><li>而uwsgi则是一个web服务器，实现了WSGI协议(Web Server Gateway Interface)，http协议等，它可以 接收和处理请求，发出响应等。 所以只用uwsgi也是可以的。</li></ul></li><li><h3 id="nginx和uWSGI特点"><a href="#nginx和uWSGI特点" class="headerlink" title="nginx和uWSGI特点"></a>nginx和uWSGI特点</h3><ul><li><h4 id="nginx的作用"><a href="#nginx的作用" class="headerlink" title="nginx的作用"></a>nginx的作用</h4><ul><li>反向代理，可以拦截一些web攻击，保护后端的web服务器 </li><li>负载均衡，根据轮询算法，分配请求到多节点web服务器 </li><li>缓存静态资源，加快访问速度，释放web服务器的内存占用，专项专用</li></ul></li><li><h4 id="uWSGI的适用"><a href="#uWSGI的适用" class="headerlink" title="uWSGI的适用"></a>uWSGI的适用</h4><ul><li>单节点服务器的简易部署</li><li>轻量级，好部署zz</li></ul></li></ul></li></ul></li></ol><h1 id="配置Uwsgi-Nginx-Django-Vue"><a href="#配置Uwsgi-Nginx-Django-Vue" class="headerlink" title="配置Uwsgi+Nginx+Django+Vue"></a>配置Uwsgi+Nginx+Django+Vue</h1><ol><li><h2 id="django的settings配置"><a href="#django的settings配置" class="headerlink" title="django的settings配置"></a>django的settings配置</h2><ul><li><h3 id="这里可以先不必配置"><a href="#这里可以先不必配置" class="headerlink" title="这里可以先不必配置"></a>这里可以先不必配置</h3></li><li><p>修改配置</p><p>正式上线关闭调试模式, 不会暴露服务器信息</p><p>DEBUG = False</p></li><li><p>允许的主机</p><p>ALLOWED_HOSTS = [‘xxx.com’,’127.0.0.1’]</p></li><li><h3 id="这里可以需要配置"><a href="#这里可以需要配置" class="headerlink" title="这里可以需要配置"></a>这里可以需要配置</h3></li><li><p>前端修改接口地址（vue） </p><p><a href="http://192.168.56.100:8888/">http://192.168.56.100:8888/</a> =&gt; <a href="http://xxx.com/">http://xxx.com/</a> #</p></li><li><p> MySQL数据库根据实际情况配置（注意地址） </p></li><li><p>5.缓存配置, 改为默认, 最简单形式（配置redis） </p></li><li><p>6.收集静态文件 # 静态资源收集位置 </p><p>STATIC_ROOT = os.path.join(BASE_DIR, ‘static’) </p></li><li><p>7.命令行执行 python manage.py collectstatic</p></li></ul></li></ol><ol start="2"><li><h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3>   <pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>root@linux<span class="token operator">-</span>node1 <span class="token operator">/</span><span class="token punctuation">]</span><span class="token comment"># sudo apt update # 更新apt</span><span class="token punctuation">[</span>root@linux<span class="token operator">-</span>node1 <span class="token operator">/</span><span class="token punctuation">]</span><span class="token comment"># sudo apt install nginx # 安装nginx</span><span class="token punctuation">[</span>root@linux<span class="token operator">-</span>node1 <span class="token operator">/</span><span class="token punctuation">]</span><span class="token comment"># sudo systemctl status nginx</span></code></pre></li><li><h2 id="打包vue静态资源到Linux下"><a href="#打包vue静态资源到Linux下" class="headerlink" title="打包vue静态资源到Linux下"></a>打包vue静态资源到Linux下</h2><ul><li>在终端输入  npm  run build 打包</li><li><img src="https://img-blog.csdnimg.cn/20201114141442449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li><li>生成之后复制到Linux下（我使用的是虚拟机）</li><li>放到自己想放到的地方  然后cd到目录中 输入”””pwd”””查看路径</li></ul></li><li><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><ul><li><p>在终端输入：vim  /etc/nginx/conf.d/django.conf  编辑以下文件格式  注意第二个server  是vue静态资源的绝对路径 </p></li><li><p>配置nginx+uwsgi启动  第一个server是Django的第二个server是Vue的</p></li></ul><pre class="language-python" data-language="python"><code class="language-python">  server <span class="token punctuation">&#123;</span>  listen <span class="token number">8888</span><span class="token punctuation">;</span>  server_name <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span><span class="token punctuation">;</span>    location <span class="token operator">/</span>static <span class="token punctuation">&#123;</span>  alias <span class="token operator">/</span>teach<span class="token operator">/</span>shiyanlou_project<span class="token operator">/</span>syl<span class="token operator">/</span>static<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  include uwsgi_params<span class="token punctuation">;</span>  uwsgi_pass <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token punctuation">;</span>  uwsgi_ignore_client_abort on<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  server <span class="token punctuation">&#123;</span>        listen <span class="token number">9000</span><span class="token punctuation">;</span>        server_name <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span><span class="token punctuation">;</span>        root  <span class="token operator">/</span>home<span class="token operator">/</span>worker<span class="token operator">/</span>dist<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>                try_files $uri $uri<span class="token operator">/</span> @router<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        location @router <span class="token punctuation">&#123;</span>                rewrite <span class="token operator">^</span><span class="token punctuation">.</span><span class="token operator">*</span>$ <span class="token operator">/</span>index<span class="token punctuation">.</span>html last<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h2 id="uwsgi和nginx-启动、关闭、查看日志"><a href="#uwsgi和nginx-启动、关闭、查看日志" class="headerlink" title="uwsgi和nginx 启动、关闭、查看日志"></a>uwsgi和nginx 启动、关闭、查看日志</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.启动并查看nginx日志'''</span>systemctl restart nginx <span class="token comment"># 开启nginx</span>tail <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log <span class="token comment"># 查看nginx接入日志</span>tail <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log <span class="token comment"># 查看nginx错误日志</span><span class="token triple-quoted-string string">'''2.启动并查看uwsgi日志'''</span>cd <span class="token operator">/</span>teach<span class="token operator">/</span>shiyanlou_project<span class="token operator">/</span>uwsgi_conf <span class="token comment"># 进入实验楼目录</span>uwsgi <span class="token operator">-</span><span class="token operator">-</span>ini uwsgi<span class="token punctuation">.</span>ini <span class="token comment"># 启动uwsgi的</span>django项目<span class="token comment"># http://192.168.56.100:8888/ 访问项目</span>uwsgi <span class="token operator">-</span><span class="token operator">-</span>stop uwsgi<span class="token punctuation">.</span>pid <span class="token comment"># 关闭uwsgi</span>tail <span class="token operator">-</span>f uwsgi<span class="token punctuation">.</span>log <span class="token comment"># 查看uwsgi日志</span>ps <span class="token operator">-</span>ef<span class="token operator">|</span>grep uwsgi <span class="token comment"># 查看uwsgi服务是否启动</span>root <span class="token number">92328</span> <span class="token number">89266</span> <span class="token number">0</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">37</span> pts<span class="token operator">/</span><span class="token number">1</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span> grep <span class="token operator">-</span><span class="token operator">-</span>color<span class="token operator">=</span>auto uwsginetstat <span class="token operator">-</span>anptu <span class="token operator">|</span> grep <span class="token number">8888</span> <span class="token comment"># 查看8888端口被哪一个程序</span>占用</code></pre></li><li><h2 id="配置vue跨域"><a href="#配置vue跨域" class="headerlink" title="配置vue跨域"></a>配置vue跨域</h2><p>在components下axios_api下修改   （这个是我自己的跨域文件，你需要修改你自己的） </p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://192.168.56.100:8888/"</span></code></pre></li><li><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2></li></ol><ul><li><p>获取id</p></li><li><pre class="language-python" data-language="python"><code class="language-python">ps <span class="token operator">-</span>A <span class="token operator">|</span>grep 名字</code></pre></li><li><p>杀死</p></li><li><pre class="language-python" data-language="python"><code class="language-python">kill <span class="token operator">-</span><span class="token number">9</span> <span class="token builtin">id</span></code></pre></li><li><p>启动</p></li><li><pre class="language-python" data-language="python"><code class="language-python">systemctl stop nginxsystemctl start nginx或者systemctl restart nginx    uwsgi <span class="token operator">-</span><span class="token operator">-</span>ini uwsgi<span class="token punctuation">.</span>ini</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重要概念&quot;&gt;&lt;a href=&quot;#重要概念&quot; class=&quot;headerlink&quot; title=&quot;重要概念&quot;&gt;&lt;/a&gt;重要概念&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;web容器&quot;&gt;&lt;a href=&quot;#web容器&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
    <category term="djang" scheme="https://wyx6.top/tags/djang/"/>
    
  </entry>
  
  <entry>
    <title>python入门</title>
    <link href="https://wyx6.top/2020/12/11/python%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    <id>https://wyx6.top/2020/12/11/python%E5%9F%BA%E7%A1%80%E9%A2%98/</id>
    <published>2020-12-11T08:10:32.501Z</published>
    <updated>2020-12-15T07:41:49.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python基础题"><a href="#python基础题" class="headerlink" title="python基础题"></a>python基础题</h1><ol><li><h5 id="现有一字符串-“卡巴斯基-杀毒软件-免费版-俄罗斯-”-解析出每个中文元素，打印出-卡巴斯基-杀毒软件-免费版-俄罗斯-注意不能有空格"><a href="#现有一字符串-“卡巴斯基-杀毒软件-免费版-俄罗斯-”-解析出每个中文元素，打印出-卡巴斯基-杀毒软件-免费版-俄罗斯-注意不能有空格" class="headerlink" title="现有一字符串,“卡巴斯基#杀毒软件#免费版#俄罗斯#”,解析出每个中文元素，打印出[卡巴斯基,杀毒软件,免费版,俄罗斯] 注意不能有空格"></a>现有一字符串,“卡巴斯基#杀毒软件#免费版#俄罗斯#”,解析出每个中文元素，打印出[卡巴斯基,杀毒软件,免费版,俄罗斯] 注意不能有空格</h5><ul><li><pre><code class="python">peo = &#39;卡巴斯基#杀毒软件#免费版#俄罗斯#&#39;s = peo.split(&#39;#&#39;)s.pop()print(s)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  [&#39;卡巴斯基&#39;, &#39;杀毒软件&#39;, &#39;免费版&#39;, &#39;俄罗斯&#39;]</code></pre></code></pre></li></ul></li></ol><ol start="2"><li><h5 id="如下字符串-01-张三-20-02-李四-30-03-王五-40。。。。。。-解析每个人分数多少。样式如下"><a href="#如下字符串-01-张三-20-02-李四-30-03-王五-40。。。。。。-解析每个人分数多少。样式如下" class="headerlink" title="如下字符串,01#张三#20-02#李四#30-03#王五#40。。。。。。,解析每个人分数多少。样式如下"></a>如下字符串,01#张三#20-02#李四#30-03#王五#40。。。。。。,解析每个人分数多少。样式如下</h5><ul><li><pre><code class="python">aa = &#39;01#张三#20-02#李四#30-03#王五#40&#39;aa = aa.replace(&#39;#&#39;, &#39; &#39;)s = aa.split(&#39;-&#39;)for i in s:    print(&#39;#&#39;,i)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  # 01 张三 20  # 02 李四 30  # 03 王五 40</code></pre></code></pre></li></ul></li></ol><ol start="3"><li><h5 id="利用输出函数print-打印输出一个矩形-20分"><a href="#利用输出函数print-打印输出一个矩形-20分" class="headerlink" title="利用输出函数print()打印输出一个矩形  (20分)"></a>利用输出函数print()打印输出一个矩形  (20分)</h5><ul><li><pre><code class="python">print(&#39;*&#39;*10)print(&#39;*&#39;*10)print(&#39;*&#39;*10)print(&#39;*&#39;*10)print(&#39;*&#39;*10)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  **********  **********  **********  **********  **********</code></pre></code></pre></li></ul></li><li><h5 id="编写代码，实现求100-200里面所有的质数-20分"><a href="#编写代码，实现求100-200里面所有的质数-20分" class="headerlink" title="编写代码，实现求100-200里面所有的质数 (20分)"></a>编写代码，实现求100-200里面所有的质数 (20分)</h5><ul><li><pre><code class="python">for i in range(100,201):    for j in range(2,i):        if i % j == 0:            break    else:        print(i)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  101  103  107  109  113  127  131  137  139  149  151  157  163  167  173  179  181  191  193  197  199</code></pre></code></pre></li></ul></li><li><h5 id="有如下列表，-nums-2-7-11-15-1-8-7-12-请找到列表中任意两个元素相减能够等于1或者-1的元素集合，列-2-1-1-7-12-11-（20分）"><a href="#有如下列表，-nums-2-7-11-15-1-8-7-12-请找到列表中任意两个元素相减能够等于1或者-1的元素集合，列-2-1-1-7-12-11-（20分）" class="headerlink" title="有如下列表， nums=[2,7,11,15,1,8,7,12]请找到列表中任意两个元素相减能够等于1或者-1的元素集合，列[(2,1), (1,7),(12,11)]  （20分）"></a>有如下列表， nums=[2,7,11,15,1,8,7,12]请找到列表中任意两个元素相减能够等于1或者-1的元素集合，列[(2,1), (1,7),(12,11)]  （20分）</h5><ul><li><pre><code class="python">nums=[2,7,11,15,1,8,7,12]a = []for i in nums:    for j in nums:        if (i - j == 1 or i - j == -1) or (j - i == 1 or j - i == -1):            a.append((i,j))print(set(a),end=&#39; &#39;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  &#123;(1, 2), (7, 8), (2, 1), (8, 7), (12, 11), (11, 12)&#125; </code></pre></code></pre></li></ul></li><li><h5 id="那车水马龙的人世间-那样地来-那样地去-太匆忙”最后一次出现”那”的位置（下标）"><a href="#那车水马龙的人世间-那样地来-那样地去-太匆忙”最后一次出现”那”的位置（下标）" class="headerlink" title="那车水马龙的人世间,那样地来 那样地去,太匆忙”最后一次出现”那”的位置（下标）"></a>那车水马龙的人世间,那样地来 那样地去,太匆忙”最后一次出现”那”的位置（下标）</h5><ul><li><pre><code class="python">suv = &#39;那车水马龙的人世间,那样地来 那样地去,太匆&#39;print(suv.rindex(&#39;那&#39;))<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  15</code></pre></code></pre></li></ul></li><li><h5 id="判断输入的字符串是否是-py-结束"><a href="#判断输入的字符串是否是-py-结束" class="headerlink" title="判断输入的字符串是否是 .py 结束"></a>判断输入的字符串是否是 .py 结束</h5><ul><li><pre><code class="python">s = input(&#39;请输入字符串：&#39;)if s.endswith(&#39;.py&#39;):    print(&#39;是.py结束&#39;)else:    print(&#39;不是&#39;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  请输入字符串：.py  是.py结束</code></pre></code></pre></li></ul></li><li><h5 id="判断一个字符串是否是回文"><a href="#判断一个字符串是否是回文" class="headerlink" title="判断一个字符串是否是回文"></a>判断一个字符串是否是回文</h5><ul><li><pre><code class="python">ss = input(&#39;请输入字符串：&#39;)if ss == ss[::-1]:    print(&#39;是&#39;)else:    print(&#39;不是&#39;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  请输入字符串：323  是</code></pre></code></pre></li></ul></li><li><h5 id="编写代码，实现求100-200里面所有的奇数-20分"><a href="#编写代码，实现求100-200里面所有的奇数-20分" class="headerlink" title="编写代码，实现求100-200里面所有的奇数 (20分)"></a>编写代码，实现求100-200里面所有的奇数 (20分)</h5><ul><li><pre><code class="python">for i in range(101,201,2):    print(i)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  101  103  105  .  .  .  .  .  .  195  197  199</code></pre></code></pre></li></ul></li><li><h5 id="将字符串右移n位-例如-“hello-world”-右移两位后ldhello-wor"><a href="#将字符串右移n位-例如-“hello-world”-右移两位后ldhello-wor" class="headerlink" title="将字符串右移n位,例如 “hello world” 右移两位后ldhello wor"></a>将字符串右移n位,例如 “hello world” 右移两位后ldhello wor</h5><ul><li><pre><code class="python">s = int(input(&#39;请输入右移几位：&#39;))dd = &#39;hello world&#39;ss = dd[-s:] + dd[:-s]print(ss)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  请输入右移几位：2  ldhello wor</code></pre></code></pre></li></ul></li><li><h5 id="请手写一个函数，用来取出1—100（均包含）中3的倍数或者带有数字3的所有整数"><a href="#请手写一个函数，用来取出1—100（均包含）中3的倍数或者带有数字3的所有整数" class="headerlink" title="请手写一个函数，用来取出1—100（均包含）中3的倍数或者带有数字3的所有整数"></a>请手写一个函数，用来取出1—100（均包含）中3的倍数或者带有数字3的所有整数</h5><ul><li><pre><code class="python">for i in range(1,101):    if i % 3 == 0 or &#39;7&#39; in &#39;i&#39;:        print(i)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  3  6  9  12  15  18  .  .  .  .  87  90  93  96  99</code></pre></code></pre></li></ul></li><li><h5 id="a-“aAsmr3idd4bgs7Dlsf9eAF”-请写一个函数，可以打印出该字符串中出现频率最高的字母"><a href="#a-“aAsmr3idd4bgs7Dlsf9eAF”-请写一个函数，可以打印出该字符串中出现频率最高的字母" class="headerlink" title="a = “aAsmr3idd4bgs7Dlsf9eAF” 请写一个函数，可以打印出该字符串中出现频率最高的字母"></a>a = “aAsmr3idd4bgs7Dlsf9eAF” 请写一个函数，可以打印出该字符串中出现频率最高的字母</h5><ul><li><pre><code class="python">def ss(a,d,dd,a1):    for i in a:        if d &lt;= a.count(i):            dd = i            d = a.count(i)        a1.append((d,dd))    a1 = set(a1)    a2 = str(a1)    print(a2)ss(input(&#39;&#39;),0,&#39;&#39;,[])<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  aAsmr3idd4bgs7Dlsf9eAF  &#123;(3, &#39;s&#39;), (1, &#39;a&#39;), (2, &#39;A&#39;)&#125;</code></pre></code></pre></li></ul></li><li><h5 id="某个文件的字节数为102324123499123，写函数利用左移计算该文件按照kb与mb计算得到的大小"><a href="#某个文件的字节数为102324123499123，写函数利用左移计算该文件按照kb与mb计算得到的大小" class="headerlink" title="某个文件的字节数为102324123499123，写函数利用左移计算该文件按照kb与mb计算得到的大小"></a>某个文件的字节数为102324123499123，写函数利用左移计算该文件按照kb与mb计算得到的大小</h5><ul><li><pre><code class="python">def s(a):    d = a / 1024    print(d / 1024,&#39;kb&#39;)    print(d / 1024 / 1024,&#39;mb&#39;)s(102324123499123)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  97583888.52989483 kb  95296.76614247542 mb</code></pre></code></pre></li></ul></li><li><h5 id="str2-“This-is-the-voa-special-English-health-report”-写一个函数，统计字符串中单词出现的个数，注意是单词而不是字母"><a href="#str2-“This-is-the-voa-special-English-health-report”-写一个函数，统计字符串中单词出现的个数，注意是单词而不是字母" class="headerlink" title="str2 = “This is the voa special English,health,report”  写一个函数，统计字符串中单词出现的个数，注意是单词而不是字母"></a>str2 = “This is the voa special English,health,report”  写一个函数，统计字符串中单词出现的个数，注意是单词而不是字母</h5><ul><li><pre><code class="python">def ss(str2):    s = str2.rsplit(&#39; &#39;)    print(len(s))ss(&quot;This is the voa special English,health,report&quot;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  6</code></pre></code></pre></li></ul></li><li><h5 id="s-‘test‘-写一个函数，能将字符串中的网址提取出来，即提取出www-test-com"><a href="#s-‘test‘-写一个函数，能将字符串中的网址提取出来，即提取出www-test-com" class="headerlink" title="s = ‘test‘  写一个函数，能将字符串中的网址提取出来，即提取出www.test.com"></a>s = ‘<a href="www.test.com">test</a>‘  写一个函数，能将字符串中的网址提取出来，即提取出<a href="http://www.test.com/">www.test.com</a></h5><ul><li><pre><code class="python">def ss(s):    d = s.find(&#39;&quot;&#39;)    d1 = s.rfind(&#39;&quot;&#39;)    print(s[d:d1+1])ss(&#39;&lt;a href=&quot;www.test.com&quot;&gt;test&lt;/a&gt;&#39;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  &quot;www.test.com&quot;</code></pre></code></pre></li></ul></li><li><p>请手写一个函数，用来取出1—100（均包含）中6的倍数或者带有数字6的所有整数</p><ul><li><pre><code class="python">def sub():    for i in range(1,101):    if &#39;6&#39; in &#39;i&#39; or i % 6 == 0:            print(i)sub()<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  6  12  18  24  30  36  42  48  54  60  66  72  78  84  90  96</code></pre></code></pre></li></ul></li><li><h5 id="My-str-‘11sdsfsdf45sfxcv67qwe-9’-手写一个函数，计算出字符串中所有数字的和"><a href="#My-str-‘11sdsfsdf45sfxcv67qwe-9’-手写一个函数，计算出字符串中所有数字的和" class="headerlink" title="My_str = ‘11sdsfsdf45sfxcv67qwe_9’ 手写一个函数，计算出字符串中所有数字的和"></a>My_str = ‘11sdsfsdf45sfxcv67qwe_9’ 手写一个函数，计算出字符串中所有数字的和</h5><ul><li><pre><code class="python">def sub(My_str,sum):    for i in My_str:        if i.isdigit():            sum += int(i)    print(sum)sub(&#39;11sdsfsdf45sfxcv67qwe_9&#39;,0)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  33</code></pre></code></pre></li></ul></li><li><h5 id="手写一个函数，将-’hello-xiao-mi’-作为参数输入，函数返回-‘mi-xiao-hello’，注意是单词位置颠倒，而不是字母位置颠倒"><a href="#手写一个函数，将-’hello-xiao-mi’-作为参数输入，函数返回-‘mi-xiao-hello’，注意是单词位置颠倒，而不是字母位置颠倒" class="headerlink" title="手写一个函数，将 ’hello xiao mi’ 作为参数输入，函数返回 ‘mi xiao hello’，注意是单词位置颠倒，而不是字母位置颠倒"></a>手写一个函数，将 ’hello xiao mi’ 作为参数输入，函数返回 ‘mi xiao hello’，注意是单词位置颠倒，而不是字母位置颠倒</h5><ul><li><pre><code class="python">def sub(str):    a = str.split(&#39; &#39;)    a.reverse()    s =&#39; &#39;.join(a)    print(s)sub(&#39;hello xiao mi&#39;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  mi xiao hello</code></pre></code></pre></li></ul></li><li><p>年月日</p><ul><li><pre><code class="python">year = int(input(&quot;请输入年分：&quot;))month = int(input(&quot;请输入月份：&quot;))day = int(input(&quot;请输入日：&quot;))day1 = [31,28,31,30,31,30,31,31,30,31,30,31]if year % 400 == 0 or year % 4 == 0 and year % 100 !=0 :    day1[1]=29i = 0if 12&gt;= month &gt;=1:    while i &lt; month - 1 :        day += day1[i]        i += 1    print(&quot;是一年的第%d天&quot; % day)else:    print(&#39;月份输入错误&#39;)<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  请输入年分：2020  请输入月份：12  请输入日：5  是一年的第340天</code></pre></code></pre></li></ul></li><li><p>99乘法表</p><ul><li><pre><code class="python">i=0while i&lt;9:    j=0    while j&lt;=i:        print(&quot;%d*%d=%d\t&quot;%(j+1, i+1, (j+1)*(i+1)),end=&quot;&quot;)        j+=1    print(&quot;&quot;)    i+=1&#39;&#39;&#39;#一般情况下:#如果i从1开始,那么i&lt;=一个值,那么就循环多少次#如果i从0开始,那么i&lt;一个值,那么就循环多少次i=1while i&lt;=9:    j=1    while j&lt;=i:        print(&quot;%d*%d=%d\t&quot;%(j, i, j*i),end=&quot;&quot;)        j+=1    print(&quot;&quot;)    i+=1<pre class="language-none"><code class="language-none">- 结果  &#96;&#96;&#96;python  1*1&#x3D;1  1*2&#x3D;22*2&#x3D;4  1*3&#x3D;32*3&#x3D;63*3&#x3D;9  1*4&#x3D;42*4&#x3D;83*4&#x3D;124*4&#x3D;16  1*5&#x3D;52*5&#x3D;103*5&#x3D;154*5&#x3D;205*5&#x3D;25  1*6&#x3D;62*6&#x3D;123*6&#x3D;184*6&#x3D;245*6&#x3D;306*6&#x3D;36  1*7&#x3D;72*7&#x3D;143*7&#x3D;214*7&#x3D;285*7&#x3D;356*7&#x3D;427*7&#x3D;49  1*8&#x3D;82*8&#x3D;163*8&#x3D;244*8&#x3D;325*8&#x3D;406*8&#x3D;487*8&#x3D;568*8&#x3D;64  1*9&#x3D;92*9&#x3D;183*9&#x3D;274*9&#x3D;365*9&#x3D;456*9&#x3D;547*9&#x3D;638*9&#x3D;729*9&#x3D;81</code></pre></code></pre></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python基础题&quot;&gt;&lt;a href=&quot;#python基础题&quot; class=&quot;headerlink&quot; title=&quot;python基础题&quot;&gt;&lt;/a&gt;python基础题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;现有一字符串-“卡巴斯基-杀毒软件-免费版-俄罗斯-”-</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
