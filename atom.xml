<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心瘾</title>
  
  
  <link href="https://wyx6.top/atom.xml" rel="self"/>
  
  <link href="https://wyx6.top/"/>
  <updated>2021-04-13T14:13:35.068Z</updated>
  <id>https://wyx6.top/</id>
  
  <author>
    <name>王彦翔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中操作SQLAlchemy</title>
    <link href="https://wyx6.top/Python%E4%B8%AD%E6%93%8D%E4%BD%9CSQLAlchemy/"/>
    <id>https://wyx6.top/Python%E4%B8%AD%E6%93%8D%E4%BD%9CSQLAlchemy/</id>
    <published>2021-04-13T13:56:40.000Z</published>
    <updated>2021-04-13T14:13:35.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python中操作SQLAlchemy"><a href="#Python中操作SQLAlchemy" class="headerlink" title="Python中操作SQLAlchemy"></a>Python中操作SQLAlchemy</h1><h1 id="一、ORM-框架简介"><a href="#一、ORM-框架简介" class="headerlink" title="一、ORM 框架简介"></a>一、ORM 框架简介</h1><p>对象-关系映射（Object/Relation Mapping，简称ORM），是随着面向对象的软件开发方法发展而产生的。面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。</p><h4 id="1-ORM方法论基于三个核心原则："><a href="#1-ORM方法论基于三个核心原则：" class="headerlink" title="1.ORM方法论基于三个核心原则："></a>1.ORM方法论基于三个核心原则：</h4><ul><li>简单性：以最基本的形式建模数据。</li><li>传达性：数据库结构被任何人都能理解的语言文档化。</li><li>精确性：基于数据模型创建正确标准化了的结构。</li></ul><p>面向对象是从软件工程基本原则(如耦合、聚合、封装)的基础上发展起来的，而关系数据库则是从数学理论发展而来的，两套理论存在显著的区别。为了解决这个不匹配的现象,对象关系映射技术应运而生。O/R中字母O起源于”对象”(Object),而R则来自于”关系”(Relational)。几乎所有的程序里面，都存在对象和关系数据库。在业务逻辑层和用户界面层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中。</p><p>当开发一个应用程序的时候(不使用O/R Mapping),可能会写不少数据访问层的代码，用来从数据库保存，删除，读取对象信息，等等。在DAL中写了很多的方法来读取对象数据，改变状态对象等等任务。而这些代码写起来总是重复的。</p><p>如果开你最近的程序，看看DAL代码，肯定会看到很多近似的通用的模式。我们以保存对象的方法为例，传入一个对象，为SqlCommand对象添加SqlParameter，把所有属性和对象对应，设置SqlCommand的CommandText属性为存储过程，然后运行SqlCommand。对于每个对象都要重复的写这些代码。　　除此之外，还有更好的办法吗？有，引入一个O/R Mapping。实质上，一个O/R Mapping会为你生成DAL。与其自己写DAL代码，不如用O/R Mapping。用O/R Mapping保存，删除，读取对象，O/R Mapping负责生成SQL，你只需要关心对象就好。对象关系映射成功运用在不同的面向对象持久层产品中，</p><h4 id="2-一般的ORM包括以下四部分："><a href="#2-一般的ORM包括以下四部分：" class="headerlink" title="2. 一般的ORM包括以下四部分："></a>2. 一般的ORM包括以下四部分：</h4><ul><li>一个对持久类对象进行CRUD操作的API；</li><li>一个语言或API用来规定与类和类属性相关的查询；</li><li>一个规定mapping metadata的工具；</li><li>一种技术可以让ORM的实现同事务对象一起进行dirty checking, lazy association fetching以及其他的优化操作。</li></ul><p>•ORM：及Object-Relational Mapping，把关系数据库的表结构映射到对象上</p><p>•我们先来可能一个例子：</p><p>•如果我们从数据库查出来几条数据，需要你在python中表示出来，如果你没有接触过ORM技术，你或许会使用下面的形式来存储这个数据：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  (<span class="token number">1</span><span class="token punctuation">,</span> ‘feng’)<span class="token punctuation">,</span>  (<span class="token number">2</span><span class="token punctuation">,</span> ‘shang’)<span class="token punctuation">,</span>  (<span class="token number">3</span><span class="token punctuation">,</span> ‘huo’)<span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>如果你想知道表结构是什么样的，是不是就费劲了，如果你想快速的取出其中的元素，就需要听听ORM的思想了。</p><p>数据库中每次查出来的数据都用一个类表示，这个类的属性和数据库中表的字段一一对应。多条数据，就是一个list，每一行数据都是一个类来表示，如下所示：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">__init__</span></span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">[</span>    <span class="token constant">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> “feng”<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token constant">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> “shang”<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token constant">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> “huo”<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>当我们需要获得id，或者name的时候，只需要通过循环获取到对象，直接通过user1.id或者user1.name就可以获取到id和name的属性。并且使得数据的存取非常的规范，这样ORM架构应用而生。</p><h1 id="二、SQLAlchemy介绍"><a href="#二、SQLAlchemy介绍" class="headerlink" title="二、SQLAlchemy介绍"></a>二、SQLAlchemy介绍</h1><p>Python中最有名的ORM架构就是SQLAlchemy，我们主要就是来学习SQLAlchemy的使用</p><h4 id="2-1-安装环境："><a href="#2-1-安装环境：" class="headerlink" title="2.1 安装环境："></a>2.1 安装环境：</h4><pre class="language-undefined" data-language="undefined"><code class="language-undefined">pip install SQLAlchemy</code></pre><h4 id="2-2-安装mysql"><a href="#2-2-安装mysql" class="headerlink" title="2.2 安装mysql"></a>2.2 安装mysql</h4><pre class="language-css" data-language="css"><code class="language-css">yum install mysql-server mysqlservice mysqld restartsysctmctl restart mysql.service</code></pre><h4 id="2-3-创建数据库"><a href="#2-3-创建数据库" class="headerlink" title="2.3 创建数据库"></a>2.3 创建数据库</h4><pre class="language-undefined" data-language="undefined"><code class="language-undefined">create database sqlalchemy;</code></pre><h4 id="2-4-授权"><a href="#2-4-授权" class="headerlink" title="2.4 授权"></a>2.4 授权</h4><pre class="language-bash" data-language="bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'fxq'</span>@<span class="token string">'%'</span> IDENTIFIED BY ‘123456’<span class="token punctuation">;</span></code></pre><h4 id="2-5-初始化连接"><a href="#2-5-初始化连接" class="headerlink" title="2.5 初始化连接"></a>2.5 初始化连接</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engineengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql:// 数据库IP地址'</span><span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>echo参数为True时，会显示每条执行的SQL语句，可以关闭，<br> create_engine()返回一个Engine的实例，并且它表示通过数据库语法处理细节的核心接口，在这种情况下，数据库语法将会被解释成python的类方法。<br> 解释说明：<br> [mysql://fxq:ip<br> mysql:  指定是哪种数据库连接<br> 第一个fxq： 用户名<br> 123456： fxq用户对应的密码<br> 192.168.100.101： 数据库的ip<br> sqlalchemy： 数据库需要连接库的名字</p><h4 id="2-6-创建表格"><a href="#2-6-创建表格" class="headerlink" title="2.6 创建表格"></a>2.6 创建表格</h4><ol><li>主要是通过sql语句来创建表格：</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakersql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''create table student(    id int not null primary key,    name varchar(50),    age int,    address varchar(100));'''</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>conn <span class="token operator">=</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#表示获取到数据库连接。类似我们在MySQLdb中游标course的作用。</span></code></pre><h3 id="通过ORM方式创建表格"><a href="#通过ORM方式创建表格" class="headerlink" title="通过ORM方式创建表格"></a>通过ORM方式创建表格</h3><pre class="language-ruby" data-language="ruby"><code class="language-ruby">from sqlalchemy import create_engine<span class="token punctuation">,</span> <span class="token constant">MetaData</span><span class="token punctuation">,</span> <span class="token constant">Table</span><span class="token punctuation">,</span> <span class="token constant">Column</span><span class="token punctuation">,</span> <span class="token builtin">Integer</span><span class="token punctuation">,</span> <span class="token builtin">String</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>metadata <span class="token operator">=</span> <span class="token constant">MetaData</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span>student <span class="token operator">=</span> <span class="token constant">Table</span><span class="token punctuation">(</span><span class="token string">'student'</span><span class="token punctuation">,</span> metadata<span class="token punctuation">,</span>            <span class="token constant">Column</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token builtin">Integer</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token constant">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token constant">Column</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token constant">Column</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token builtin">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token constant">Column</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span></code></pre><p>以上方式都可以创建数据库表<br> MetaData类主要用于保存表结构，连接字符串等数据，是一个多表共享的对象<br> metadata = MetaData(engine)    #绑定一个数据源的metadata<br> metadata.create_all(engine)         #是来创建表，这个操作是安全的操作，会先判断表是否存在。</p><h3 id="Table类"><a href="#Table类" class="headerlink" title="Table类"></a>Table类</h3><p>构造函数：</p><pre class="language-css" data-language="css"><code class="language-css">Table.__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> metadata<span class="token punctuation">,</span>*args<span class="token punctuation">,</span> **kwargs<span class="token punctuation">)</span></code></pre><p>name    表名<br> metadata      共享的元数据<br> *args Column 是列定义，详见下一节<br> 下面是可变参数 **kwargs 定义<br> schema 此表的结构名称，默认None<br> autoload 自动从现有表中读入表结构，默认False<br> autoload_with 从其他engine读取结构，默认None</p><p>include_columns 如果autoload设置为True，则此项数组中的列明将被引用，没有写的列明将被忽略，None表示所有都列明都引用，默认None<br> mustexist 如果为True，表示这个表必须在其他的python应用中定义，必须是metadata的一部分，默认False<br> useexisting 如果为True，表示这个表必须被其他应用定义过，将忽略结构定义，默认False<br> owner 表所有者，用于Orcal，默认None<br> quote 设置为True，如果表明是SQL关键字，将强制转义，默认False<br> quote_schema  设置为True，如果列明是SQL关键字，将强制转义，默认False<br> mysql_engine  mysql专用，可以设置’InnoDB’或’MyISAM’</p><h3 id="Column类"><a href="#Column类" class="headerlink" title="Column类"></a>Column类</h3><p>构造函数：</p><pre class="language-css" data-language="css"><code class="language-css">Column.__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>  name<span class="token punctuation">,</span>  type_<span class="token punctuation">,</span>  *args<span class="token punctuation">,</span>  **kwargs<span class="token punctuation">)</span></code></pre><p>1、name 列名<br> 2、type_ 类型，更多类型 sqlalchemy.types<br> 3、*args Constraint（约束）,  ForeignKey（外键）,  ColumnDefault（默认）, Sequenceobjects（序列）定义<br> 4、key 列名的别名，默认None<br> 下面是可变参数 **kwargs<br> 5、primary_key 如果为True，则是主键<br> 6、nullable 是否可为Null，默认是True<br> 7、default 默认值，默认是None<br> 8、index 是否是索引，默认是True<br> 9、unique 是否唯一键，默认是False<br> 10、onupdate 指定一个更新时候的值，这个操作是定义在SQLAlchemy中，不是在数据库里的，当更新一条数据时设置，大部分用于updateTime这类字段<br> 11、autoincrement 设置为整型自动增长，只有没有默认值，并且是Integer类型，默认是True<br> 12、quote 如果列明是关键字，则强制转义，默认False</p><h3 id="创建会话："><a href="#创建会话：" class="headerlink" title="创建会话："></a>创建会话：</h3><p>说到数据库，就离不开Session。Session的主要目的是建立与数据库的会话，它维护你加载和关联的所有数据库对象。它是数据库查询（Query）的一个入口。<br> 在Sqlalchemy中，数据库的查询操作是通过Query对象来实现的。而Session提供了创建Query对象的接口。<br> Query对象返回的结果是一组同一映射（Identity Map）对象组成的集合。事实上，集合中的一个对象，对应于数据库表中的一行（即一条记录）。所谓同一映射，是指每个对象有一个唯一的ID。如果两个对象（的引用）ID相同，则认为它们对应的是相同的对象。<br> 要完成数据库查询，就需要建立与数据库的连接。这就需要用到Engine对象。一个Engine可能是关联一个Session对象，也可能关联一个数据库表。<br> 当然Session最重要的功能还是实现原子操作。<br> ORM通过session与数据库建立连接进行通信，如下所示：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerDBSession <span class="token operator">=</span> <span class="token function">sessionmaker</span><span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> <span class="token function">DBSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>通过sessionmake方法创建一个Session工厂，然后在调用工厂的方法来实例化一个Session对象。</p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBsession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBsession<span class="token punctuation">(</span><span class="token punctuation">)</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'ling'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">"beijing"</span><span class="token punctuation">)</span>student2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'molin'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">"jiangxi"</span><span class="token punctuation">)</span>student3 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'karl'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token string">"suzhou"</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>student1<span class="token punctuation">,</span> student2<span class="token punctuation">,</span> student3<span class="token punctuation">]</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询是这个里面最为复杂，最为繁琐的一个步骤。<br> 通过Session的query()方法创建一个查询对象。这个函数的参数数量是可变的，参数可以是任何类或者是类的描述的集合。下面来看一个例子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fengxiaoqing2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_stdent<span class="token punctuation">)</span></code></pre><p>此时我们看到的输出结果是这样的：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token keyword">object</span> at <span class="token number">0x032745F0</span><span class="token operator">></span></code></pre><p>前面我们在赋值的时候，我们可以通过实例化一个对象，然后直接映射到数据库中，那我们在查询出来的数据sqlalchemy直接给映射成一个对象了（或者是每个元素为这种对象的列表），对象和我们创建表时候的class是一致的，我们就也可以直接通过对象的属性就可以直接调用就可以了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"fengxiaoqing2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_stdent<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>my_stdent<span class="token punctuation">.</span>name<span class="token punctuation">,</span>my_stdent<span class="token punctuation">.</span>age<span class="token punctuation">,</span>my_stdent<span class="token punctuation">.</span>address<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">1000311 fengxiaoqing2 182 chengde</code></pre><h3 id="filter-过滤表的条件"><a href="#filter-过滤表的条件" class="headerlink" title="filter()  过滤表的条件"></a>filter()  过滤表的条件</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">"%feng%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_stdent<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class="language-css" data-language="css"><code class="language-css">SELECT student.id AS student_id<span class="token punctuation">,</span> student.name AS student_name<span class="token punctuation">,</span> student.age AS student_age<span class="token punctuation">,</span> student.address AS student_address FROM student WHERE student.name LIKE %s</code></pre><p>根据结果，我们可以看出来<br> filter_by最后的结果就是一个sql语句，我们排错的时候就可以通过这个来排查我们sql是否正确。<br> 以下的这些过滤操作都可以在filter函数中使用：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">equals<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token keyword">not</span> equals<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>id <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span>LIKE<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>“<span class="token operator">%</span>feng<span class="token operator">%</span>”<span class="token punctuation">)</span><span class="token punctuation">)</span>IN<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">in_</span><span class="token punctuation">(</span><span class="token punctuation">[</span>'feng'<span class="token punctuation">,</span> 'xiao'<span class="token punctuation">,</span> 'qing'<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">not</span> <span class="token keyword">in</span><span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">~</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">in_</span><span class="token punctuation">(</span><span class="token punctuation">[</span>'feng'<span class="token punctuation">,</span> 'xiao'<span class="token punctuation">,</span> 'qing'<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>AND<span class="token punctuation">:</span><span class="token keyword">from</span> sqlalchemy import <span class="token return-type class-name">and_</span><span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">and_</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name <span class="token operator">==</span> 'fengxiaoqing'<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>id <span class="token operator">==</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>或者<span class="token function">query</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name <span class="token operator">==</span> 'fengxiaoqing'<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>address <span class="token operator">==</span> 'chengde'<span class="token punctuation">)</span>OR<span class="token punctuation">:</span><span class="token keyword">from</span> sqlalchemy import <span class="token return-type class-name">or_</span>query<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">or_</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name <span class="token operator">==</span> 'fengxiaoqing'<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>age <span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="返回列表-List-和单项-Scalar"><a href="#返回列表-List-和单项-Scalar" class="headerlink" title="返回列表(List)和单项(Scalar)"></a>返回列表(List)和单项(Scalar)</h3><p>all()  返回一个列表</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">"%feng%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_stdent<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>&lt;__main__.Student object at 0x031405B0><span class="token punctuation">,</span> &lt;__main__.Student object at 0x030FCA70><span class="token punctuation">,</span> &lt;__main__.Student object at 0x031405F0><span class="token punctuation">]</span></code></pre><p>可以通过遍历列表来获取每个对象。<br> one()    返回且仅返回一个查询结果。当结果的数量不足一个或者多于一个时会报错。<br> 把上面的all改成one就报错了。<br> first()    返回至多一个结果，而且以单项形式，而不是只有一个元素的tuple形式返回这个结果.</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">"%feng%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_stdent<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token keyword">object</span> at <span class="token number">0x030A3610</span><span class="token operator">></span></code></pre><h3 id="filter-和filter-by-的区别："><a href="#filter-和filter-by-的区别：" class="headerlink" title="filter()和filter_by()的区别："></a>filter()和filter_by()的区别：</h3><p>Filter：  可以像写 sql 的 where 条件那样写 &gt; &lt; 等条件，但引用列名时，需要通过 类名.属性名 的方式。<br> filter_by：  可以使用 python 的正常参数传递方法传递条件，指定列名时，不需要额外指定类名。，参数名对应名类中的属性名，但似乎不能使用 &gt; &lt; 等条件。</p><p>当使用filter的时候条件之间是使用“==”，fitler_by使用的是”=”。</p><pre class="language-objectivec" data-language="objectivec"><code class="language-objectivec">user1 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter_by</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>user1 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>id<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>filter不支持组合查询，只能连续调用filter来变相实现。<br> 而filter_by的参数是**kwargs，直接支持组合查询。<br> 比如：</p><pre class="language-swift" data-language="swift"><code class="language-swift">q <span class="token operator">=</span> sess<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token constant">IS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token constant">IS</span><span class="token punctuation">.</span>node <span class="token operator">==</span> node and <span class="token constant">IS</span><span class="token punctuation">.</span>password <span class="token operator">==</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-9-更新"><a href="#2-9-更新" class="headerlink" title="2.9 更新"></a>2.9 更新</h3><p>更新就是查出来，直接更改就可以了</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>my_stdent<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"fengxiaoqing"</span>my_stdent<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">"chengde"</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> student1<span class="token punctuation">.</span>address<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">MariaDB</span> <span class="token punctuation">[</span>sqlalchemy<span class="token punctuation">]</span><span class="token operator">></span> select <span class="token operator">*</span> from student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id      <span class="token operator">|</span> name          <span class="token operator">|</span> age  <span class="token operator">|</span> address <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> molin         <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> jiangxi <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> karl          <span class="token operator">|</span>   <span class="token number">16</span> <span class="token operator">|</span> suzhou  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">100011</span> <span class="token operator">|</span> fengxiaoqing  <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">100021</span> <span class="token operator">|</span> fengxiaqing1  <span class="token operator">|</span>  <span class="token number">181</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1000111</span> <span class="token operator">|</span> fengxiaoqing  <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1000211</span> <span class="token operator">|</span> fengxiaqing1  <span class="token operator">|</span>  <span class="token number">181</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1000311</span> <span class="token operator">|</span> fengxiaoqing2 <span class="token operator">|</span>  <span class="token number">182</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">7</span> rows <span class="token keyword">in</span> set <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token constant">MariaDB</span> <span class="token punctuation">[</span>sqlalchemy<span class="token punctuation">]</span><span class="token operator">></span> select <span class="token operator">*</span> from student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id      <span class="token operator">|</span> name          <span class="token operator">|</span> age  <span class="token operator">|</span> address <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>    <span class="token number">1002</span> <span class="token operator">|</span> fengxiaoqing  <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">1003</span> <span class="token operator">|</span> karl          <span class="token operator">|</span>   <span class="token number">16</span> <span class="token operator">|</span> suzhou  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">100011</span> <span class="token operator">|</span> fengxiaoqing  <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">100021</span> <span class="token operator">|</span> fengxiaqing1  <span class="token operator">|</span>  <span class="token number">181</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1000111</span> <span class="token operator">|</span> fengxiaoqing  <span class="token operator">|</span>   <span class="token number">18</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1000211</span> <span class="token operator">|</span> fengxiaqing1  <span class="token operator">|</span>  <span class="token number">181</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1000311</span> <span class="token operator">|</span> fengxiaoqing2 <span class="token operator">|</span>  <span class="token number">182</span> <span class="token operator">|</span> chengde <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">7</span> rows <span class="token keyword">in</span> set <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token constant">MariaDB</span> <span class="token punctuation">[</span>sqlalchemy<span class="token punctuation">]</span><span class="token operator">></span> </code></pre><h3 id="2-10-删除"><a href="#2-10-删除" class="headerlink" title="2.10 删除"></a>2.10 删除</h3><p>删除其实也是跟查询相关的，直接查出来，调用delete()方法直接就可以删除掉。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-11-统计、分组、排序"><a href="#2-11-统计、分组、排序" class="headerlink" title="2.11 统计、分组、排序"></a>2.11 统计、分组、排序</h3><p>#######统计count()</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">"%feng%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="分组-group-by"><a href="#分组-group-by" class="headerlink" title="分组 group_by()"></a>分组 group_by()</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>std_group_by <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span>group_by<span class="token punctuation">(</span>Student<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>std_group_by<span class="token punctuation">)</span></code></pre><p>结果的sql语句如下：</p><pre class="language-css" data-language="css"><code class="language-css">SELECT student.id AS student_id<span class="token punctuation">,</span> student.name AS student_name<span class="token punctuation">,</span> student.age AS student_age<span class="token punctuation">,</span> student.address AS student_address FROM student GROUP BY student.age</code></pre><h6 id="排序-order-by-反序在order-by里面用desc-方法"><a href="#排序-order-by-反序在order-by里面用desc-方法" class="headerlink" title="排序 order_by()     反序在order_by里面用desc()方法"></a>排序 order_by()     反序在order_by里面用desc()方法</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Integer<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmakerBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'student'</span>    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>    address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql:// 数据库IP地址'</span><span class="token punctuation">)</span>DBSession <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>std_ord_desc <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">.</span>like<span class="token punctuation">(</span><span class="token string">"%feng%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> std_ord_desc<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span></code></pre><h6 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h6><pre class="language-undefined" data-language="undefined"><code class="language-undefined">1000311100021110001111000211000111002</code></pre>]]></content>
    
    
    <summary type="html">知之者不如好之者，好之者不如乐之者</summary>
    
    
    
    <category term="python" scheme="https://wyx6.top/categories/python/"/>
    
    <category term="ORM" scheme="https://wyx6.top/categories/python/ORM/"/>
    
    <category term="SQLAlchemy" scheme="https://wyx6.top/categories/python/ORM/SQLAlchemy/"/>
    
    
    <category term="python" scheme="https://wyx6.top/tags/python/"/>
    
    <category term="SQLAlchemy" scheme="https://wyx6.top/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>pandas进阶操作-计算-方法</title>
    <link href="https://wyx6.top/pandas%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C-%E8%AE%A1%E7%AE%97/"/>
    <id>https://wyx6.top/pandas%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C-%E8%AE%A1%E7%AE%97/</id>
    <published>2021-04-05T07:16:59.000Z</published>
    <updated>2021-04-12T13:52:03.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>pandas是对数据的操作 那肯定少不了计算 下面就让我们学习下pandas的计算、以及常用方法</p><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot_table.html?highlight=pivot_tables">不会点这里  官方文档</a></p><h1 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h1><h2 id="注意俩个问题"><a href="#注意俩个问题" class="headerlink" title="注意俩个问题"></a>注意俩个问题</h2><img src="https://img-blog.csdnimg.cn/20210405152043225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="对空值处理"><a href="#对空值处理" class="headerlink" title="对空值处理"></a>对空值处理</h3><img src="https://img-blog.csdnimg.cn/20210405152053997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210405152124564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p>inf = infinity(无穷大)</p><pre class="language-none"><code class="language-none">pd.options.mode.use_inf_as_na &#x3D; True  # 默认为Flase</code></pre><p>设置之后无穷大的值就会变为NaN</p><img src="https://img-blog.csdnimg.cn/20210405152450803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># pd.options.mode.use_inf_as_na = True</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>NaN<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 不是我们想要的结果 展示的是NaN</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 不是我们想要的结果 展示的是NaN</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">-</span> df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 不是我们想要的结果 展示的是NaN</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">*</span> df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 不是我们想要的结果 展示的是NaN</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210405152736187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p>使用fillna(0)方法 补充空值为0</p><p>使用add()是 + </p><p>使用sub()是 - </p><p>使用mul()是 *</p><p>使用div()是  / </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 我们使用fillna()方法发现 NaN没有了 </span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 使用add()是 + 都会把空值当0 </span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 使用sub()是 -  都会把空值当0 </span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 使用mul()是 * 都会把空值当0 </span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mul<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 使用div()是 / 都会把空值当0 显示了无穷大</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>div<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 结果是 无穷大 负无穷大 NaN</span>s <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>div<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># True False False</span><span class="token comment"># s == np.inf</span><span class="token comment"># False True False</span>s <span class="token operator">==</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>inf<span class="token comment">#%%</span><span class="token comment"># 当我们取消注释 # pd.options.mode.use_inf_as_na = True 发现没有无穷大的展示了 都变为了NaN</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>div<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/2021040515295099.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210405153608430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="计算操作中-index-不对齐的情况"><a href="#计算操作中-index-不对齐的情况" class="headerlink" title="计算操作中 index 不对齐的情况"></a>计算操作中 index 不对齐的情况</h1><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>这里演示加的方法 其它同理</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  计算操作中 Series 的 index 不对齐的情况</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1<span class="token comment">#%%</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2<span class="token comment">#%%</span><span class="token comment"># 这俩种的调用发放都是一样的</span><span class="token comment"># 这时候索引没对齐 展示的都是空值 NaN</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token comment"># pd.Series.add(s1, s2)</span><span class="token comment">#%%</span><span class="token comment"># 我们使用fill_value=0 让空值补为0 这样就是 1 + 0 和 10 + 0了结果就是 1 22 10</span><span class="token comment"># 新的Series索引为俩个Series的并集</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s2<span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/2021040515442210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>这里演示加的方法 其它同理</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  .add .sub .mul .div</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1<span class="token comment">#%%</span><span class="token comment"># 简单的相加 行列索引对齐就是 1+1 2+2 3+3 4+4</span><span class="token comment"># df1.add(df1)</span><span class="token comment">#%%</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2<span class="token comment">#%%</span><span class="token comment"># # 只有俩个索引一致 行B 列Y 只有[Y,B]有值 其它为NaN</span>df1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 使用fill_value补充NaN为0  在进行运算</span><span class="token comment"># 新的DataFrame索引取并集</span>df1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>df2<span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210405155012916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="MultiIndex-多层索引"><a href="#MultiIndex-多层索引" class="headerlink" title="MultiIndex 多层索引"></a>MultiIndex 多层索引</h2><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/F002_computations_extension/jd_tb.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  计算操作 MultiIndex 多层索引</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'jd_tb.xlsx'</span><span class="token punctuation">,</span>    header<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 输出行索引</span>df<span class="token punctuation">.</span>columns<span class="token comment">#%%</span><span class="token comment"># 销量加销量 1+4 5+7 结果是Series</span><span class="token comment"># 注意格式 [()]</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'京东'</span><span class="token punctuation">,</span> <span class="token string">'销量'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'淘宝'</span><span class="token punctuation">,</span> <span class="token string">'销量'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 俩个DataFrame相机 结果就是DataFrame</span>df_total <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'京东'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'淘宝'</span><span class="token punctuation">]</span>df_total<span class="token comment">#%% </span><span class="token comment"># 在上面在加一个索引 MultiIndex成为多层索引 注意格式传入[[]]</span><span class="token comment"># df_total.columns是可迭代对象就可以</span>df_total<span class="token punctuation">.</span>columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_product<span class="token punctuation">(</span>    <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">'总'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        df_total<span class="token punctuation">.</span>columns    <span class="token punctuation">]</span><span class="token punctuation">)</span>df_total<span class="token comment">#%%</span><span class="token comment"># 我们进行拼接 使用join 根据行索引进行左右拼接</span>df<span class="token punctuation">.</span>join<span class="token punctuation">(</span>df_total<span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/2021040515570471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210405155807810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="String-Dtype类型"><a href="#String-Dtype类型" class="headerlink" title="String-Dtype类型"></a>String-Dtype类型</h1><p>convert_dtypes()将列转换为最有可能的类型</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token triple-quoted-string string">"""XY0ab1c1"""</span><span class="token comment">#%%</span><span class="token comment"># 查看数据类型 都是object类型</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># convert_dtypes() 将列转换为最有可能的类型</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>convert_dtypes<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 只选择string类型的列</span>df<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 默认object类型</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定类型</span><span class="token comment"># pd.Series(['a', 'b'], dtype='string')</span><span class="token comment"># 如果有数字这样 转换类型</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定类型</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>pd<span class="token punctuation">.</span>StringDtype<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 转换类型 </span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token comment">#%%</span></code></pre><img src="https://img-blog.csdnimg.cn/2021040516161619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="pandas查看数据的基本信息"><a href="#pandas查看数据的基本信息" class="headerlink" title="pandas查看数据的基本信息"></a>pandas查看数据的基本信息</h1><h2 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h2><img src="https://img-blog.csdnimg.cn/20210406213221430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406214210712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'tips.csv'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>values<span class="token comment">#%%</span>df<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>shape<span class="token comment">#%%</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>index<span class="token comment">#%%</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># pd.options.display.max_columns=3</span><span class="token comment"># pd.options.display.max_rows=5</span><span class="token comment"># df = pd.read_csv('tips.csv')</span><span class="token comment"># df</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>dtypes</code></pre><h2 id="Series-1"><a href="#Series-1" class="headerlink" title="Series"></a>Series</h2><img src="https://img-blog.csdnimg.cn/20210406213638214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p><img src="https://img-blog.csdnimg.cn/20210406213953668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/2021040621390385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406214042451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    name<span class="token operator">=</span><span class="token string">'AAA'</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span>s<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>name<span class="token comment">#%%</span>s<span class="token punctuation">.</span>dtype<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    name<span class="token operator">=</span><span class="token string">'AAA'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token comment">#%%</span>s<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>is_unique<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    name<span class="token operator">=</span><span class="token string">'goods_id'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> s<span class="token punctuation">.</span>is_unique<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment"># None, pd.NA, pd.NaT</span>     <span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>notna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token builtin">all</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>notna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>NaN<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>s1 <span class="token operator">+</span> s2</code></pre><h1 id="missing-data-缺失值"><a href="#missing-data-缺失值" class="headerlink" title="missing data 缺失值"></a>missing data 缺失值</h1><img src="https://img-blog.csdnimg.cn/20210411164545957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="检测空值-isna-、notna-、isnull-、notnull"><a href="#检测空值-isna-、notna-、isnull-、notnull" class="headerlink" title="检测空值 isna()、notna()、isnull()、notnull()"></a>检测空值 isna()、notna()、isnull()、notnull()</h2><img src="https://img-blog.csdnimg.cn/20210411164820575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411164814925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><img src="https://img-blog.csdnimg.cn/20210412195839996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/E002_isna_notna/isna_notna.xlsx">下载</a></p><h3 id="代码实例-用到方法"><a href="#代码实例-用到方法" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h3><p>isna()</p><p>notna()</p><p>isnull()</p><p>notnull()</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'isna_notna.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>notna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># df.isnull()</span><span class="token comment">#%%</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210411165145754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="删除缺失值-dropna"><a href="#删除缺失值-dropna" class="headerlink" title="删除缺失值 dropna()"></a>删除缺失值 dropna()</h2><img src="https://img-blog.csdnimg.cn/20210411170050391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="代码实例-用到方法-1"><a href="#代码实例-用到方法-1" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h3><p>Series.dropna( self , inplace = True )  </p><ul><li>inplace 代表是否原地修改 默认False不修改</li></ul><p>DataFrame.dropna( self, axis = 0, how = ‘all’, subset = None, inplace = False ) </p><ul><li>axis 指定行或列 0=行 1=列</li><li>how <ul><li>all 只有那一行全部为空值才进行删除</li><li>any 只要那一行有空值 无论单个还是多个 都删除</li></ul></li><li>subset  检测所有的列  可以传入一个列表 [‘A’,’C’] 只观察A C列 如果axis=1 那么观察 A C行</li><li>inplace  代表是否原地修改 默认False不修改</li></ul><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/E003_dropna/dropna.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 删除了下标为 1 的行 因为有空值</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># s.dropna(inplace=True)</span><span class="token comment">#%%</span><span class="token comment"># 这时没有被修改 如果inplace=True 那么就被修改了 或者向上边一样重新赋值</span>s<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'dropna.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># df.dropna() 默认删除 有空值的 下标为 0 1的行</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>    axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    how<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>    subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df</code></pre><img src="https://img-blog.csdnimg.cn/2021041117173569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="填充缺失值-fillna"><a href="#填充缺失值-fillna" class="headerlink" title="填充缺失值 fillna()"></a>填充缺失值 fillna()</h2><img src="https://img-blog.csdnimg.cn/20210411172811817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411174104489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="代码实例-用到方法-2"><a href="#代码实例-用到方法-2" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h3><p>Series.fillna( self, value = None, method = None, inplace = False )</p><p><code>注意：value和method必须传一个 而且只能传一个</code></p><ul><li>value 可以传入标量、字典、Series</li><li>method<ul><li>fill （forward向前的意思） 向前查找填充</li><li>bfill （back向后的意思） 向后查找填充</li></ul></li><li>inplace 代表是否原地修改 默认False不修改</li></ul><p>DataFrame.fillna( self, value = None, method = None, axis = 0 , inplace = False )</p><ul><li>value 可以传入标量、字典、DataFrame</li><li>method<ul><li>fill （forward向前的意思） 向前查找填充</li><li>bfill （back向后的意思） 向后查找填充</li></ul></li><li>axis  = 0的话会垂直查找 =1的话就横向查找 </li><li>inplace 代表是否原地修改 默认False不修改</li></ul><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/E004_fillna/fillna.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 空值补充为0</span><span class="token comment"># s.fillna(0)</span><span class="token comment">#%%</span><span class="token comment"># 字典格式填充</span><span class="token comment"># s.fillna(&#123;0: 100, 1: 200&#125;)</span><span class="token comment">#%%</span>s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>s1<span class="token comment">#%%</span><span class="token comment"># 传入Series</span>s<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定以前填充</span>s<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定以后填充</span>s<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'fillna.xlsx'</span><span class="token punctuation">)</span>df1<span class="token comment">#%%</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'fillna.xlsx'</span><span class="token punctuation">,</span>    sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>df2<span class="token comment">#%%</span><span class="token comment"># 空值补充0</span>df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 传入字典</span>df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 传入DataFrame</span>df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 默认 垂直方向 向前查找</span>df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定axis为1 水平方向查找 向后查找</span>df1<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">,</span>           axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span></code></pre><div class="row">    <embed src="fillna.pdf" width="100%" height="550" type="application/pdf"></div> <h2 id="填充缺失值-之-线性插值-interpolate"><a href="#填充缺失值-之-线性插值-interpolate" class="headerlink" title="填充缺失值 之 线性插值 interpolate()"></a>填充缺失值 之 线性插值 interpolate()</h2><img src="https://img-blog.csdnimg.cn/20210412200036920.gif" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>     <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 补充</span>s<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 默认是0 纵向的</span>df<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 横向的</span>df<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210411194349192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411194428924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="数据透视表-pivot-pivot-table"><a href="#数据透视表-pivot-pivot-table" class="headerlink" title="数据透视表    pivot()  pivot_table()"></a>数据透视表    <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html?highlight=pivot#pandas.DataFrame.pivot">pivot()</a>  <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot_table.html?highlight=pivot_tables">pivot_table()</a></h1><img src="https://img-blog.csdnimg.cn/20210411200423240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="\pivot.gif" alt="pivot" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/202104112002556.gif" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="代码实例-用到方法-3"><a href="#代码实例-用到方法-3" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h2><p>pd.pivot(df,index=’年份’,columns=’平台’,values=’销量’) <strong>都可以传入列表</strong></p><ul><li>index 指定列索引  唯一 就算重复也会只展示一个</li><li>columns 指定行索引 唯一 就算重复也会只展示一个</li><li>values 一般都是数值 int和float 不可索引重复</li></ul><p>pd.pivot_table(df,index=’年份’,columns=’平台’,values=’销量’,aggfunc=’min’) <strong>都可以传入列表</strong></p><ul><li>index 指定列索引  唯一 就算重复也会只展示一个</li><li>columns 指定行索引 唯一 就算重复也会只展示一个</li><li>values 一般都是数值 int和float 索引可重复 是列表格式的</li><li>aggfunc 可以进行聚合函数进行运算 求和 sum  求最大值传入字符串”max” 求平均值传入字符串 “mean”  求最小值传入字符串 “min”  <ul><li>还可以传入列表 根据不同的数据进行不同的计算</li></ul></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'年份'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'平台'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'京东'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">,</span> <span class="token string">'京东'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'销量'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span>df<span class="token punctuation">,</span>         index<span class="token operator">=</span><span class="token string">'年份'</span><span class="token punctuation">,</span>         columns<span class="token operator">=</span><span class="token string">'平台'</span><span class="token punctuation">,</span>         values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'年份'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'平台'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'京东'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">,</span> <span class="token string">'京东'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">,</span> <span class="token string">'淘宝'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'销量'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df1<span class="token comment">#%%</span><span class="token comment"># 重复 不可索引</span>pd<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>         index<span class="token operator">=</span><span class="token string">'年份'</span><span class="token punctuation">,</span>         columns<span class="token operator">=</span><span class="token string">'平台'</span><span class="token punctuation">,</span>         values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>         index<span class="token operator">=</span><span class="token string">'年份'</span><span class="token punctuation">,</span>         columns<span class="token operator">=</span><span class="token string">'平台'</span><span class="token punctuation">,</span>         values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>        aggfunc<span class="token operator">=</span><span class="token string">'min'</span><span class="token punctuation">)</span><span class="token comment">#%%</span></code></pre><img src="https://img-blog.csdnimg.cn/20210411200641755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411200710370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="pivot-table-详细用法"><a href="#pivot-table-详细用法" class="headerlink" title="pivot_table()详细用法"></a>pivot_table()详细用法</h2><ul><li>aggfunc: aggregate function<ul><li>聚合函数<ul><li>​    求和:   sum, ‘sum’, np.sum</li><li>​    求均值: ‘mean’, np.mean(默认)</li><li>​    最大值: max, ‘max’, np.max</li><li>​    最小值: min, ‘min’, np.min</li><li>​    数量:   ‘count’</li></ul></li></ul></li></ul><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/J002_pivot_1/2019%E9%94%80%E5%94%AE%E6%80%BB%E8%A1%A8.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token triple-quoted-string string">"""aggfunc: aggregate function         聚合函数    求和:   sum, 'sum', np.sum    求均值: 'mean', np.mean(默认)    最大值: max, 'max', np.max    最小值: min, 'min', np.min    数量:   'count'"""</span><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'2019销售总表.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert_dtypes<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 默认查看平均值 aggfunc=sum是查看总销量</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token string">'货号'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 求总量和平均值</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token string">'货号'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">sum</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token string">'货号'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">,</span> <span class="token string">'实收金额'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 销量的总数 实收金额的平均值</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token string">'货号'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">,</span> <span class="token string">'实收金额'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token punctuation">&#123;</span>       <span class="token string">'销量'</span><span class="token punctuation">:</span> <span class="token builtin">sum</span><span class="token punctuation">,</span>       <span class="token string">'实收金额'</span><span class="token punctuation">:</span> <span class="token string">'mean'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 返回多层索引</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'货号'</span><span class="token punctuation">,</span> <span class="token string">'尺码'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token string">'平台'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 根据日期的季度 df['日期'].dt.quarter 一年有四个季度 1234 每三个月为一个季度</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'货号'</span><span class="token punctuation">,</span> <span class="token string">'尺码'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token string">'平台'</span><span class="token punctuation">,</span>        df<span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>quarter<span class="token punctuation">]</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token comment">#%%</span></code></pre><div class="row">    <embed src="pivot_table.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="排序sort-index-amp-sort-values"><a href="#排序sort-index-amp-sort-values" class="headerlink" title="排序sort_index()&amp;sort_values()"></a>排序sort_index()&amp;sort_values()</h1><p><code>注意：中文为utf-8编码排序 图片错误</code></p><img src="https://img-blog.csdnimg.cn/20210411213508906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411214046505.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411214046528.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411214047766.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="代码实例-用到方法-4"><a href="#代码实例-用到方法-4" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h2><p>df.sort_index(ascending=False)</p><ul><li>ascending=False 降序 默认True升序</li></ul><p>df.sort_values(‘索引’, ascending=False)</p><ul><li>ascending=False 降序 默认True升序</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%%</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    data<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 默认axis=0 行索引</span>df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># ascending默认为True 为False时降序</span>df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 根据列索引排序</span>df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 根据值排序</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 降序</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 对列进行排序</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210412214851547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210411214428576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="扩展排序CategoricalDtype-减少内存-自定义排序"><a href="#扩展排序CategoricalDtype-减少内存-自定义排序" class="headerlink" title="扩展排序CategoricalDtype  减少内存 自定义排序"></a>扩展排序CategoricalDtype  减少内存 自定义排序</h1><img src="https://img-blog.csdnimg.cn/20210411215154930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="代码实例-用到方法-5"><a href="#代码实例-用到方法-5" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h2><p>df[‘季节’].memory_usage()  查看使用的内存</p><p>tb.index.str.encode(‘utf-8’)查看中文的utf-8编码 16进制的 看看怎么排序中文的</p><p>my_type = pd.CategoricalDtype(categories=[‘春季’, ‘夏季’, ‘秋季’, ‘冬季’, ‘四季’],ordered=True)</p><ul><li>categories=[]  自定义排序</li><li>ordered=True  否则不生效</li></ul><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/K002_sort_CategoricalDtype/2019%E9%94%80%E5%94%AE%E6%80%BB%E8%A1%A8.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'2019销售总表.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert_dtypes<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 查看占用内存  10万多</span>df<span class="token punctuation">[</span><span class="token string">'季节'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 计算每个季节销量的和</span>tb <span class="token operator">=</span> pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token string">'季节'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">)</span>tb<span class="token comment">#%%</span><span class="token comment"># 排序 发现然并卵</span>tb<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看中文排序utf-8 16进制</span>tb<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 自定义排序类型</span>my_type <span class="token operator">=</span> pd<span class="token punctuation">.</span>CategoricalDtype<span class="token punctuation">(</span>    categories<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'春季'</span><span class="token punctuation">,</span> <span class="token string">'夏季'</span><span class="token punctuation">,</span> <span class="token string">'秋季'</span><span class="token punctuation">,</span> <span class="token string">'冬季'</span><span class="token punctuation">,</span> <span class="token string">'四季'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    ordered<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>my_type<span class="token comment">#%%</span><span class="token comment"># 修改季节的类型 为我么自定义的</span>df<span class="token punctuation">[</span><span class="token string">'季节'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'季节'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>my_type<span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 查看占用内存 一万多</span>df<span class="token punctuation">[</span><span class="token string">'季节'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>tb1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    df<span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token string">'季节'</span><span class="token punctuation">,</span>    values<span class="token operator">=</span><span class="token string">'销量'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">)</span>tb1<span class="token comment">#%%</span><span class="token comment"># CategoricalIndex(['春季', '夏季', '秋季', '冬季', '四季'], categories=['春季', '夏季', '秋季', '冬季', '四季'], ordered=True, name='季# 节', dtype='category')</span>tb1<span class="token punctuation">.</span>index</code></pre><div class="row">    <embed src="CategoricalDtype.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="百分比变化-pct-change"><a href="#百分比变化-pct-change" class="headerlink" title="百分比变化 pct_change()"></a>百分比变化 pct_change()</h1><p>Series/DataFrame/GroupBy</p><p>pct_change() (Percentage change) 百分比变化</p><ul><li><p>periods: 偏移量</p></li><li><p>freq: 频率(时间索引)</p><ul><li>“D”, “W”, “M”, “MS”, “B”</li><li>DateOffset, Timedelta</li></ul></li><li><p>limit: 最多连续填充空值个数</p></li></ul><h2 id="代码实例-用到方法-6"><a href="#代码实例-用到方法-6" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h2><p>s.pct_change()</p><ul><li><p>periods 偏移量</p></li><li><p>limit  最多连续填充空值个数</p></li><li><p>freq根据时间索引计算百分比  <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases">点击查看<code>date_range</code>详情</a></p></li><li><p>axis 默认axis=0上下 也就是列索引 axis=1时列索引 是左右</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 今天/昨天-1 计算百分比</span>s<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 今天/前天-1 计算百分比</span>s<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span>periods<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 补充一次空值</span>s<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span>limit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 补充2次空值</span>s<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 创建索引 20200101起始 20200131结束 freq='D' 天</span>index <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>    <span class="token string">'20200101'</span><span class="token punctuation">,</span>    <span class="token string">'20200131'</span><span class="token punctuation">,</span>    freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>index<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 相比较七天前的百分比</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span>    freq<span class="token operator">=</span><span class="token string">'7D'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># B就是工作日的意思 </span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span>    freq<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">)</span>df</code></pre><div class="row">    <embed src="pct_change.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="set-index-把已有列设置成index"><a href="#set-index-把已有列设置成index" class="headerlink" title="set_index()把已有列设置成index"></a>set_index()把已有列设置成index</h1><img src="https://img-blog.csdnimg.cn/20210412215017425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="代码实例-用到方法-7"><a href="#代码实例-用到方法-7" class="headerlink" title="代码实例 用到方法"></a>代码实例 用到方法</h2><p>df.set_index( ‘A’)   可以传入列表</p><ul><li><p>drop 是否删除用作新索引的列  默认为True   False的话就会保留</p></li><li><p>append 默认False 是否将新索引追加到原有的索引 True的话双层索引</p></li><li><p>inplace 默认False 是否将修改运用到原数据 使用的话就不需要重新赋值了</p></li><li><p>verify_integrity  检查新索引是否有重复  有重复会报错</p><pre class="language-python" data-language="python"><code class="language-python">ValueError<span class="token punctuation">:</span> Index has duplicate keys<span class="token punctuation">:</span> Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">)</span></code></pre></li></ul><p>指定某一列或多列为新索引</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    data<span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 没有原地修改 返回修改后的</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 传入列表</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 不删除新索引的原数据</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 将新索引追加到原有的索引</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> append<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># df.set_index('A', inplace=True)</span><span class="token comment"># df</span><span class="token comment">#%%</span><span class="token comment"># 检查新索引是否有重复 </span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> verify_integrity<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/2021041220154249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210412201746224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="reset-index-重置-index"><a href="#reset-index-重置-index" class="headerlink" title="reset_index() 重置 index"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reset_index.html?highlight=reset_index#pandas.DataFrame.reset_index">reset_index() 重置 index</a></h1><img src="https://img-blog.csdnimg.cn/20210412205155908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="代码实例-用到方法-8"><a href="#代码实例-用到方法-8" class="headerlink" title="代码实例  用到方法"></a>代码实例  用到方法</h2><p>df.reset_index()</p><ul><li>drop  是否丢弃原索引 默认False</li><li>level  设置第几层为索引</li><li>col_level</li><li>col_fill</li><li>inplace 默认False 是否将修改运用到原数据 使用的话就不需要重新赋值了</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># df.index.name = 'B'</span>df<span class="token comment">#%%</span><span class="token comment"># 重置索引  name=index</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 重置索引 丢弃原数据</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 创建多层索引数据</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    index<span class="token operator">=</span>pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_tuples<span class="token punctuation">(</span>        <span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 我们发现是俩层索引</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment">#df.reset_index() 发现索引为 0 1 2 原来的索引为 level_1  level_2</span><span class="token comment"># drop=True的话就会把俩层索引丢掉 为 0 1 2</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 重置了第0层为新的列  索引为 123 name=level_0</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 重置了第1层为新的列 索引为 xyz name=level_0</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 俩层列索引的df</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 行索引设置为第0层 name=index</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>col_level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 行索引设置为第1层 name=index</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>col_level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 第0层 index 第1层为空填充C</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>col_level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> col_fill<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 第0层 index 第1层为空填充 index</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>col_level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> col_fill<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></code></pre><div class="row">    <embed src="reset_index.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="reindex-使-Series-DataFrame-符合指定的索引"><a href="#reindex-使-Series-DataFrame-符合指定的索引" class="headerlink" title="reindex() 使 Series/DataFrame 符合指定的索引"></a>reindex() 使 Series/DataFrame 符合指定的索引</h1><img src="https://img-blog.csdnimg.cn/20210412212040429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210412212504187.gif" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="代码实例-使用方法"><a href="#代码实例-使用方法" class="headerlink" title="代码实例  使用方法"></a>代码实例  使用方法</h2><p>df.reindex([‘Z’, ‘Y’])  默认行索引  如果没有补为空值NaN</p><ul><li>index  修改行索引</li><li>columns  修改列索引</li><li>axis  =1 时为列索引  =0时行索引</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 默认行索引</span>df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定行索引</span>df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定行索引</span>df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定列索引</span>df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定列索引</span>df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 取出为Series对象</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 不需要指定值 直接指定就可以了</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><div class="row">    <embed src="reindex.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="reindex-like-符合指定索引"><a href="#reindex-like-符合指定索引" class="headerlink" title="reindex_like()符合指定索引"></a>reindex_like()符合指定索引</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># reindex_like()</span><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1<span class="token comment">#%%</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2<span class="token comment">#%%</span><span class="token comment"># 使用df2的数据 使用df1的索引</span>df2<span class="token punctuation">.</span>reindex_like<span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token comment">#%%</span></code></pre><img src="https://img-blog.csdnimg.cn/20210412213235359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="rename-重命名索引"><a href="#rename-重命名索引" class="headerlink" title="rename()重命名索引"></a>rename()重命名索引</h1><h2 id="代码实例-用到方法-9"><a href="#代码实例-用到方法-9" class="headerlink" title="代码实例  用到方法"></a>代码实例  用到方法</h2><p>df.rename(columns={‘A’: ‘AA’, ‘B’: ‘BB’})  还可以传入函数</p><ul><li>index  修改行索引</li><li>columns  修改列索引</li><li>axis  =1 时为列索引  =0时行索引</li><li>inplace 默认False 是否将修改运用到原数据 使用的话就不需要重新赋值了</li><li>level 重命名多层索引</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># rename() 重命名索引</span><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 创建列行引为1层 行索引为2层的df</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_tuples<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 修改列索引为AA BB 传入dict 俩层A都被修改</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 同理 修改列索引 俩层A都被修改</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 修改多层列索引 指定level为1 修改为AA BB 只修改第1层 下标0起始</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'AA'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>          level<span class="token operator">=</span><span class="token number">1</span>          <span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 修改行索引为 00</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'00'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看行索引 类型</span>df<span class="token punctuation">.</span>index<span class="token comment">#%%</span><span class="token comment"># 传入函数 修改为str类型 并且原地修改</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 再次查看index</span>df<span class="token punctuation">.</span>index</code></pre><div class="row">    <embed src="rename.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">居安思危，思则有备，有备无患</summary>
    
    
    
    <category term="python" scheme="https://wyx6.top/categories/python/"/>
    
    <category term="数据分析" scheme="https://wyx6.top/categories/python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="pandas" scheme="https://wyx6.top/categories/python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/pandas/"/>
    
    
    <category term="python" scheme="https://wyx6.top/tags/python/"/>
    
    <category term="数据分析" scheme="https://wyx6.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="pandas" scheme="https://wyx6.top/tags/pandas/"/>
    
    <category term="pandas计算" scheme="https://wyx6.top/tags/pandas%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>数据分析-pandas进阶操作</title>
    <link href="https://wyx6.top/pandas%E8%BF%9B%E9%98%B6/"/>
    <id>https://wyx6.top/pandas%E8%BF%9B%E9%98%B6/</id>
    <published>2021-03-25T12:18:30.000Z</published>
    <updated>2021-04-06T13:47:02.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas俩个数据结构-Series-amp-DataFrame"><a href="#pandas俩个数据结构-Series-amp-DataFrame" class="headerlink" title="pandas俩个数据结构 Series &amp; DataFrame"></a>pandas俩个数据结构 Series &amp; DataFrame</h1><p>下载</p><pre class="language-python" data-language="python"><code class="language-python">pip install jupyter</code></pre><img src="https://img-blog.csdnimg.cn/2021032713502782.gif" alt="在这里插入图片描述" style="zoom:150%;" / loading="lazy"><p>Series表示一维数据     DataFrame表示二维数据 pandas没有三维以上的数据结构</p><img src="https://img-blog.csdnimg.cn/20210327134753429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:150%;" / loading="lazy"><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>Series</p><img src="https://img-blog.csdnimg.cn/20210406205207697.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205200602.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205204852.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205210300.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205211704.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205210207.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205210519.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><img src="https://img-blog.csdnimg.cn/20210406205202766.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205211736.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205211596.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205215143.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406205214873.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><h3 id="dict-like-字典的方式"><a href="#dict-like-字典的方式" class="headerlink" title="dict-like(字典的方式)"></a>dict-like(字典的方式)</h3><p>可以像dict一样取值</p><p>通过[True, Flase] 掩码 可以是列表、Series、numpy数组都可以 只要是由True和Flase构成的 </p><img src="https://img-blog.csdnimg.cn/20210328220043237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 创建Series</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 创建DataFrame</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'XYZ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 取出 C</span>s<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 使用get也可以 取不到赋值为888</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">888</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/2021032920401016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 取到B列 2 5 8</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 取到 3 </span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 这里和Series是不一样的 除非索引为 int类型2也就是数字2</span><span class="token comment"># df[2] error</span><span class="token comment">#%%</span><span class="token comment"># 传入列表 注意格式 取到 2 3</span>s<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210329204559214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 注意格式 ["B"]取出Series   [["B"]]取出DataFrame</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 传入掩码的方法 取出1 3</span>s<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 按照行输出 取出 1 2 3  7 8 9  必须和行数一一对应 否则出错</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 根据条件生成一个掩码 判断>1的 返回True或False</span>mask <span class="token operator">=</span> s <span class="token operator">></span> <span class="token number">1</span>mask<span class="token comment">#%%</span><span class="token comment"># 或者s[mask]也可以 直接放条件亦可以</span>s<span class="token punctuation">[</span>s <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210329204936752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># B列 > 2的为True反之False</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span><span class="token comment">#%%</span><span class="token comment"># 根据条件返回的掩码进行取值</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 逻辑运算符 and &amp; 注意格式 需要()</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 逻辑运算符 or |</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 逻辑运算符 not ~  </span>df<span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210329205703593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="list-like-字典的方式"><a href="#list-like-字典的方式" class="headerlink" title="list-like(字典的方式)"></a>list-like(字典的方式)</h3><p><strong>注意：</strong></p><ol><li><strong>DataFrame切片是按照行来切片的</strong></li><li><strong>DataFrame切片数字[0:2] 只包括头 不包括尾</strong></li><li><strong>DataFrame切片标签[“X”:”Y”]  包括头和尾</strong></li></ol><img src="https://img-blog.csdnimg.cn/20210329210309551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'XYZ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 取出 1 2 不包尾</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 取出 1 2 不包尾</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 负数  取出 3 2 1</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 步长2 取出 1 3</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210329210950704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 取出 X Y行 不包尾</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 取出 1 2</span>s<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 传入行标签取出 取出X Y行   ['X':] 取出全部</span>df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token string">'Y'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406211159126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="点选"><a href="#点选" class="headerlink" title=".(点选)"></a>.(点选)</h3><p>不推荐使用</p><ol><li>代码可读性不好</li><li>有可能与方法或属性冲突</li></ol><img src="https://img-blog.csdnimg.cn/202104062111711226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">,</span> <span class="token string">'列'</span><span class="token punctuation">,</span>           <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token string">'dtype'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span><span class="token comment"># 也可以取出1 但是代码可读性不高 不推荐使用</span>s<span class="token punctuation">.</span>total<span class="token comment">#%%</span><span class="token comment"># 推荐这种</span>s<span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 中文也是可以的 取出2</span>s<span class="token punctuation">.</span>列<span class="token comment">#%%</span><span class="token comment"># 这样取出优先调用方法</span>s<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token comment">#%%</span><span class="token comment"># 这样就可以取出 3</span>s<span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 优先调用方法</span>s<span class="token punctuation">.</span>dtype<span class="token comment">#%%</span><span class="token comment"># 这样就可以取出</span>s<span class="token punctuation">[</span><span class="token string">'dtype'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406211453197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">,</span> <span class="token string">'列'</span><span class="token punctuation">,</span>           <span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token string">'dtypes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 这样取没问题 但是我们会误以为是方法</span>df<span class="token punctuation">.</span>total<span class="token comment">#%%</span><span class="token comment"># 也可以取出</span>df<span class="token punctuation">.</span>列<span class="token comment">#%%</span><span class="token comment"># 和方法引起冲突</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token comment">#%%</span><span class="token comment"># 调用了它的属性</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 这样取出就没有问题</span>df<span class="token punctuation">[</span><span class="token string">'dtypes'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406211548510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="loc"><a href="#loc" class="headerlink" title=".loc"></a>.loc</h3><img src="https://img-blog.csdnimg.cn/20210406211802243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'XYZ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 取出 Y列 DataFrame格式</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 取出Y列 C行 标量</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 传入列表 多行多列  X Y行 B D列</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 使用切片 列从Y到Z 行从B到D  还可以混合使用['Y':'Z', 'B','D']</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">:</span><span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406211721354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 这样就是选中全部的行</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 选中全部列 倒序输出</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 给定步长 XZ AC</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 传入mask True被选中 False反之</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406211917230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/D001_selecting/tips.csv">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 传入一个函数 上面是行 下面是列</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token keyword">lambda</span> df<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token keyword">lambda</span> df<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 读取三列['total_bill','day','time']</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>    <span class="token string">'tips.csv'</span><span class="token punctuation">,</span>    usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">,</span><span class="token string">'day'</span><span class="token punctuation">,</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># groupby分组 求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 这样不行 df找不到</span><span class="token comment"># df.groupby(['day','time']).sum()[</span><span class="token comment">#     df[df['total_bill']>100]</span><span class="token comment"># ]</span><span class="token comment">#%%</span><span class="token comment"># 这样就可以了 groupby分组 求和传入df 链式调用 > 100的</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span>    <span class="token keyword">lambda</span> df<span class="token punctuation">:</span> df<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 这样也是可以的</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>df <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">]</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">==</span> df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406212002577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406212019738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210406212037942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="iloc"><a href="#iloc" class="headerlink" title=".iloc"></a>.iloc</h3><p><code>注意</code><strong>原来是标签 现在是整数</strong></p><img src="https://img-blog.csdnimg.cn/20210406212131250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'XYZ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 选择第0行 1234</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 选择第0行 第1列 2</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 选择第0 1行 第1 3列 取出DataFrame</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 传入掩码 和loc结果一样</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406212320231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 切片的方式 不包括列2 不包括行3 </span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 跟切片的结果是一样的 和loc几乎是一样的</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token keyword">lambda</span> df<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token keyword">lambda</span> df<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406212435791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p>使用 .at 和 .iat的时候是不能切片的 运行效率会高一点点</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 选取单个值的时候 使用iat</span>df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 不能切片</span>df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">:</span><span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'D'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210406212539313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html">Series</a></h1><p><a href="https://pandas.pydata.org/Pandas-docs/stable/reference/api/Pandas.Series.html#Pandas.Series"><code>Series</code> (opens new window)</a>是带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。轴标签统称为<strong>索引</strong>。调用 <code>pd.Series</code> 函数即可创建 Series：</p><h2 id="创建一个Series对象"><a href="#创建一个Series对象" class="headerlink" title="创建一个Series对象"></a>创建一个Series对象</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span>              name<span class="token operator">=</span><span class="token string">'num'</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span>s<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s</code></pre><img src="https://img-blog.csdnimg.cn/20210327135844998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="Accessor-访问器"><a href="#Accessor-访问器" class="headerlink" title="Accessor 访问器"></a>Accessor 访问器</h2><img src="https://img-blog.csdnimg.cn/20210405162944602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'\na\n'</span><span class="token punctuation">,</span> <span class="token string">'\nd\n'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'\nb\n'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 查看类型</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 使用字符串方法取出空格</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 发现 1 变为空值了</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 发现 抛出属性异常的错误</span><span class="token comment"># df['C'].str.strip()</span><span class="token comment">#%%</span><span class="token comment"># 转换类型 发现没有问题了 1 变为str类型了</span>df<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 转换类型 不是时间格式了 进行切分</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token comment">#%% 不使用convert_dtypes转换为最有可能的数据类型</span><span class="token comment"># 读取Excel文件 sheet_name=0 有问题的文件 sheet_name=1 手动更改的文件</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'Series_str.xlsx'</span><span class="token punctuation">,</span>    sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert_dtypes<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 查看类型 不使用convert_dtypes 都是object类型</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 取 2行 0列 </span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 重新复制 去除空格</span>df<span class="token punctuation">[</span><span class="token string">'货号'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'货号'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 取出 去除空格</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span></code></pre><img src="https://img-blog.csdnimg.cn/20210405163153958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210405163232476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/frame.html">DataFrame</a></h1><h2 id="创建Dataframe对象"><a href="#创建Dataframe对象" class="headerlink" title="创建Dataframe对象"></a>创建Dataframe对象</h2><ol><li><strong>通过二维的list-like创建</strong></li><li><strong>通过字典创建</strong></li><li><strong>通过读取Excel表</strong></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 通过二维的列表</span>list_2d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list_2d<span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 可以设置他的columns（列索引）和index（行索引）</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list_2d<span class="token punctuation">,</span>                  columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 通过字典创建 指定x y为行索引</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><h2 id="通过读取Excel文件"><a href="#通过读取Excel文件" class="headerlink" title="通过读取Excel文件"></a>通过读取Excel文件</h2><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/A006_create_DataFrame/goods_base.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'goods_base.xlsx'</span><span class="token punctuation">,</span>                   index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'col_name'</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'index_name'</span>df</code></pre><img src="https://img-blog.csdnimg.cn/20210327141251228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="read-excel"><a href="#read-excel" class="headerlink" title="read_excel"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html">read_excel</a></h1><img src="https://img-blog.csdnimg.cn/20210327142326290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210327142704961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="普通读取"><a href="#普通读取" class="headerlink" title="普通读取"></a>普通读取</h2><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/goods_base.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'goods_base.xlsx'</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210327145110950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210327145059201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="sheet-name"><a href="#sheet-name" class="headerlink" title="sheet_name"></a>sheet_name</h2><p>(按照sheet名)</p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/sheet_name.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 读取所有</span>df_dict <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 返回一个DataFrame</span>df_dict<span class="token comment">#%%</span><span class="token comment"># 取出3月的</span>df_dict<span class="token punctuation">[</span><span class="token string">'3月'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210327210900850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  sheet_name</span><span class="token comment"># 指定下标 初始值 0</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定名字</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token string">'3月'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 读取多个sheet 传入列表  返回一个DataFrame</span>df_dict <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'3月'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df_dict<span class="token punctuation">[</span><span class="token string">'3月'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210327205852167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="header-amp-index-col"><a href="#header-amp-index-col" class="headerlink" title="header &amp; index_col"></a>header &amp; index_col</h2><p>(指定列索引的行&amp;行索引的列)</p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/header.xlsx">下载</a></p><img src="https://img-blog.csdnimg.cn/20210327212115480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  header</span><span class="token comment"># 指定为空 默认会让第一行为索引</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 不指定第一行默认为索引</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定第一行为索引</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>              header<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210327212342506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 指定列索引（header） 和 行索引（index_col）</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>              header<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210327213024432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p>注意坑 传入列表会有问题 很费解</p><img src="https://img-blog.csdnimg.cn/20210328203511630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="usecols"><a href="#usecols" class="headerlink" title="usecols"></a>usecols</h2><p>(指定哪些列)</p><p>小技巧：</p><p>​            复制Excel所有列名  打开python 输入 加上单引号 .splite进行切分 ok了</p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/usecols.xlsx">下载</a></p><img src="https://img-blog.csdnimg.cn/20210327213138293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;"/ loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  usecols</span><span class="token comment"># 默认选择所有</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'usecols.xlsx'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 切片操作 B到E</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'usecols.xlsx'</span><span class="token punctuation">,</span>              usecols<span class="token operator">=</span><span class="token string">'B:E'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># int列表选择列 0 2 下标从0开始 </span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'usecols.xlsx'</span><span class="token punctuation">,</span>              usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 字符串列表 传入列名</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'usecols.xlsx'</span><span class="token punctuation">,</span>              usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'AAA'</span><span class="token punctuation">,</span> <span class="token string">'CCC'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210328121714965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210327213138293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><img src="https://img-blog.csdnimg.cn/20210327213855871.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h3 id="int-list"><a href="#int-list" class="headerlink" title="int-list"></a>int-list</h3><img src="https://img-blog.csdnimg.cn/20210327213855472.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h3 id="str-list（建议使用）"><a href="#str-list（建议使用）" class="headerlink" title="str-list（建议使用）"></a>str-list（建议使用）</h3><p>可读性高 使用方便</p><img src="https://img-blog.csdnimg.cn/20210327213855689.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%% ['货号', '商品名称', '品牌', '成本', '季节', '商品年份']</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'goods_base.xlsx'</span><span class="token punctuation">,</span>               usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'货号'</span><span class="token punctuation">,</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span> <span class="token string">'品牌'</span><span class="token punctuation">,</span>                       <span class="token string">'成本'</span><span class="token punctuation">,</span> <span class="token string">'季节'</span><span class="token punctuation">,</span> <span class="token string">'商品年份'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210328123819857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><img src="https://img-blog.csdnimg.cn/20210327213855927.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'usecols.xlsx'</span><span class="token punctuation">,</span>              usecols<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token string">'AAA'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token string">'EEE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210328123623230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="skiprows-amp-skipcols"><a href="#skiprows-amp-skipcols" class="headerlink" title="skiprows&amp;skipcols"></a>skiprows&amp;skipcols</h2><p>(跳过行&amp;跳过列)</p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/skiprows.xlsx">下载</a></p><img src="https://img-blog.csdnimg.cn/20210328124613542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%% skiprows</span><span class="token comment"># 跳过一行</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'skiprows.xlsx'</span><span class="token punctuation">,</span>              skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 跳过第一行和第三行 也就是索引 0,2</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'skiprows.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>              skiprows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 跳过俩行skiprows 跳过一列skipcols</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'skiprows.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>              skiprows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>              skipcols<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 结果同上 因为skipcols还未正式使用</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'skiprows.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>              skiprows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>              usecols<span class="token operator">=</span><span class="token string">'B:D'</span><span class="token punctuation">)</span></code></pre><img src="https://img-blog.csdnimg.cn/20210328125053804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="names"><a href="#names" class="headerlink" title="names"></a>names</h2><p>(读取时指定显示列名)</p><img src="https://img-blog.csdnimg.cn/20210327212013183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 不使用header=None 覆盖了一月份的数据</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>     names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'月份'</span><span class="token punctuation">,</span> <span class="token string">'销量'</span><span class="token punctuation">,</span> <span class="token string">'销售额'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 使用header=None 就不会缺失数据了</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>     names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'月份'</span><span class="token punctuation">,</span> <span class="token string">'销量'</span><span class="token punctuation">,</span> <span class="token string">'销售额'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>df</code></pre><img src="https://img-blog.csdnimg.cn/20210328125751615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h2><p>(指定类型)</p><img src="https://img-blog.csdnimg.cn/20210327211744582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 171%;" / loading="lazy"><p>一般默认的类型：</p><p>​            int64、float64、bool、datetime64、object</p><img src="https://img-blog.csdnimg.cn/2021032721175554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'goods_base.xlsx'</span><span class="token punctuation">)</span>df</code></pre><p><img src="https://img-blog.csdnimg.cn/20210328131228597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328131202305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 修改类型 传入字典  不能将int64直接转换为string 好像是个小bug</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'goods_base.xlsx'</span><span class="token punctuation">,</span>    dtype<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'货号'</span><span class="token punctuation">:</span> <span class="token string">'str'</span><span class="token punctuation">,</span>        <span class="token string">'商品代码'</span><span class="token punctuation">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>        <span class="token string">'颜色代码'</span><span class="token punctuation">:</span> <span class="token string">'str'</span><span class="token punctuation">,</span>        <span class="token string">'季节'</span><span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        <span class="token string">'品牌'</span><span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        <span class="token string">'商品年份'</span><span class="token punctuation">:</span> <span class="token string">'period[Y]'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 还可以使用astype来转换</span>df<span class="token punctuation">[</span><span class="token string">'颜色代码'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'颜色代码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypes</code></pre><img src="https://img-blog.csdnimg.cn/2021032813160924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="parse-dates-amp-data-parser"><a href="#parse-dates-amp-data-parser" class="headerlink" title="parse_dates &amp; data_parser"></a>parse_dates &amp; data_parser</h2><p>(指定解析成日期格式的列 &amp; 是个函数指定如何去解析这些列)</p><h3 id="parse-dates-下载"><a href="#parse-dates-下载" class="headerlink" title="parse_dates  下载"></a>parse_dates  <a href="https://gitee.com/heart-addiction/pandas/blob/master/B002_read_excel/parse_dates.xlsx">下载</a></h3><p><img src="https://img-blog.csdnimg.cn/20210328192931857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/2021032819322464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><img src="https://img-blog.csdnimg.cn/20210328194307102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">,</span>    index_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 是object类型</span>df<span class="token punctuation">.</span>index<span class="token comment">#%%</span><span class="token comment"># 我们指定转换日期类型 parse_dates会自动识别</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">,</span>    index_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>    parse_dates<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>index</code></pre><img src="https://img-blog.csdnimg.cn/20210328193959414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">,</span>    parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">,</span>    sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 传入列表 指定拼接日期格式</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">,</span>    sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment"># parse_dates=[[0, 1, 2]],</span>    parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'年'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'日'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><img src="https://img-blog.csdnimg.cn/20210328194116312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 传入字典 指定列名和日期</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'parse_dates.xlsx'</span><span class="token punctuation">,</span>    sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    parse_dates<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'年'</span><span class="token punctuation">,</span> <span class="token string">'月'</span><span class="token punctuation">,</span> <span class="token string">'日'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>dtypes</code></pre><img src="https://img-blog.csdnimg.cn/20210328194638864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h3 id="data-parser-配合parse-dates使用"><a href="#data-parser-配合parse-dates使用" class="headerlink" title="data_parser(配合parse_dates使用)"></a>data_parser(配合parse_dates使用)</h3><p>传入一个函数 <a href="https://gitee.com/heart-addiction/pandas/blob/master/B002_read_excel/date_parser.xlsx">下载</a></p><img src="https://img-blog.csdnimg.cn/20210328194902439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'date_parser.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 先指定列名parse_dates 否则会出错  只有parse_dates解析不成功是object类型</span><span class="token comment"># date_parser是一个函数 使用to_datetime  x是一个Series类型 正确解析为datetime64类型</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'date_parser.xlsx'</span><span class="token punctuation">,</span>    parse_dates<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    date_parser<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>        x<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%Y年%m月%d日'</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>df</code></pre><img src="https://img-blog.csdnimg.cn/20210406212720942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="na-values"><a href="#na-values" class="headerlink" title="na_values"></a>na_values</h2><p>(替换NaN)</p><p>NaN是一个float类型 <a href="https://gitee.com/heart-addiction/pandas/blob/master/B003_read_excel_1_na_values/na_values.xlsx">下载</a></p><p><img src="https://img-blog.csdnimg.cn/20210328195744359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328195915962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/2021032820002790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><p>#N/A  #NA默认解析为NaN</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 什么都没有是NaN  有空格也不行 注意踩坑</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'na_values.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># na_values 指定为NaN</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'na_values.xlsx'</span><span class="token punctuation">,</span>    na_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 还可以传入字典 指定替换列1=一的</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'na_values.xlsx'</span><span class="token punctuation">,</span>    na_values<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'列1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df</code></pre><img src="https://img-blog.csdnimg.cn/20210328195726487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="converters"><a href="#converters" class="headerlink" title="converters"></a>converters</h2><p>(转换器)</p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B003_read_excel_2_converters/converters.xlsx">下载</a></p><img src="https://img-blog.csdnimg.cn/2021032820103997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'converters.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 传入字典去掉换行符 空格</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'converters.xlsx'</span><span class="token punctuation">,</span>    converters<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token comment"># '货号': lambda x: x.strip(),</span>        <span class="token string">'货号'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">.</span>strip    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df</code></pre><img src="https://img-blog.csdnimg.cn/20210328201150530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="true-values-amp-false-values"><a href="#true-values-amp-false-values" class="headerlink" title="true_values &amp; false_values"></a>true_values &amp; false_values</h2><p>  (传入列表视为True &amp; 同理)</p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B003_read_excel_3_true_false_values/true_false_values.xlsx">下载1</a> </p><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B003_read_excel_3_true_false_values/tb_.xlsx">下载2</a></p><img src="https://img-blog.csdnimg.cn/20210328201630931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'true_false_values.xlsx'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 只有一列全部装换为bool类型才会进行转换</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'true_false_values.xlsx'</span><span class="token punctuation">,</span>    true_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    false_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 这时发现只有列1 才是bool类型</span>df<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span><span class="token comment"># 只对字符串生效 对int无效</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'true_false_values.xlsx'</span><span class="token punctuation">,</span>    true_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    false_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>df<span class="token comment"># 如果对int类型进行强转的话 使用dtype 传入列名 这一列都会被转换 0会变为False 非0转换为True</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'true_false_values.xlsx'</span><span class="token punctuation">,</span>    true_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    false_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    dtype<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'列3'</span><span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>    <span class="token string">'true_false_values.xlsx'</span><span class="token punctuation">,</span>    encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span>df</code></pre><p><img src="https://img-blog.csdnimg.cn/20210328201936316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" style="zoom: 171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328202059966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="squeeze"><a href="#squeeze" class="headerlink" title="squeeze"></a>squeeze</h2><p>(默认返回DataFrame传入True返回Series)</p><img src="https://img-blog.csdnimg.cn/2021032820360785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="mangle-dupe-cols"><a href="#mangle-dupe-cols" class="headerlink" title="mangle_dupe_cols"></a>mangle_dupe_cols</h2><p>(是否重命名重复列名)</p><img src="https://img-blog.csdnimg.cn/20210328203620452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="true-values-amp-false-values-1"><a href="#true-values-amp-false-values-1" class="headerlink" title="true_values &amp; false_values()"></a>true_values &amp; false_values()</h2><img src="https://img-blog.csdnimg.cn/20210328203643959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="nrows"><a href="#nrows" class="headerlink" title="nrows"></a>nrows</h2><p>(要解析的行数) </p><p>nrows=2 是不包括表头的 如果包括就是3</p><img src="https://img-blog.csdnimg.cn/20210328204042845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="thousands"><a href="#thousands" class="headerlink" title="thousands()"></a>thousands()</h2><p>类型：str 默认None</p><p>作用：将字符串列解析为数字</p><img src="https://img-blog.csdnimg.cn/20210328204634967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="convert-float"><a href="#convert-float" class="headerlink" title="convert_float"></a>convert_float</h2><p>(在可能的情况下,是否将float转换为int(即1.0 -&gt;1))</p><img src="https://img-blog.csdnimg.cn/2021032820482922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel"></a>to_excel</h1><p>(写Excel文件)</p><img src="https://img-blog.csdnimg.cn/20210328205131419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>(是否输出行索引)</p><img src="https://img-blog.csdnimg.cn/20210328205415368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'销量'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'售价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100.123</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'货号'</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># sheet_name表名 float_format保留俩位小数 na_rep替换空值</span><span class="token comment"># df.to_excel('tb_.xlsx',</span><span class="token comment">#             sheet_name='tb1',</span><span class="token comment">#             float_format='%.2f', </span><span class="token comment">#             na_rep='我是空值')</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'tb__.xlsx'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""     销量       售价货号              aaa  10  100.123bbb  20      NaN"""</span></code></pre><img src="https://img-blog.csdnimg.cn/20210328205116629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="ExcelWriter"><a href="#ExcelWriter" class="headerlink" title="ExcelWriter"></a>ExcelWriter</h2><p>(可以输出多可sheet)</p><p><img src="https://img-blog.csdnimg.cn/20210328211112954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328211145854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimedf1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">'销量'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token string">'销量'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token comment"># datetime_format 不指定会输出 年-月-日-时-分-秒</span><span class="token keyword">with</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">'tb.xlsx'</span><span class="token punctuation">,</span>                    datetime_format<span class="token operator">=</span><span class="token string">'YYYY-MM-DD'</span>                    <span class="token punctuation">)</span> <span class="token keyword">as</span> writer<span class="token punctuation">:</span>    df1<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'1月'</span><span class="token punctuation">)</span>    df2<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'2月'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""          日期  销量0 2020-01-01  101 2020-01-02  20          日期  销量0 2020-02-01  151 2020-02-02  25"""</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2021032820554820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328211725154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><h1 id="read-csv-amp-to-csv"><a href="#read-csv-amp-to-csv" class="headerlink" title="read_csv &amp; to_csv"></a>read_csv &amp; to_csv</h1><img src="https://img-blog.csdnimg.cn/2021032821224460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'一'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'二'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># index 不设置就不是一个标准的csv文件 encoding指定编码格式</span><span class="token comment"># sep 设置分隔符 一般不设置</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'tb1.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'tb1.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'GBK'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""   一  二0  1  31  2  4   一  二0  1  31  2  4"""</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210328212127514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328212439788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></p><h1 id="index-1"><a href="#index-1" class="headerlink" title="index"></a>index</h1><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><img src="https://img-blog.csdnimg.cn/20210328213634357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><img src="https://img-blog.csdnimg.cn/20210328214801393.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328214801366.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328214801521.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><p>获取和设置</p><img src="https://img-blog.csdnimg.cn/20210328214105422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/20210328214801841.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="标签索引可以被改变-位置索引不可更改-默认0-1-2"><a href="#标签索引可以被改变-位置索引不可更改-默认0-1-2" class="headerlink" title="标签索引可以被改变  位置索引不可更改 默认0 1 2"></a>标签索引可以被改变  位置索引不可更改 默认0 1 2</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210328214206279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"></h2><h2 id="避免这俩中情况"><a href="#避免这俩中情况" class="headerlink" title="避免这俩中情况"></a>避免这俩中情况</h2><img src="https://img-blog.csdnimg.cn/20210328214256147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy">]]></content>
    
    
    <summary type="html">操千曲而后晓声，观千剑而后识器</summary>
    
    
    
    <category term="python" scheme="https://wyx6.top/categories/python/"/>
    
    <category term="数据分析" scheme="https://wyx6.top/categories/python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="pandas" scheme="https://wyx6.top/categories/python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/pandas/"/>
    
    
    <category term="python" scheme="https://wyx6.top/tags/python/"/>
    
    <category term="数据分析" scheme="https://wyx6.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="pandas" scheme="https://wyx6.top/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>数据分析-初识pandas</title>
    <link href="https://wyx6.top/pandas%E5%85%A5%E9%97%A8/"/>
    <id>https://wyx6.top/pandas%E5%85%A5%E9%97%A8/</id>
    <published>2021-03-20T13:12:25.000Z</published>
    <updated>2021-03-28T13:06:36.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言：为什么用python做数据分析"><a href="#前言：为什么用python做数据分析" class="headerlink" title="前言：为什么用python做数据分析"></a>前言：为什么用python做数据分析</h1><h2 id="1-Python数据分析的理由"><a href="#1-Python数据分析的理由" class="headerlink" title="1. Python数据分析的理由"></a>1. Python数据分析的理由</h2><p>对于数据分析师从业者而言，经常需要从事：数据库操作、报告撰写、数据可视化、数据挖掘的工作。这些工作不写代码也可以操作，利用 Excel 进行数据可视化、使用 SPSS 等一些亲民类平台工具进行数据挖掘，在《<a href="http://c.biancheng.net/view/8265.html?1596707552">数据分析是什么？</a>》中我们介绍了使用平台工具虽然可造作性强，但是不可避免的会存在重复机械的劳动，从而降低自己的工作效率，但如果你会用 Python 编写代码，操作的自由度更高，发展的潜力更大。</p><h4 id="1-Python强大的第三方库"><a href="#1-Python强大的第三方库" class="headerlink" title="1) Python强大的第三方库"></a>1) Python强大的第三方库</h4><p>Python 语言拥有简洁易读的特性，它是个生态完善且开源软件包很多的高级动态编程语言。在数据分析过程中，可以通过调用不同的包来完成相应的工作，比如上述介绍的 Numpy、SciPy 和 Matplotlib以及 pandas，这些模块分别承担着数据分析工作不同的任务。就拿 Numpy 来说吧，Numpy （Numerical Python）的简称，是 Python 科学计算的基础包。功能主要如下：</p><ul><li>快速高效的多维数组对象 ndarray。</li><li>线性代数运算、傅里叶变换，以及随机数生成。</li><li>用于将 C、C++、Fortran（公式翻译语言）代码集成到 Python 的工具。</li><li>用于对数组执行元素级计算以及直接对数组执行数学运算的函数。</li></ul><p>Numpy 除了为 Python 提供快速的数组处理能力，它的另外一个主要作用是作为在算法之间传递数据的容器。对于数值型数据，NumPy 数组在存储和处理数据时要比内置的 Python 数据结构高效得多，在后续章节中我们对 Numpy 进行详细介绍。</p><h4 id="2-分析过程可控复用性强"><a href="#2-分析过程可控复用性强" class="headerlink" title="2) 分析过程可控复用性强"></a>2) 分析过程可控复用性强</h4><p>当我们使用 Python 做数据分析时，可以将分析的过程保存下来，从而实现对分析过程的追溯，最后当一个数据分析的任务完成后，我们可以代码以脚本的形式保存下来，以实现后续复用的目的，从而提升你的工作效率。</p><p><img src="http://c.biancheng.net/uploads/allimg/200807/9-200PG1251K40.png" alt="Python数据分析" loading="lazy"><br>图1：Python人生新路标</p><h4 id="3-Python语言功能完善"><a href="#3-Python语言功能完善" class="headerlink" title="3) Python语言功能完善"></a>3) Python语言功能完善</h4><p>Python 不仅在数据分析方面有很突出的表现能力，还在网络爬虫、Web 站点开发、游戏开发、自动化运维等众多领域都有很广泛的应用。这对于软件公司来说无疑是一件锦上添花的事情，让使用一种语言完成全部服务成为可能。</p><p>我们可以用 Python 的爬虫框架 Scrapy 来爬取数据，然后交给 pandas 做数据清洗处理，最后使用Python 的 Django 框架搭建 Web 站点将结果展示出来，你会发现在这一过程中，我们仅靠 Python 语言的框架实现了全部需求。所有的开发人员使用同一种编程工具将会给企业带来非常显著的效益。</p><h4 id="4-Python作为胶水语言"><a href="#4-Python作为胶水语言" class="headerlink" title="4) Python作为胶水语言"></a>4) Python作为胶水语言</h4><p>Python 是一种“胶水语言”，顾名思义就是“粘合”的意思 ，Python 在设计初期就面向科研人员，以降低编程难度，提高编程效率为目的。Python 之所以在科学计算领域能够功成名就，这和它能够轻松地集成 C、C++以及 Fortran 代码有不可分割原因。大部分现代计算环境都利用了 Fortran 和 C库来实现线性代数、积分、傅里叶变换等诸多算法。</p><h4 id="5-Python与AI紧密相连"><a href="#5-Python与AI紧密相连" class="headerlink" title="5) Python与AI紧密相连"></a>5) Python与AI紧密相连</h4><p>你可能感觉 人工智能是很神秘的事物，其实它离一个数据分析师并不遥远。现在大部分深度学习框架都优先选择支持 Python 语言，比如当下火热的谷歌深度学习框架Tensorflow，它虽然是C++编写的，但对 Python 语言支持是最好。</p><p><img src="http://c.biancheng.net/uploads/allimg/200807/9-200PG12340Z3.png" alt="img" loading="lazy"><br>图2：Python与人工智能</p><p>Tensorflow 的数据类型与 numpy 的数据类型是等价的，这是因为 Tensorflow 在设计的时候就是参考了 numpy 的数据类型，目的就是使其成为 Python 科学计算系列库的重要部分。所以使用 Python 做数据分析，对于和 AI 人工智能接轨有很好的帮助。这无疑将拓宽你的视野与道路，增加自身的软实力。</p><h1 id="Pandas-概览"><a href="#Pandas-概览" class="headerlink" title="Pandas 概览"></a><a href="https://www.pypandas.cn/docs/getting_started/overview.html#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">Pandas 概览</a></h1><p><strong>Pandas</strong> 是 <a href="https://www.python.org/">Python (opens new window)</a>的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为<strong>最强大、最灵活、可以支持任何语言的开源数据分析工具</strong>。经过多年不懈的努力，Pandas 离这个目标已经越来越近了。</p><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series">Series (opens new window)</a>（一维数据）与 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame (opens new window)</a>（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 <a href="https://www.numpy.org/">NumPy (opens new window)</a>开发，可以与其它第三方科学计算支持库完美集成。</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 <code>NaN</code>；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松</strong>地转换为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片</strong>、<strong>花式索引</strong>、<strong>子集分解</strong>等操作；</li><li>直观地<strong>合并（merge）</strong>、<strong>连接（join）</strong>数据集；</li><li>灵活地<strong>重塑（reshape）</strong>、<strong>透视（pivot）</strong>数据集；</li><li><strong>轴</strong>支持结构化标签：一个刻度支持多个标签；</li><li>成熟的 IO 工具：读取<strong>文本文件</strong>（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，利用超快的 <strong>HDF5</strong> 格式保存 / 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>这些功能主要是为了解决其它编程语言、科研环境的痛点。处理数据一般分为几个阶段：数据整理与清洗、数据分析与建模、数据可视化与制表，Pandas 是处理数据的理想工具。</p><p>其它说明：</p><ul><li>Pandas 速度<strong>很快</strong>。Pandas 的很多底层算法都用 <a href="https://cython.org/">Cython (opens new window)</a>优化过。然而，为了保持通用性，必然要牺牲一些性能，如果专注某一功能，完全可以开发出比 Pandas 更快的专用工具。</li><li>Pandas 是 <a href="https://www.statsmodels.org/stable/index.html">statsmodels (opens new window)</a>的依赖项，因此，Pandas 也是 Python 中统计计算生态系统的重要组成部分。</li><li>Pandas 已广泛应用于金融领域。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><table><thead><tr><th>维数</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>Series</td><td>带标签的一维同构数组</td></tr><tr><td>2</td><td>DataFrame</td><td>带标签的，大小可变的，二维异构表格</td></tr></tbody></table><h2 id="为什么有多个数据结构？"><a href="#为什么有多个数据结构？" class="headerlink" title="为什么有多个数据结构？"></a>为什么有多个数据结构？</h2><p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p><p>此外，通用 API 函数的默认操作要顾及时间序列与截面数据集的方向。多维数组存储二维或三维数据时，编写函数要注意数据集的方向，这对用户来说是一种负担；如果不考虑 C 或 Fortran 中连续性对性能的影响，一般情况下，不同的轴在程序里其实没有什么区别。Pandas 里，轴的概念主要是为了给数据赋予更直观的语义，即用“更恰当”的方式表示数据集的方向。这样做可以让用户编写数据转换函数时，少费点脑子。</p><p>处理 DataFrame 等表格数据时，<strong>index</strong>（行）或 <strong>columns</strong>（列）比 <strong>axis 0</strong> 和 <strong>axis 1</strong> 更直观。用这种方式迭代 DataFrame 的列，代码更易读易懂：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> col <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    series <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token comment"># do something with series</span></code></pre><h2 id="大小可变与数据复制"><a href="#大小可变与数据复制" class="headerlink" title="大小可变与数据复制"></a>大小可变与数据复制</h2><p>Pandas 所有数据结构的值都是可变的，但数据结构的大小并非都是可变的，比如，Series 的长度不可改变，但 DataFrame 里就可以插入列。</p><p>Pandas 里，绝大多数方法都不改变原始的输入数据，而是复制数据，生成新的对象。 一般来说，原始输入数据<strong>不变</strong>更稳妥。</p><h1 id="pandas是什么"><a href="#pandas是什么" class="headerlink" title="pandas是什么"></a>pandas是什么</h1><p>pandas是⼀个开源的、BSD许可的库 为Python编程语⾔提供<code>⾼性能、易于使⽤</code>的数据结构和数据分析⼯具</p><p>列表：使用方便、效率不高</p><p>numpy：存储单一（数值类型）、大大提高效率</p><p>pandas：构建在numpy之上，继承了numpy效率高的优点、自己易于使用的优点（行索引 列索引）</p><img src="https://img-blog.csdnimg.cn/20210322211610522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>list ：不连续的</p><p>pandas：内存地址是连续的</p><img src="https://img-blog.csdnimg.cn/20210322211649435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h2 id="易用"><a href="#易用" class="headerlink" title="易用"></a>易用</h2><p>numpy：二维数组只有数字索引</p><img src="https://img-blog.csdnimg.cn/2021032713382850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><p>pandas：二维数据 还有标签索引支持行列索引</p><img src="https://img-blog.csdnimg.cn/20210322211758723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><img src="https://img-blog.csdnimg.cn/2021032712404842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:171%;" / loading="lazy"><h1 id="pandas常用方法（点击下载pdf）"><a href="#pandas常用方法（点击下载pdf）" class="headerlink" title="pandas常用方法（点击下载pdf）"></a><a href="https://gitee.com/heart-addiction/pandas/blob/master/A001_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/A001_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B_1.pdf">pandas常用方法（点击下载pdf）</a></h1><img src="https://img-blog.csdnimg.cn/20210327132910533.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="pandas-append"><a href="#pandas-append" class="headerlink" title="pandas.append()"></a>pandas.append()</h2><p>上下拼接多个表格</p><img src="https://img-blog.csdnimg.cn/2021032713290766.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="pandas-join"><a href="#pandas-join" class="headerlink" title="pandas.join()"></a>pandas.join()</h2><p>左右拼接俩个表格</p><img src="https://img-blog.csdnimg.cn/20210327132906806.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="pandas-concat"><a href="#pandas-concat" class="headerlink" title="pandas.concat()"></a>pandas.concat()</h2><p>设置上下（axis=0）或左右（axis=1）拼接多个表格</p><img src="https://img-blog.csdnimg.cn/20210327132906184.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="pandas-merge"><a href="#pandas-merge" class="headerlink" title="pandas.merge()"></a>pandas.merge()</h2><p>依照俩个表格相同的元素把俩个表格连接在一起</p><img src="https://img-blog.csdnimg.cn/20210327132912870.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="pandas-pivot-table"><a href="#pandas-pivot-table" class="headerlink" title="pandas.pivot_table()"></a>pandas.pivot_table()</h2><p>相当于excel中的透视操作</p><img src="https://img-blog.csdnimg.cn/20210327132917298.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><h2 id="俩种窗口操作"><a href="#俩种窗口操作" class="headerlink" title="俩种窗口操作"></a>俩种窗口操作</h2><img src="https://img-blog.csdnimg.cn/2021032713290997.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><p>第一种是固定窗口滚动操作</p><h3 id="rolling"><a href="#rolling" class="headerlink" title="rolling( )"></a>rolling( )</h3><img src="https://img-blog.csdnimg.cn/20210327132904534.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy"><p>第二种是扩展窗口操作</p><h3 id="expanding"><a href="#expanding" class="headerlink" title="expanding( )"></a>expanding( )</h3><img src="https://img-blog.csdnimg.cn/20210327132906112.gif" alt="请添加图片描述" style="zoom:171%;" / loading="lazy">]]></content>
    
    
    <summary type="html">千磨万击还坚劲，任尔东西南北风</summary>
    
    
    
    <category term="python" scheme="https://wyx6.top/categories/python/"/>
    
    <category term="数据分析" scheme="https://wyx6.top/categories/python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="pandas" scheme="https://wyx6.top/categories/python/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/pandas/"/>
    
    
    <category term="python" scheme="https://wyx6.top/tags/python/"/>
    
    <category term="数据分析" scheme="https://wyx6.top/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="pandas" scheme="https://wyx6.top/tags/pandas/"/>
    
    <category term="numpy" scheme="https://wyx6.top/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>Django八大核心功能-认证 权限 限流 序列化(ModelSerializer) 分页 版本 过滤 排序</title>
    <link href="https://wyx6.top/Django%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/"/>
    <id>https://wyx6.top/Django%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</id>
    <published>2021-03-08T11:11:25.000Z</published>
    <updated>2021-03-08T11:19:33.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    最近面试有面试官问drf框架的功能，那我们就将这八大核心功能复现一下，回忆回忆。</p><h1 id="DRF框架"><a href="#DRF框架" class="headerlink" title="DRF框架"></a>DRF框架</h1><h3 id="1-DRF框架的-8-个核心功能"><a href="#1-DRF框架的-8-个核心功能" class="headerlink" title="1.DRF框架的 8 个核心功能"></a>1.DRF框架的 8 个核心功能</h3><ul><li>认证  （用户登录校验用户名密码或者token是否合法）</li><li>权限     (根据不同的用户角色，可以操作不同的表)</li><li>限流  （限制接口访问速度）</li><li>序列化  （返回json）</li><li>分页  （把数据分成一页一页）</li><li>版本  （接口版本号，用 v1/v2/v3）</li><li>过滤  （筛选所需要的数据）</li><li>排序  （对数据进行排序）</li></ul><h3 id="2-相关包"><a href="#2-相关包" class="headerlink" title="2.相关包"></a>2.相关包</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.序列化相关'''</span>serializerModelSerializer<span class="token triple-quoted-string string">'''2.DRF视图函数继承'''</span>APIView  （继承View）ModelViewSet （继承APIView<span class="token punctuation">(</span>mixins<span class="token punctuation">)</span>）</code></pre><h2 id="1-1-安装DjangoRestFramework及所对应版本"><a href="#1-1-安装DjangoRestFramework及所对应版本" class="headerlink" title="1.1 安装DjangoRestFramework及所对应版本"></a>1.1 安装DjangoRestFramework及所对应版本</h2><pre class="language-python" data-language="python"><code class="language-python">pip install djangorestframework<span class="token operator">==</span><span class="token number">3.11</span><span class="token number">.1</span>pip install django<span class="token operator">-</span><span class="token builtin">filter</span><span class="token operator">==</span><span class="token number">2.3</span><span class="token number">.0</span> <span class="token comment"># 过滤器</span>pip install markdown  <span class="token comment"># Markdown support for the browsable API.</span></code></pre><h2 id="1-2-在-项目-settings-py中注册并设置所有都可以访问"><a href="#1-2-在-项目-settings-py中注册并设置所有都可以访问" class="headerlink" title="1.2 在 项目/settings.py中注册并设置所有都可以访问"></a>1.2 在 项目/settings.py中注册并设置所有都可以访问</h2><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'django_filters'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span></code></pre><h2 id="1-3-项目-settings-py配置DRF：-全局配置"><a href="#1-3-项目-settings-py配置DRF：-全局配置" class="headerlink" title="1.3  项目/settings.py配置DRF： 全局配置"></a>1.3  项目/settings.py配置DRF： 全局配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 过滤器</span><span class="token comment"># 1,安装 django-filter</span><span class="token comment"># 2,注册应用</span><span class="token comment"># 3,配置settings, 在view里配置可过滤的字段</span><span class="token comment"># 4,使用 查询字符串携带过滤信息</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 文档报错： AttributeError: ‘AutoSchema’ object has no attribute ‘get_link’</span>    <span class="token comment"># 用下面的设置可以解决</span>    <span class="token string">'DEFAULT_SCHEMA_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.schemas.AutoSchema'</span><span class="token punctuation">,</span>    <span class="token comment"># 默认设置是:</span>    <span class="token comment"># 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',</span>    <span class="token comment"># 异常处理器</span>    <span class="token comment"># 'EXCEPTION_HANDLER': 'user.utils.exception_handler',</span>    <span class="token comment"># Base API policies</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.renderers.BrowsableAPIRenderer'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_PARSER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.parsers.JSONParser'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.parsers.FormParser'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.parsers.MultiPartParser'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 1.认证器（全局）：用户登录校验用户名密码或者token是否合法</span>    <span class="token string">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment"># 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 在 DRF中配置JWT认证</span>        <span class="token comment"># 'rest_framework.authentication.SessionAuthentication', # 使用session时的认证器</span>        <span class="token comment"># 'rest_framework.authentication.BasicAuthentication' # 提交表单时的认证器</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 2.权限配置（全局）： 顺序靠上的严格（根据不同的用户角色，可以操作不同的表）</span>    <span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment"># 'rest_framework.permissions.IsAdminUser', # 管理员可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticated', # 认证用户可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticatedOrReadOnly', # 认证用户可以访问, 否则只能读取</span>        <span class="token comment"># 'rest_framework.permissions.AllowAny', # 所有用户都可以访问</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 3.限流（防爬虫）</span>    <span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.throttling.UserRateThrottle'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 3.1限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'10000/hour'</span><span class="token punctuation">,</span>  <span class="token comment"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3000/day'</span><span class="token punctuation">,</span>  <span class="token comment"># 未认证用户每天能访问3次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_CONTENT_NEGOTIATION_CLASS'</span><span class="token punctuation">:</span>        <span class="token string">'rest_framework.negotiation.DefaultContentNegotiation'</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_METADATA_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.metadata.SimpleMetadata'</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_VERSIONING_CLASS'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># 4.分页（全局）：全局分页器, 例如 省市区的数据自定义分页器, 不需要分页</span>    <span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.PageNumberPagination'</span><span class="token punctuation">,</span>    <span class="token comment"># 每页返回数量</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment"># 默认 None</span>    <span class="token comment"># 5.过滤器后端</span>    <span class="token string">'DEFAULT_FILTER_BACKENDS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'django_filters.rest_framework.DjangoFilterBackend'</span><span class="token punctuation">,</span>        <span class="token comment"># 'django_filters.rest_framework.backends.DjangoFilterBackend', 包路径有变化</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 5.1过滤排序（全局）：Filtering 过滤排序</span>    <span class="token string">'SEARCH_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'search'</span><span class="token punctuation">,</span>    <span class="token string">'ORDERING_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'ordering'</span><span class="token punctuation">,</span>    <span class="token string">'NUM_PROXIES'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># 6.版本控制：Versioning 接口版本控制</span>    <span class="token string">'DEFAULT_VERSION'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token string">'ALLOWED_VERSIONS'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token string">'VERSION_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'version'</span><span class="token punctuation">,</span>    <span class="token comment"># Authentication 认证</span>    <span class="token comment"># 未认证用户使用的用户类型</span>    <span class="token string">'UNAUTHENTICATED_USER'</span><span class="token punctuation">:</span> <span class="token string">'django.contrib.auth.models.AnonymousUser'</span><span class="token punctuation">,</span>    <span class="token comment"># 未认证用户使用的Token值</span>    <span class="token string">'UNAUTHENTICATED_TOKEN'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># View configuration</span>    <span class="token string">'VIEW_NAME_FUNCTION'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.views.get_view_name'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW_DESCRIPTION_FUNCTION'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.views.get_view_description'</span><span class="token punctuation">,</span>    <span class="token string">'NON_FIELD_ERRORS_KEY'</span><span class="token punctuation">:</span> <span class="token string">'non_field_errors'</span><span class="token punctuation">,</span>    <span class="token comment"># Testing</span>    <span class="token string">'TEST_REQUEST_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.renderers.MultiPartRenderer'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'TEST_REQUEST_DEFAULT_FORMAT'</span><span class="token punctuation">:</span> <span class="token string">'multipart'</span><span class="token punctuation">,</span>    <span class="token comment"># Hyperlink settings</span>    <span class="token string">'URL_FORMAT_OVERRIDE'</span><span class="token punctuation">:</span> <span class="token string">'format'</span><span class="token punctuation">,</span>    <span class="token string">'FORMAT_SUFFIX_KWARG'</span><span class="token punctuation">:</span> <span class="token string">'format'</span><span class="token punctuation">,</span>    <span class="token string">'URL_FIELD_NAME'</span><span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span>    <span class="token comment"># Encoding</span>    <span class="token string">'UNICODE_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'COMPACT_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'STRICT_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'COERCE_DECIMAL_TO_STRING'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'UPLOADED_FILES_USE_URL'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment"># Browseable API</span>    <span class="token string">'HTML_SELECT_CUTOFF'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token string">'HTML_SELECT_CUTOFF_TEXT'</span><span class="token punctuation">:</span> <span class="token string">"More than &#123;count&#125; items..."</span><span class="token punctuation">,</span>    <span class="token comment"># Schemas</span>    <span class="token string">'SCHEMA_COERCE_PATH_PK'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'SCHEMA_COERCE_METHOD_NAMES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'retrieve'</span><span class="token punctuation">:</span> <span class="token string">'read'</span><span class="token punctuation">,</span>        <span class="token string">'destroy'</span><span class="token punctuation">:</span> <span class="token string">'delete'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h1 id="2-DRF-认证、权限、限流、分页、过滤、序列化"><a href="#2-DRF-认证、权限、限流、分页、过滤、序列化" class="headerlink" title="2.DRF 认证、权限、限流、分页、过滤、序列化"></a>2.DRF 认证、权限、限流、分页、过滤、序列化</h1><h2 id="2-1-app下-urls-py配置路由"><a href="#2-1-app下-urls-py配置路由" class="headerlink" title="2.1  app下/urls.py配置路由"></a>2.1  app下/urls.py配置路由</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span> DefaultRouter<span class="token comment"># 自动生成路由方法, 必须使用视图集</span><span class="token comment"># router = SimpleRouter() # 没有根路由 /user/ 无法识别</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1.有根路由</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'user'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UserViewSet<span class="token punctuation">)</span>  <span class="token comment"># 2.配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api-auth/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'rest_framework.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'rest_framework'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 认证地址,</span><span class="token punctuation">]</span>urlpatterns <span class="token operator">+=</span> router<span class="token punctuation">.</span>urls  <span class="token comment"># 3.模块地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlpatterns<span class="token punctuation">)</span></code></pre><h2 id="2-2-app下-创建serializers-py序列化"><a href="#2-2-app下-创建serializers-py序列化" class="headerlink" title="2.2 app下/创建serializers.py序列化"></a>2.2 app下/创建serializers.py序列化</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">def</span> <span class="token function">address_validate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment"># data：是用户提交的地址这个字段的数据（河南省 郑州市）</span>    <span class="token comment"># 独立校验器</span>    <span class="token comment"># raise serializers.ValidationError('请填写实际地址') # 有错就抛出异常</span>    <span class="token comment"># 没错就返回数据</span>    <span class="token keyword">return</span> data<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1.独立校验器：重新设定字段, 替换掉模型中的设定, 重新设定地址的长度为5</span>    <span class="token comment"># address_validate是自定义的数据校验函数</span>    address <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> validators<span class="token operator">=</span>    <span class="token punctuation">[</span>address_validate<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 2.单一字段验证（validate_字段名）, 验证地址</span>    <span class="token keyword">def</span> <span class="token function">validate_address</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'测试'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'请填写实际地址'</span><span class="token punctuation">)</span>  <span class="token comment"># 有错就抛出异常</span>        <span class="token keyword">return</span> data  <span class="token comment"># 没错就返回结果</span>    <span class="token keyword">def</span> <span class="token function">validate_phone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 不符合手机号格式</span>        <span class="token comment"># raise serializers.ValidationError('手机号格式不正确')</span>        model <span class="token operator">=</span> self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>Meta<span class="token punctuation">.</span>model        num <span class="token operator">=</span> model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>phone<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'手机号已存在'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data    <span class="token comment"># 3.所有属性验证器</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># attrs：&#123;"username":"zhangsan", "phone":"18538752511", ....&#125;</span>        <span class="token comment"># 所有属性验证器</span>        <span class="token comment"># self.context 中有request和view上下文</span>        <span class="token comment"># self.context['view'].action 可以取到动作</span>        <span class="token comment"># attrs 是需要序列化的数据</span>        <span class="token comment"># raise serializers.ValidationError('xxx错误') # 有问题报错</span>        <span class="token keyword">return</span> attrs  <span class="token comment"># 没问题返回数据</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        <span class="token comment"># fields = ('id', ) # 临时添加字段也需要写在这里</span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment"># 所有字段</span>        <span class="token comment"># exclude = ['id'] # 排除 id 字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 指定字段为 read_only,</span>        <span class="token comment"># 扩展address： extra_kwargs = &#123;&#125; # 局部替换某些字段的设定, 或者新增设定</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"min_length"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 给地址增加 最小长度限制</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token string">'默认测试地址'</span><span class="token punctuation">,</span>  <span class="token comment"># 增加默认值</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UserUnActiveSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># 临时添加字段也需要写在这里</span>        <span class="token comment"># fields = '__all__' # 所有字段</span></code></pre><h3 id="2-3-app下-views-py"><a href="#2-3-app下-views-py" class="headerlink" title="2.3 app下/views.py"></a>2.3 app下/views.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BasicAuthentication<span class="token punctuation">,</span> SessionAuthentication<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>filters <span class="token keyword">import</span> OrderingFilter<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token punctuation">,</span> IsAdminUser<span class="token punctuation">,</span> IsAuthenticated<span class="token punctuation">,</span> IsAuthenticatedOrReadOnly<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>pagination <span class="token keyword">import</span> PageNumberPagination<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> BasePermission<span class="token punctuation">,</span> SAFE_METHODS<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer<span class="token punctuation">,</span> UserUnActiveSerializer<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 需要认证才能访问的视图</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment"># 分页（局部）：自定义分页器 局部</span><span class="token keyword">class</span> <span class="token class-name">PageNum</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 查询字符串中代表每页返回数据数量的参数名, 默认值: None</span>    page_size_query_param <span class="token operator">=</span> <span class="token string">'page_size'</span>    <span class="token comment"># 查询字符串中代表页码的参数名, 有默认值: page</span>    <span class="token comment"># page_query_param = 'page'</span>    <span class="token comment"># 一页中最多的结果条数</span>    max_page_size <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment"># 自定义权限（局部）</span><span class="token keyword">class</span> <span class="token class-name">MyPermission</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># has_permission 是用户对这个视图有没有 GET POST PUT PATCH DELETE 权限的分别判断</span>    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_perm'</span><span class="token punctuation">)</span>        <span class="token comment"># print(view.kwargs.get("pk"), request.user.id)</span>        <span class="token triple-quoted-string string">"""判断用户对模型有没有访问权"""</span>        <span class="token comment"># 任何用户对使用此权限类的视图都有访问权限</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>            <span class="token comment"># 管理员对用户模型有访问权</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> view<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 携带的id和用户的id相同时有访问权</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment"># has_object_permission 是用户过了 has_permission 判断有权限以后，再判断这个用户有没有对一个具体的对象有没有操作权限</span>        <span class="token comment"># 这样设置以后，即使是django admin管理员也只能查询自己user标的信息，不能查询其他用户的单条信息</span>    <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_object_perm'</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">"""获取单个数据时,判断用户对某个数据对象是否有访问权限"""</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer  <span class="token comment"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment"># # 1.认证：自定义认证类, 自定义会覆盖全局配置</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>BasicAuthentication<span class="token punctuation">,</span> SessionAuthentication<span class="token punctuation">)</span>    <span class="token comment"># # 2.权限：自定义权限类</span>    <span class="token comment"># permission_classes = (MyPermission,)</span>    <span class="token comment"># 3.分页：自定义分页器 覆盖全局配置</span>    <span class="token comment"># pagination_class = PageNum</span>    <span class="token comment"># # 4.限流：自定义限流类</span>    <span class="token comment"># throttle_classes = [UserRateThrottle]</span>    <span class="token comment"># # 5.过滤：指定过滤方法类, 排序方法类, 一个或多个</span>    <span class="token comment"># filter_backends = (DjangoFilterBackend, OrderingFilter)  # 同时支持过滤和排序</span>    <span class="token comment"># # 5.1指定排序字段, 不设置, 排序功能不起效</span>    <span class="token comment"># ordering_fields = ('date_joined', 'id')  # ?ordering=-id</span>    <span class="token comment"># # 5.2指定过滤字段, 不设置, 过滤功能不起效</span>    <span class="token comment"># filter_fields = ('username', 'phone', 'is_active')  # ?username = tom &amp; phone = &amp; is_active = true</span>    <span class="token comment"># 根据不同的请求, 获得不同的序列化器</span>    <span class="token comment"># def get_serializer_class(self):</span>    <span class="token comment">#     if self.action == 'unactived':</span>    <span class="token comment">#         return UserUnActiveSerializer</span>    <span class="token comment">#     else:</span>    <span class="token comment">#         return UserSerializer</span>    <span class="token comment">#</span>    <span class="token comment"># @action(methods=['get'], detail=False)</span>    <span class="token comment"># def unactived(self, request, *args, **kwargs):</span>    <span class="token comment">#     # 获取查询集, 过滤出未激活的用户</span>    <span class="token comment">#     qs = self.queryset.filter(is_active=False)</span>    <span class="token comment">#     # 使用序列化器, 序列化查询集, 并且是</span>    <span class="token comment">#     ser = self.get_serializer(qs, many=True)</span>    <span class="token comment">#     return Response(ser.data)</span>    <span class="token comment">#</span>    <span class="token comment"># @action(methods=['get'], detail=False)</span>    <span class="token comment"># def actived(self, request, *args, **kwargs):</span>    <span class="token comment">#     # 获取查询集, 过滤出未激活的用户</span>    <span class="token comment">#     qs = self.queryset.filter(is_active=True)</span>    <span class="token comment">#     # 使用序列化器, 序列化查询集, 并且是</span>    <span class="token comment">#     ser = self.get_serializer(qs, many=True)</span>    <span class="token comment">#     return Response(ser.data)</span></code></pre><h2 id="3-0-测试接口"><a href="#3-0-测试接口" class="headerlink" title="3.0 测试接口"></a>3.0 测试接口</h2><h3 id="3-1-查询接口-浏览器下或者测试工具下"><a href="#3-1-查询接口-浏览器下或者测试工具下" class="headerlink" title="3.1 查询接口   浏览器下或者测试工具下"></a>3.1 查询接口   浏览器下或者测试工具下</h3><pre class="language-none"><code class="language-none">#1.查询所有用户http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200007507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#2.查询id&#x3D;1的用户http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;1&#x2F;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200022859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#3.查询 用户名（tom），激活的用户http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;?username&#x3D;tom&amp;phone&#x3D;&amp;is_active&#x3D;true</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200101417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#4.查询所有用户 用id 反向排序http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;?ordering&#x3D;-id</code></pre><p><img src="https://img-blog.csdnimg.cn/2020102720013172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#5.查询用户表中第一页，每页显示一条数据http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;?page&#x3D;1&amp;page_size&#x3D;1</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200144444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="3-2-权限认证"><a href="#3-2-权限认证" class="headerlink" title="3.2  权限认证"></a>3.2  权限认证</h3><h5 id="全局权限"><a href="#全局权限" class="headerlink" title="全局权限"></a>全局权限</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment"># 'rest_framework.permissions.IsAdminUser', # 管理员可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticated', # 认证用户可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticatedOrReadOnly', # 认证用户可以访问, 否则只能读取</span>        <span class="token comment"># 'rest_framework.permissions.AllowAny', # 所有用户都可以访问</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h5 id="自定义权限-需要登录才能操作"><a href="#自定义权限-需要登录才能操作" class="headerlink" title="自定义权限  需要登录才能操作"></a>自定义权限  需要登录才能操作</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyPermission</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># has_permission 是用户对这个视图有没有 GET POST PUT PATCH DELETE 权限的分别判断</span><span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_perm'</span><span class="token punctuation">)</span>    <span class="token comment"># print(view.kwargs.get("pk"), request.user.id)</span>    <span class="token triple-quoted-string string">"""判断用户对模型有没有访问权"""</span>    <span class="token comment"># 任何用户对使用此权限类的视图都有访问权限</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>        <span class="token comment"># 管理员对用户模型有访问权</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">elif</span> view<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 携带的id和用户的id相同时有访问权</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># has_object_permission 是用户过了 has_permission 判断有权限以后，再判断这个用户有没有对一个具体的对象有没有操作权限</span>    <span class="token comment"># 这样设置以后，即使是django admin管理员也只能查询自己user标的信息，不能查询其他用户的单条信息</span><span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_object_perm'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""获取单个数据时,判断用户对某个数据对象是否有访问权限"""</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="3-3-限流"><a href="#3-3-限流" class="headerlink" title="3.3 限流"></a>3.3 限流</h3><h5 id="settings中配置限流"><a href="#settings中配置限流" class="headerlink" title="settings中配置限流"></a>settings中配置限流</h5><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 3.1限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'10000/hour'</span><span class="token punctuation">,</span>  <span class="token comment"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3000/day'</span><span class="token punctuation">,</span>  <span class="token comment"># 未认证用户每天能访问3次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><h3 id="3-4-序列化"><a href="#3-4-序列化" class="headerlink" title="3.4 序列化"></a>3.4 序列化</h3><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">def</span> <span class="token function">address_validate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment"># data：是用户提交的地址这个字段的数据（河南省 郑州市）</span>    <span class="token comment"># 独立校验器</span>    <span class="token comment"># raise serializers.ValidationError('请填写实际地址') # 有错就抛出异常</span>    <span class="token comment"># 没错就返回数据</span>    <span class="token keyword">return</span> data<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1.独立校验器：重新设定字段, 替换掉模型中的设定, 重新设定地址的长度为5</span>    <span class="token comment"># address_validate是自定义的数据校验函数</span>    address <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> validators<span class="token operator">=</span>    <span class="token punctuation">[</span>address_validate<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 2.单一字段验证（validate_字段名）, 验证地址</span>    <span class="token keyword">def</span> <span class="token function">validate_address</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'测试'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'请填写实际地址'</span><span class="token punctuation">)</span>  <span class="token comment"># 有错就抛出异常</span>        <span class="token keyword">return</span> data  <span class="token comment"># 没错就返回结果</span>    <span class="token keyword">def</span> <span class="token function">validate_phone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 不符合手机号格式</span>        <span class="token comment"># raise serializers.ValidationError('手机号格式不正确')</span>        model <span class="token operator">=</span> self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>Meta<span class="token punctuation">.</span>model        num <span class="token operator">=</span> model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>phone<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'手机号已存在'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data    <span class="token comment"># 3.所有属性验证器</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># attrs：&#123;"username":"zhangsan", "phone":"18538752511", ....&#125;</span>        <span class="token comment"># 所有属性验证器</span>        <span class="token comment"># self.context 中有request和view上下文</span>        <span class="token comment"># self.context['view'].action 可以取到动作</span>        <span class="token comment"># attrs 是需要序列化的数据</span>        <span class="token comment"># raise serializers.ValidationError('xxx错误') # 有问题报错</span>        <span class="token keyword">return</span> attrs  <span class="token comment"># 没问题返回数据</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        <span class="token comment"># fields = ('id', ) # 临时添加字段也需要写在这里</span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment"># 所有字段</span>        <span class="token comment"># exclude = ['id'] # 排除 id 字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 指定字段为 read_only,</span>        <span class="token comment"># 扩展address： extra_kwargs = &#123;&#125; # 局部替换某些字段的设定, 或者新增设定</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"min_length"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 给地址增加 最小长度限制</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token string">'默认测试地址'</span><span class="token punctuation">,</span>  <span class="token comment"># 增加默认值</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UserUnActiveSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># 临时添加字段也需要写在这里</span>        <span class="token comment"># fields = '__all__' # 所有字段</span></code></pre><h3 id="3-5-自定义分页"><a href="#3-5-自定义分页" class="headerlink" title="3.5 自定义分页"></a>3.5 自定义分页</h3><h5 id="自定义分页"><a href="#自定义分页" class="headerlink" title="自定义分页"></a>自定义分页</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 分页（局部）：自定义分页器 局部</span><span class="token keyword">class</span> <span class="token class-name">PageNum</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 查询字符串中代表每页返回数据数量的参数名, 默认值: None</span>    page_size_query_param <span class="token operator">=</span> <span class="token string">'page_size'</span>    <span class="token comment"># 查询字符串中代表页码的参数名, 有默认值: page</span>    <span class="token comment"># page_query_param = 'page'</span>    <span class="token comment"># 一页中最多的结果条数</span>    max_page_size <span class="token operator">=</span> <span class="token number">2</span></code></pre><h6 id="在视图函数中调用"><a href="#在视图函数中调用" class="headerlink" title="在视图函数中调用"></a>在视图函数中调用</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>pagination_class <span class="token operator">=</span> PageNum</code></pre><h3 id="3-6-过滤和排序"><a href="#3-6-过滤和排序" class="headerlink" title="3.6 过滤和排序"></a>3.6 过滤和排序</h3><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer  <span class="token comment"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment"># 过滤：指定过滤方法类, 排序方法类, 一个或多个</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> OrderingFilter<span class="token punctuation">)</span>  <span class="token comment"># 同时支持过滤和排序</span>    <span class="token comment"># 指定排序字段, 不设置, 排序功能不起效</span>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'date_joined'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment"># ?ordering=-id</span>    <span class="token comment"># 指定过滤字段, 不设置, 过滤功能不起效</span>    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># ?username = tom &amp; phone = &amp; is_active = true</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>pagination_class <span class="token operator">=</span> PageNum</code></pre><h3 id="3-6-过滤和排序-1"><a href="#3-6-过滤和排序-1" class="headerlink" title="3.6 过滤和排序"></a>3.6 过滤和排序</h3><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer  <span class="token comment"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment"># 过滤：指定过滤方法类, 排序方法类, 一个或多个</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> OrderingFilter<span class="token punctuation">)</span>  <span class="token comment"># 同时支持过滤和排序</span>    <span class="token comment"># 指定排序字段, 不设置, 排序功能不起效</span>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'date_joined'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment"># ?ordering=-id</span>    <span class="token comment"># 指定过滤字段, 不设置, 过滤功能不起效</span>    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># ?username = tom &amp; phone = &amp; is_active = true</span></code></pre>]]></content>
    
    
    <summary type="html">雄关漫道真如铁，而今迈步从头越</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django" scheme="https://wyx6.top/categories/python3/django/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="drf" scheme="https://wyx6.top/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>基于Kubernetes(k8s)搭建Gunicorn+Django/Flask高可用Web集群</title>
    <link href="https://wyx6.top/k8s%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1/"/>
    <id>https://wyx6.top/k8s%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-02-21T06:09:21.000Z</published>
    <updated>2021-02-21T11:49:15.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  2021年，君不言容器技术则已，欲言容器则必称Docker，毫无疑问，它是当今最流行的容器技术之一，但是当我们面对海量的镜像与容器时，怎样快速精准的对海量容器进行管理和编排就又成了新的课题，此时，由Google开源的Kubernetes(读音[kubə’netis]，业界也有称其k8s的，但k8s其实就是文盲版的Kubernetes，只是因为k和s之间有8个字母)就应时而生了，它是一个开源的用于多个主机虚拟成一个云平台后进行容器资源管理和应用编排引擎，致力于让部署容器化应用简单并且高效，提供了应用的全生命周期管理，如应用部署，规划，更新，维护等机制。本次我们尝试在Win10系统下，利用Kubernetes部署Gunicorn+Flask高可用Web集群项目。</p><h1 id="安装Docker的俩种方式"><a href="#安装Docker的俩种方式" class="headerlink" title="安装Docker的俩种方式"></a>安装Docker的俩种方式</h1><h2 id="一、-DockerDesktop（推荐）不需要开启Hyper-v可以和虚拟机兼容的"><a href="#一、-DockerDesktop（推荐）不需要开启Hyper-v可以和虚拟机兼容的" class="headerlink" title="一、 DockerDesktop（推荐）不需要开启Hyper-v可以和虚拟机兼容的"></a>一、 DockerDesktop（推荐）<strong>不需要开启Hyper-v可以和虚拟机兼容的</strong></h2><p><a href="https://www.docker.com/products/docker-desktop">[点击下载安装包]</a></p><p>最新版系统（百度问客服自行解决）</p><p><a href="https://download.csdn.net/download/weixin_45954124/15402674">所需文件</a></p><p><img src="https://img-blog.csdnimg.cn/20210221184356943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">安装WSL2</a></h2><h3 id="步骤-1-启用适用于-Linux-的-Windows-子系统"><a href="#步骤-1-启用适用于-Linux-的-Windows-子系统" class="headerlink" title="步骤 1 - 启用适用于 Linux 的 Windows 子系统"></a>步骤 1 - 启用适用于 Linux 的 Windows 子系统</h3><p>需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。</p><p>以管理员身份打开 PowerShell 并运行：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p>建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-6---install-your-linux-distribution-of-choice">步骤 6 - 安装所选的 Linux 发行版</a>。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。</p><h3 id="步骤-2-检查运行-WSL-2-的要求"><a href="#步骤-2-检查运行-WSL-2-的要求" class="headerlink" title="步骤 2 - 检查运行 WSL 2 的要求"></a>步骤 2 - 检查运行 WSL 2 的要求</h3><p>若要更新到 WSL 2，需要运行 Windows 10。</p><ul><li>对于 x64 系统：<strong>版本 1903</strong> 或更高版本，采用 <strong>内部版本 18362</strong> 或更高版本。</li><li>对于 ARM64 系统：<strong>版本 2004</strong> 或更高版本，采用 <strong>内部版本 19041</strong> 或更高版本。</li><li>低于 18362 的版本不支持 WSL 2。 使用 <a href="https://www.microsoft.com/software-download/windows10">Windows Update 助手</a>更新 Windows 版本。</li></ul><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 （或者在 Windows 命令提示符下输入 <code>ver</code> 命令）。 更新到“设置”菜单中的<a href="ms-settings:windowsupdate">最新 Windows 版本</a>。</p><p> 备注</p><p>如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 阅读详细信息：<a href="https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/">WSL 2 即将支持 Windows 10 版本 1903 和 1909</a>。 请参阅<a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#im-on-windows-10-version-1903-and-i-still-do-not-see-options-for-wsl-2">疑难解答说明</a>。</p><h3 id="步骤-3-启用虚拟机功能"><a href="#步骤-3-启用虚拟机功能" class="headerlink" title="步骤 3 - 启用虚拟机功能"></a>步骤 3 - 启用虚拟机功能</h3><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要<a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed">虚拟化功能</a>才能使用此功能。</p><p>以管理员身份打开 PowerShell 并运行：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p><strong>重新启动</strong> 计算机，以完成 WSL 安装并更新到 WSL 2。</p><h3 id="步骤-4-下载-Linux-内核更新包"><a href="#步骤-4-下载-Linux-内核更新包" class="headerlink" title="步骤 4 - 下载 Linux 内核更新包"></a>步骤 4 - 下载 Linux 内核更新包</h3><ol><li><p>下载最新包：</p><ul><li><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></p><p>备注</p></li></ul><p>如果使用的是 ARM64 计算机，请下载 <a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi">ARM64 包</a>。 如果不确定自己计算机的类型，请打开命令提示符或 PowerShell，并输入：<code>systeminfo | find &quot;System Type&quot;</code>。</p></li><li><p>运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）</p></li></ol><p>安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）</p><p> 备注</p><p>有关详细信息，请参阅 <a href="https://aka.ms/cliblog">Windows 命令行博客</a>上的文章<a href="https://devblogs.microsoft.com/commandline/wsl2-will-be-generally-available-in-windows-10-version-2004">对更新 WSL2 Linux 内核的更改</a>。</p><h3 id="步骤-5-将-WSL-2-设置为默认版本"><a href="#步骤-5-将-WSL-2-设置为默认版本" class="headerlink" title="步骤 5 - 将 WSL 2 设置为默认版本"></a>步骤 5 - 将 WSL 2 设置为默认版本</h3><p>打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2</code></pre><h3 id="步骤-6-安装所选的-Linux-分发"><a href="#步骤-6-安装所选的-Linux-分发" class="headerlink" title="步骤 6 - 安装所选的 Linux 分发"></a>步骤 6 - 安装所选的 Linux 分发</h3><ol><li><p>打开 <a href="https://aka.ms/wslstore">Microsoft Store</a>，并选择你偏好的 Linux 分发版。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/store.png" alt="Microsoft Store 中的 Linux 分发版的视图" loading="lazy"></p><p>单击以下链接会打开每个分发版的 Microsoft Store 页面：</p><ul><li><a href="https://www.microsoft.com/store/apps/9pjn388hp8c9">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9n6svws3rx71">Ubuntu 20.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9NJFZK00FGKV">openSUSE Leap 15.1</a></li><li><a href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1">SUSE Linux Enterprise Server 12 SP5</a></li><li><a href="https://www.microsoft.com/store/apps/9PN498VPMF3Z">SUSE Linux Enterprise Server 15 SP1</a></li><li><a href="https://www.microsoft.com/store/apps/9PKR34TNCV07">Kali Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9MSVKQC78PK6">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc">Fedora Remix for WSL</a></li><li><a href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P">Pengwin</a></li><li><a href="https://www.microsoft.com/store/apps/9N8LP0X93VCP">Pengwin Enterprise</a></li><li><a href="https://www.microsoft.com/store/apps/9p804crf0395">Alpine WSL</a></li></ul></li><li><p>在分发版的页面中，选择“获取”。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntustore.png" alt="Microsoft Store 中的 Linux 分发版" loading="lazy"></p></li></ol><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 未来的所有启动时间应不到一秒。</p><p>然后，需要<a href="https://docs.microsoft.com/zh-cn/windows/wsl/user-support">为新的 Linux 分发版创建用户帐户和密码</a>。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntuinstall.png" alt="Windows 控制台中的 Ubuntu 解包" loading="lazy"></p><p><strong>祝贺你！现已成功安装并设置了与 Windows 操作系统完全集成的 Linux 分发！</strong></p><h3 id="安装-Windows-终端（可选）"><a href="#安装-Windows-终端（可选）" class="headerlink" title="安装 Windows 终端（可选）"></a>安装 Windows 终端（可选）</h3><p>Windows 终端可启用多个选项卡（在多个 Linux 命令行、Windows 命令提示符、PowerShell 和 Azure CLI 等之间快速切换）、创建键绑定（用于打开或关闭选项卡、复制粘贴等的快捷方式键）、使用搜索功能，以及使用自定义主题（配色方案、字体样式和大小、背景图像/模糊/透明度）。 <a href="https://docs.microsoft.com/zh-cn/windows/terminal">了解详细信息。</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows/terminal/get-started">安装 Windows 终端</a>。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/terminal.png" alt="Windows 终端" loading="lazy"></p><h3 id="将分发版版本设置为-WSL-1-或-WSL-2"><a href="#将分发版版本设置为-WSL-1-或-WSL-2" class="headerlink" title="将分发版版本设置为 WSL 1 或 WSL 2"></a>将分发版版本设置为 WSL 1 或 WSL 2</h3><p>可打开 PowerShell 命令行并输入以下命令（仅在 <a href="ms-settings:windowsupdate">Windows 内部版本 18362 或更高版本</a>中可用），检查分配给每个已安装的 Linux 分发版的 WSL 版本：<code>wsl -l -v</code></p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>list <span class="token operator">--</span>verbose</code></pre><p>若要将分发版设置为受某一 WSL 版本支持，请运行：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-version</span> &lt;distribution name> &lt;versionNumber></code></pre><p>请确保将 <code>&lt;distribution name&gt;</code> 替换为你的分发版的实际名称，并将 <code>&lt;versionNumber&gt;</code> 替换为数字“1”或“2”。 可以随时更改回 WSL 1，方法是运行与上面相同的命令，但将“2”替换为“1”。</p><p> 备注</p><p>从 WSL 1 更新到 WSL 2 可能需要几分钟才能完成，具体取决于目标分发版的大小。 如果从 Windows 10 周年更新或创意者更新运行 WSL 1 的旧（历史）安装，可能会遇到更新错误。 按照这些说明<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-legacy#uninstallingremoving-the-legacy-distro">卸载并删除任何旧分发</a>。</p><p>如果 <code>wsl --set-default-version</code> 结果为无效命令，请输入 <code>wsl --help</code>。 如果 <code>--set-default-version</code> 未列出，则表示你的 OS 不支持它，你需要更新到版本 1903（内部版本 18362）或更高版本。</p><p>运行命令后如果看到此消息：<code>WSL 2 requires an update to its kernel component. For information please visit https://aka.ms/wsl2kernel</code>。 仍需要安装 MSI Linux 内核更新包。</p><p>此外，如果要使 WSL 2 成为你的默认体系结构，可以通过此命令执行该操作：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2</code></pre><p>这会将安装的任何新分发版的版本设置为 WSL 2。</p><h2 id="安装完成后-这时我们开启虚拟机发现是可以兼容的"><a href="#安装完成后-这时我们开启虚拟机发现是可以兼容的" class="headerlink" title="安装完成后  这时我们开启虚拟机发现是可以兼容的"></a>安装完成后  这时我们开启虚拟机发现是可以兼容的</h2><p><img src="https://img-blog.csdnimg.cn/20210221151008191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="二、普通安装"><a href="#二、普通安装" class="headerlink" title="二、普通安装"></a>二、普通安装</h1><p>这里我们使用的就是Docker官方最新版3.1.0，内部集成的Kubernetes版本是1.19.3，在安装之前有两点要说明下，如果是Windows用户，需要确保系统版本为专业版：</p><p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20210204110237_52059.png" alt="img" loading="lazy"></p><p>  第二，在专业版的基础上，开启系统的Hyper-v虚拟化功能：</p><p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20210204110211_69757.png" alt="img" loading="lazy"></p><p>  双击安装包进行安装，默认安装在C盘目录，成功后，启动Docker-desktop，一般情况下，Docker很容易启动成功，</p><h1 id="三、安装Kubernetes"><a href="#三、安装Kubernetes" class="headerlink" title="三、安装Kubernetes"></a>三、安装<a href="https://www.kubernetes.org.cn/docs"><strong>Kubernetes</strong></a></h1><p>但是Kubernetes往往会卡在启动界面，这是因为一些学术问题导致无法下载Kubernetes的依赖镜像，此时我们需要另辟蹊径，采用一些开源的三方库迂回帮我们下载这些镜像，这里推荐这个开源项目：<a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">https://github.com/AliyunContainerService/k8s-for-docker-desktop</a></p><p><a href="https://download.csdn.net/download/weixin_45954124/15401699?spm=1001.2014.3001.5501">最新版下载戳我</a></p><p>  输入命令拉取项目:</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;AliyunContainerService&#x2F;k8s-for-docker-desktop.git</code></pre><p>  进入项目的目录内，然后检查自己的Kubernetes版本号，该项目默认拉取的就是1.19.3的依赖镜像，如果您安装的Kubernetes是老版本，需要自行切换版本进行拉取操作：</p><blockquote><p>如Kubernetes版本为 v1.18.8, 请使用下面命令切换 v1.18.8 分支 git checkout v1.18.8<br>如Kubernetes版本为 v1.18.6, 请使用下面命令切换 v1.18.6 分支 git checkout v1.18.6<br>如Kubernetes版本为 v1.18.3, 请使用下面命令切换 v1.18.3 分支 git checkout v1.18.3<br>如Kubernetes版本为 v1.16.5, 请使用下面命令切换 v1.16.5 分支 git checkout v1.16.5<br>如Kubernetes版本为 v1.15.5, 请使用下面命令切换 v1.15.5 分支 git checkout v1.15.5<br>如Kubernetes版本为 v1.15.4, 请使用下面命令切换 v1.15.4 分支 git checkout v1.15.4<br>如Kubernetes版本为 v1.14.8, 请使用下面命令切换 v1.14.8 分支 git checkout v1.14.8<br>如Kubernetes版本为 v1.14.7, 请使用下面命令切换 v1.14.7 分支 git checkout v1.14.7<br>如Kubernetes版本为 v1.14.6, 请使用下面命令切换 v1.14.6 分支 git checkout v1.14.6<br>如Kubernetes版本为 v1.14.3, 请使用下面命令切换 v1.14.3 分支 git checkout v1.14.3<br>如Kubernetes版本为 v1.14.1, 请使用下面命令切换 v1.14.1 分支 git checkout v1.14.1<br>如Kubernetes版本为 v1.13.0, 请使用下面命令切换 v1.13.0 分支 git checkout v1.13.0<br>如Kubernetes版本为 v1.10.11, 请使用下面命令切换 v1.10.11 分支 git checkout v1.10.11</p></blockquote><p>下载完成进入k8s-for-docker-desktop.git执行</p><pre class="language-none"><code class="language-none">load_images.sh</code></pre><p>  执行后发现代理拉取Kubernetes依赖镜像：</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop\k8s-for-docker-desktop&gt; load_images.sh执行策略更改执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): yPS C:\Users\wyx&gt; .\load_images.ps1k8s.gcr.io&#x2F;pause:3.2&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.23.2: Pulling from google_containers&#x2F;pauseDigest: sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814fStatus: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814fk8s.gcr.io&#x2F;kube-controller-manager:v1.19.3&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3v1.19.3: Pulling from google_containers&#x2F;kube-controller-managerDigest: sha256:1ad35b623b9123c6aab99306ba5427e2829b36b378b9b80a6e988713ac5bffd4Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager@sha256:1ad35b623b9123c6aab99306ba5427e2829b36b378b9b80a6e988713ac5bffd4</code></pre><p>  拉取结束后，执行命令查看镜像列表：</p><pre class="language-none"><code class="language-none">docker images</code></pre><p>  可以看到，针对Kubernetes1.19.3的基础镜像列表：</p><pre class="language-none"><code class="language-none">C:\Users\wyx&gt;docker imagesREPOSITORY                                                       TAG                                                     IMAGE ID       CREATED         SIZEdocker&#x2F;desktop-kubernetes                                        kubernetes-v1.19.3-cni-v0.8.5-critools-v1.17.0-debian   bb2106081d17   2 months ago    285MBk8s.gcr.io&#x2F;kube-proxy                                            v1.19.3                                                 cdef7632a242   4 months ago    118MBk8s.gcr.io&#x2F;kube-scheduler                                        v1.19.3                                                 aaefbfa906bd   4 months ago    45.7MBk8s.gcr.io&#x2F;kube-apiserver                                        v1.19.3                                                 a301be0cd44b   4 months ago    119MBk8s.gcr.io&#x2F;kube-controller-manager                               v1.19.3                                                 9b60aca1d818   4 months ago    111MBk8s.gcr.io&#x2F;etcd                                                  3.4.13-0                                                0369cf4303ff   5 months ago    253MBk8s.gcr.io&#x2F;coredns                                               1.7.0                                                   bfe3a36ebd25   8 months ago    45.2MBk8s.gcr.io&#x2F;pause                                                 3.2                                                     80d28bedfe5d   12 months ago   683kB</code></pre><p>​    <img src="https://img-blog.csdnimg.cn/20210221152623172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>Windows用户不需额外操作，直接重启Docker-desktop，并且点击开启Kubernetes服务：</p><p>  随后，在命令行中键入命令:</p><pre class="language-none"><code class="language-none">kubectl version</code></pre><p>  如果能返回版本号说明安装和配置成功：</p><pre class="language-none"><code class="language-none">C:\Users\wyx&gt;kubectl versionClient Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;19&quot;, GitVersion:&quot;v1.19.3&quot;, GitCommit:&quot;1e11e4a2108024935ecfcb2912226cedeafd99df&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-14T12:50:19Z&quot;, GoVersion:&quot;go1.15.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;windows&#x2F;amd64&quot;&#125;Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;19&quot;, GitVersion:&quot;v1.19.3&quot;, GitCommit:&quot;1e11e4a2108024935ecfcb2912226cedeafd99df&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-14T12:41:49Z&quot;, GoVersion:&quot;go1.15.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</code></pre><p>  接下来，我们简单的部署一下Kubernetes容器，看看和Docker部署有何不同，先来看看Docker传统的部署方式，假设部署一台redis应用，首先拉取镜像：</p><pre class="language-none"><code class="language-none">docker pull redis</code></pre><p>  启动容器：</p><pre class="language-none"><code class="language-none">docker run -p 6380:6379 --name redis redis</code></pre><p>  使用redis客户端进行链接：</p><pre class="language-none"><code class="language-none">redis-cli -p 6380</code></pre><p>  返回数据库链接状态：</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; redis-cli -p 6380127.0.0.1:6380&gt; pingPONG</code></pre><p>  没有任何问题，因为Docker直接操作的对象就是镜像和容器，而Kubernetes是基于Deployment来对集群的Pod和rs服务进行管理，每一个Deployment 都对应集群中的一次部署，所以Deployment是基本的 Kubernetes对象。</p><p>  首先建立Deployment对象：</p><pre class="language-none"><code class="language-none">kubectl create deployment --image&#x3D;redis redis</code></pre><p>  这里镜像还是使用刚才拉取的redis镜像，deployment别名设置为redis:</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl create deployment --image&#x3D;redis redisdeployment.apps&#x2F;redis created</code></pre><p>  创建成功后，启动rs服务：</p><pre class="language-none"><code class="language-none">kubectl expose deployment redis --port&#x3D;6379 --name&#x3D;redis-server</code></pre><p>  这里的端口号是pod中隔离容器的端口，而非主节点端口：</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl expose deployment redis --port&#x3D;6379 --name&#x3D;redis-serverservice&#x2F;redis-server exposed</code></pre><p>  随后获取启动的pod列表：</p><pre class="language-none"><code class="language-none">kubectl get pods</code></pre><p>  我们知道pod是集群执行的最小单位，这里使用get pods来查看运行的pod：</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl get podsNAME                     READY   STATUS    RESTARTS   AGEredis-6749d7bd65-l8gnw   1&#x2F;1     Running   0          64s</code></pre><p>  可以看到已经运行成功，最后需要将pod端口和主节点端口进行端口映射操作：</p><pre class="language-none"><code class="language-none">kubectl port-forward redis-6749d7bd65-l8gnw 6380:6379</code></pre><p>  这里的参数就是pod的name:</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl port-forward redis-6749d7bd65-l8gnw 6380:6379             Forwarding from 127.0.0.1:6380 -&gt; 6379Forwarding from [::1]:6380 -&gt; 6379Handling connection for 6380Handling connection for 6380</code></pre><p>  随后使用redis客户端进行链接：</p><pre class="language-none"><code class="language-none">PS C:\Users\Administrator&gt; redis-cli -p 6380127.0.0.1:6380&gt; pingPONG</code></pre><p>  这里就部署成功了，虽然流程上要比Docker直接部署要略微繁复一些，但是Kubernetes自带良好的伸缩和扩展以及高可用特性，一旦pod僵死或者宕机，可以自动生成新的pod的来实现高可用。</p><p><img src="https://img-blog.csdnimg.cn/20210221141151400.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>  接下来尝试一些进阶操作，部署Gunicorn+Flask的Web应用，还记得之前的这篇文章：<a href="https://v3u.cn/a_id_165">利用DockerHub在Centos7.7环境下部署Nginx反向代理Gunicorn+Flask独立架构</a> 吗？里面详细阐述了如何使用Dockerfile打包镜像，这里我们拉取已经打包好的flask+gunicorn镜像：</p><h1 id="四、Django"><a href="#四、Django" class="headerlink" title="四、Django"></a>四、Django</h1><pre class="language-none"><code class="language-none">docker pull 515250339&#x2F;mydjango</code></pre><p>  接着建立基于deployment的部署配置文件：deployment.yaml</p><pre class="language-none"><code class="language-none">apiVersion: v1kind: Servicemetadata:  name: mydjangospec:  selector:    app: mydjango  ports:  - protocol: &quot;TCP&quot;    port: 8000    targetPort: 8000  type: LoadBalancer---apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: mydjangospec:  selector:    matchLabels:      app: mydjango  replicas: 4  template:    metadata:      labels:        app: mydjango    spec:      containers:      - name: mydjango        image: 515250339&#x2F;mydjango        imagePullPolicy: Never        ports:        - containerPort: 8000</code></pre><p>  这个配置文件的含义是：将本地的myfalsk镜像作为Deployment基础镜像部署，集群运行四个pod来维持生产环境的服务保证，运行协议当然是TCP，主节点端口号和pod端口保持一致都是5000</p><p>  然后执行命令启动服务：</p><pre class="language-none"><code class="language-none">kubectl apply -f deployment.yaml</code></pre><p>  查看服务状态：</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl get podNAME                        READY   STATUS    RESTARTS   AGEmydjango-7bd66b79c9-l72t7   1&#x2F;1     Running   0          16smydjango-7bd66b79c9-lnv78   1&#x2F;1     Running   0          16smydjango-7bd66b79c9-trf9f   1&#x2F;1     Running   0          16smydjango-7bd66b79c9-wndd6   1&#x2F;1     Running   0          16s</code></pre><p>  可以看到四台pod同时运行，访问网址:<a href="http://localhost:8000/">http://localhost:8000</a></p><p>  没有问题，即使我们手动kill一台pod:</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl delete pod mydjango-7bd66b79c9-l72t7pod &quot;mydjango-7bd66b79c9-l72t7&quot; deleted</code></pre><p><img src="https://img-blog.csdnimg.cn/20210221183335183.gif" alt="在这里插入图片描述" loading="lazy"></p><h1 id="五、Flask"><a href="#五、Flask" class="headerlink" title="五、Flask"></a>五、Flask</h1><p>同理flask也是一样的流程</p><pre class="language-none"><code class="language-none">docker pull zcxey2911&#x2F;myflask</code></pre><p>  接着建立基于deployment的部署配置文件：deployment.yaml</p><pre class="language-none"><code class="language-none">apiVersion: v1kind: Servicemetadata:  name: myflaskspec:  selector:    app: myflask  ports:  - protocol: &quot;TCP&quot;    port: 5000    targetPort: 5000  type: LoadBalancer---apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: myflaskspec:  selector:    matchLabels:      app: myflask  replicas: 4  template:    metadata:      labels:        app: myflask    spec:      containers:      - name: myflask        image: zcxey2911&#x2F;myflask        imagePullPolicy: Never        ports:        - containerPort: 5000</code></pre><p>  这个配置文件的含义是：将本地的myfalsk镜像作为Deployment基础镜像部署，集群运行四个pod来维持生产环境的服务保证，运行协议当然是TCP，主节点端口号和pod端口保持一致都是5000</p><p>  然后执行命令启动服务：</p><pre class="language-none"><code class="language-none">kubectl apply -f deployment.yaml</code></pre><p>  查看服务状态：</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl get podsNAME                      READY   STATUS    RESTARTS   AGEmyflask-dbcbcf9bf-6chj2   1&#x2F;1     Running   0          87smyflask-dbcbcf9bf-9qrzt   1&#x2F;1     Running   0          5m21smyflask-dbcbcf9bf-f4nqk   1&#x2F;1     Running   0          5m21smyflask-dbcbcf9bf-pbp6m   1&#x2F;1     Running   0          5m21sredis-6749d7bd65-r5r8g    1&#x2F;1     Running   0          4h25m</code></pre><p>  可以看到四台pod同时运行，访问网址:<a href="http://localhost:5000/">http://localhost:5000</a></p><p>  没有问题，即使我们手动kill一台pod:</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt; kubectl delete pod myflask-dbcbcf9bf-667rfpod &quot;myflask-dbcbcf9bf-667rf&quot; deleted</code></pre><p><img src="https://img-blog.csdnimg.cn/20210221183334851.gif" alt="在这里插入图片描述" loading="lazy"></p><p>  可以看到集群立刻又会重新生成一个pod来维持服务稳定，这就是Docker原生容器所不具备的高可用特性。</p><p>关闭服务</p><pre class="language-none"><code class="language-none">kubectl delete -f deployment.yaml</code></pre><p>可以看到服务已经关闭</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl delete -f deployment.yamlservice &quot;myflask&quot; deleteddeployment.apps &quot;myflask&quot; deletedC:\Users\wyx\Desktop&gt;kubectl get podNAME                     READY   STATUS    RESTARTS   AGE</code></pre><p>  结语：未来已来，将至已至，在21世纪的第二个十年里，阿里、字节跳动、腾讯、百度等中国互联网行业巨擘们，都在加紧深耕容器领域，而Kubernetes也是这些大厂未来的战略核心。有了Kubernetes，我们就可以将整个大规模的服务器对计算资源抽象化通过一个个容器进行自动化且细致化管理，将最终的应用服务交还给用户，而用户则并不需要关心容器本身。</p>]]></content>
    
    
    <summary type="html">一寸宕机一寸血，十万容器十万兵</summary>
    
    
    
    <category term="Docker" scheme="https://wyx6.top/categories/Docker/"/>
    
    <category term="Kubernetes(k8s)" scheme="https://wyx6.top/categories/Docker/Kubernetes-k8s/"/>
    
    
    <category term="项目部署" scheme="https://wyx6.top/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Docker" scheme="https://wyx6.top/tags/Docker/"/>
    
    <category term="Kubernetes(k8s)" scheme="https://wyx6.top/tags/Kubernetes-k8s/"/>
    
    <category term="Win10" scheme="https://wyx6.top/tags/Win10/"/>
    
    <category term="Gunicorn" scheme="https://wyx6.top/tags/Gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>Win10环境下使用Docker容器式部署前后端分离项目Django+Vue.js</title>
    <link href="https://wyx6.top/Win10%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AEDjango-Vue-js/"/>
    <id>https://wyx6.top/Win10%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AEDjango-Vue-js/</id>
    <published>2021-02-19T09:18:06.000Z</published>
    <updated>2021-02-20T00:40:11.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着现代化产品研发的不断推进，我们会发现，几乎每个产品线都会包含功能各异的服务，而且服务与服务之间存在也会存在着错综复杂的依赖和被依赖关系，这就会带来一个世界性难题，项目部署的时候需要运维来手动配制服务之间通信的协议和地址，稍有不慎就会导致服务异常，同时如果服务器因为坏道或者其他原因导致更换物理机，重新部署新环境的成本也会非常之高。因此，我们就会寄希望于Docker这种的容器技术可以让我们构建产品所需要的所有的服务能够迅速快捷的重新部署，并且可以根据需求做横向扩展，且能够保证稳定的容灾性，在出现问题的时候可以利用守护进程自动重启或者启动容灾备份。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>  本次我们将在Win10环境下利用Docker容器技术来对前后端分离项目Django+Vue.js进行打包，分别定制化对应的项目镜像，应对快速部署以及高扩展的需求。</p><p>  首先当然是安装Docker，可以参照这篇视频攻略：<a href="https://www.bilibili.com/video/BV1pE411x72w/">win10安装配置Docker并更换国内源</a>。</p><p>  随后在宿主机安装gunicorn，容器内我们用异步的方式来启动Django</p><pre class="language-python" data-language="python"><code class="language-python">pip3 isntall gunicorn gevent</code></pre><p>  Django项目配置settings.py对应的应用：</p><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'myapp.apps.MyappConfig'</span><span class="token punctuation">,</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'corsheaders'</span><span class="token punctuation">,</span>    <span class="token string">'dwebsocket'</span><span class="token punctuation">,</span>    <span class="token string">'gunicorn'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>  然后在Django项目的根目录编写gunicorn的配置文件：gunicorn.conf.py</p><p><img src="https://img-blog.csdnimg.cn/20210219172543678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessingbind <span class="token operator">=</span> <span class="token string">"0.0.0.0:8000"</span>   <span class="token comment">#绑定的ip与端口workers = 1                #进程数</span></code></pre><p>  这里注意一点，ip必须是0.0.0.0，不要写成127.0.0.1,否则外部环境会访问不到容器内的服务，接下来在项目的根目录编写好依赖列表：requirements.txt</p><pre class="language-none"><code class="language-none">pip freeze &gt; requirements.txt</code></pre><p>  这里需要注意的是，某些依赖的库最好用==标注出小版本，因为一会在容器内通过pip安装的时候，系统有可能会自动帮你安装最新版导致一些依赖报错。</p><p>  下面就是老套路，在根目录编写Dockerfile文件：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM python:3.7.4WORKDIR &#x2F;Project&#x2F;mydjangoCOPY requirements.txt .&#x2F;RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simpleCOPY . .ENV LANG C.UTF-8CMD [&quot;gunicorn&quot;, &quot;mydjango.wsgi:application&quot;,&quot;-c&quot;,&quot;.&#x2F;gunicorn.conf.py&quot;]</code></pre><p>  本次的基础镜像我们选择3.7，毕竟2020年了，与时俱进还是很必要的。</p><p>  ok，万事俱备，运行命令对项目进行打包：</p><p>这里注意一点就是要进入到项目的目录下执行</p><pre class="language-none"><code class="language-none">docker build -t mydjango .</code></pre><pre class="language-none"><code class="language-none">mydjango&gt;docker build -t mydjango .[+] Building 3.9s (10&#x2F;10) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                  0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 297B                                                                  0.0s &#x3D;&gt; [internal] load .dockerignore                                                                     0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                       0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;python:3.7.4                                       1.4s &#x3D;&gt; [1&#x2F;5] FROM docker.io&#x2F;library&#x2F;python:3.7.4@sha256:fc0a398e1987fb1e58909053c11630e06adb3df265fe693  0.0s &#x3D;&gt; [internal] load build context                                                                     2.0s &#x3D;&gt; &#x3D;&gt; transferring context: 37.00kB                                                                  2.0s &#x3D;&gt; CACHED [2&#x2F;5] WORKDIR &#x2F;Project&#x2F;mydjango                                                            0.0s &#x3D;&gt; CACHED [3&#x2F;5] COPY requirements.txt .&#x2F;                                                             0.0s &#x3D;&gt; CACHED [4&#x2F;5] RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple      0.0s &#x3D;&gt; [5&#x2F;5] COPY . .                                                                                    0.1s &#x3D;&gt; exporting to image                                                                                0.2s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                               0.1s &#x3D;&gt; &#x3D;&gt; writing image sha256:8b36bba5eff3adf2dc6555e7b5999978499bd732ede250725952741283adbcec          0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;mydjango                                                           0.0s</code></pre><p><img src="https://img-blog.csdnimg.cn/20210219181000151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  这里我的项目目录是mydjango。</p><p>  第一次打包编译的时候，可能时间会长一点，耐心等一会就可以了，如果中途遇到网络错误导致的失败，反复执行打包命令即可，此时运行命令：</p><pre class="language-none"><code class="language-none">docker images</code></pre><p>  可以看到编译好的镜像大概有1g左右：</p><p><img src="https://img-blog.csdnimg.cn/2021021918133144.png" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">docker imagesREPOSITORY                       TAG       IMAGE ID       CREATED          SIZEmydjango                         latest    8b36bba5eff3   12 seconds ago   1.38GB</code></pre><p>  随后启动镜像服务：</p><pre class="language-none"><code class="language-none">docker run -it --rm -p 8001:8000 mydjango</code></pre><p>  这里我们用端口映射技术将宿主机的5000端口映射到容器内的8000端口，访问Django服务，http://容器ip:8001</p><p><img src="https://img-blog.csdnimg.cn/20210219173026704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  后端搞定，接下来轮到我们的前端服务vue.js了，首先打开vue项目的打包配置文件config/index.js:</p><p><img src="https://img-blog.csdnimg.cn/202102191817105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-js" data-language="js"><code class="language-js">build<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Template for index.html</span>    index<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// Paths</span>    assetsRoot<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    assetsSubDirectory<span class="token operator">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>    assetsPublicPath<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token comment">/**     * Source Maps     */</span>    productionSourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// https://webpack.js.org/configuration/devtool/#production</span>    devtool<span class="token operator">:</span> <span class="token string">'#source-map'</span><span class="token punctuation">,</span>    <span class="token comment">// Gzip off by default as many popular static hosts such as</span>    <span class="token comment">// Surge or Netlify already gzip all static assets for you.</span>    <span class="token comment">// Before setting to `true`, make sure to:</span>    <span class="token comment">// npm install --save-dev compression-webpack-plugin</span>    productionGzip<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    productionGzipExtensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// Run the build command with an extra argument to</span>    <span class="token comment">// View the bundle analyzer report after build finishes:</span>    <span class="token comment">// `npm run build --report`</span>    <span class="token comment">// Set to `true` or `false` to always turn it on or off</span>    bundleAnalyzerReport<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_report  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  将打包目录改成相对路径，同时注意路由的配置，如果曾经修改为history模式记得改回hash：</p><pre class="language-none"><code class="language-none">export default new Router(&#123;  routes:routes,  &#x2F;&#x2F;mode:&#39;history&#39;   &#x2F;*hash*&#x2F;&#125;)</code></pre><p>  准备工作完毕，在vue的项目根目录下编写Dockerfile：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM node:lts-alpine# install simple http server for serving static contentRUN npm install -g http-server# make the &#39;app&#39; folder the current working directoryWORKDIR &#x2F;app# copy both &#39;package.json&#39; and &#39;package-lock.json&#39; (if available)COPY package*.json .&#x2F;# install project dependenciesRUN npm install# copy project files and folders to the current working directory (i.e. &#39;app&#39; folder)COPY . .# build app for production with minificationRUN npm run buildEXPOSE 8080CMD [ &quot;http-server&quot;, &quot;dist&quot; ]</code></pre><p><img src="https://img-blog.csdnimg.cn/20210219181754305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">  这里我们选择体积更小的alpine镜像。</p><p>  随后进入项目的根目录，执行打包命令：</p><pre class="language-none"><code class="language-none">docker build -t myvue .</code></pre><p>  这里我的前端目录是myvue</p><pre class="language-none"><code class="language-none">vue&gt;docker build -t myvue .[+] Building 96.6s (12&#x2F;12) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 556B                                                                                                                                                   0.0s &#x3D;&gt; [internal] load .dockerignore                                                                                                                                                      0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                                                                                                        0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;node:lts-alpine                                                                                                                     1.0s &#x3D;&gt; [internal] load build context                                                                                                                                                     77.9s &#x3D;&gt; &#x3D;&gt; transferring context: 143.82MB                                                                                                                                                 77.8s &#x3D;&gt; [1&#x2F;7] FROM docker.io&#x2F;library&#x2F;node:lts-alpine@sha256:5edad160011cc8cfb69d990e9ae1cb2681c0f280178241d58eba05b5bfc34047                                                               0.0s &#x3D;&gt; CACHED [2&#x2F;7] RUN npm install -g http-server                                                                                                                                        0.0s &#x3D;&gt; CACHED [3&#x2F;7] WORKDIR &#x2F;app                                                                                                                                                          0.0s &#x3D;&gt; CACHED [4&#x2F;7] COPY package*.json .&#x2F;                                                                                                                                                 0.0s &#x3D;&gt; CACHED [5&#x2F;7] RUN npm install                                                                                                                                                       0.0s &#x3D;&gt; [6&#x2F;7] COPY . .                                                                                                                                                                     3.1s &#x3D;&gt; [7&#x2F;7] RUN npm run build                                                                                                                                                           11.4s &#x3D;&gt; exporting to image                                                                                                                                                                 2.9s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                                                                                                                2.9s &#x3D;&gt; &#x3D;&gt; writing image sha256:8c6f24ce961e0cbde79193382db0de61c96f00d37cac01336ee937e9c9cf25a3                                                                                           0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;myvue                                                                                                                                               0.0s</code></pre><p>  系统会自动根据脚本进行安装依赖，第一次也需要等待一段时间。</p><p>  打包完成后，执行：</p><pre class="language-none"><code class="language-none">docker images</code></pre><p>  可以看到前端镜像的体积要小一点：</p><pre class="language-none"><code class="language-none">docker imagesREPOSITORY                       TAG       IMAGE ID       CREATED             SIZEmyvue                            latest    8c6f24ce961e   45 seconds ago      446MB</code></pre><p>  运行前端服务：</p><pre class="language-none"><code class="language-none">docker run -it --rm -p 8081:8080 myvue</code></pre><p>  同样使用端口映射，这次宿主机使用8081，当然了，如果需要可以根据喜好进行修改。</p><p>  访问Vue.js服务，http://容器ip:8081</p><p><img src="https://img-blog.csdnimg.cn/20210219173037381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  至此，通过Docker的容器技术，我们就将前后端两大服务都分别部署好了，过程并不复杂，但是意义却是里程碑式的，携此两大镜像，左牵Django，右擎Vue.js，如果哪天需要横向扩容，只需短短几分钟，我们就可以在新服务器上做到“拎包入住”，灵活方便。</p>]]></content>
    
    
    <summary type="html">登山则情满于山，观海则意溢于海</summary>
    
    
    
    <category term="项目部署" scheme="https://wyx6.top/categories/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    <category term="docker项目部署" scheme="https://wyx6.top/categories/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/docker%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="项目部署" scheme="https://wyx6.top/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    <category term="docker项目部署" scheme="https://wyx6.top/tags/docker%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    <category term="win10项目部署" scheme="https://wyx6.top/tags/win10%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>django结合vue实现三方钉钉群机器人验证码</title>
    <link href="https://wyx6.top/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://wyx6.top/%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2021-01-16T13:49:15.000Z</published>
    <updated>2021-02-21T10:57:08.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-vue实现钉钉群机器人验证码"><a href="#django-vue实现钉钉群机器人验证码" class="headerlink" title="django+vue实现钉钉群机器人验证码"></a>django+vue实现钉钉群机器人验证码</h1><pre><code>又是忙碌的一天，今天给大家带来的教程是使用**钉钉群机器人发送随机验证码**，</code></pre><p>在vue中输入然后在后端进行判断并返回相应的返回值，首先我们去看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><p>然后开始操作<br>我们需要django+vue跨域  <a href="https://blog.csdn.net/weixin_45954124/article/details/109367680">点击查看</a></p><h2 id="一、创建钉钉群机器人"><a href="#一、创建钉钉群机器人" class="headerlink" title="一、创建钉钉群机器人"></a>一、创建钉钉群机器人</h2><p>首先明确一点，钉钉自定义机器人早就不支持在手机端创建了，所以打开你的pc端或者mac端的钉钉客户端，在需要机器人的聊天群界面，点击智能群助手</p><p><img src="https://img-blog.csdnimg.cn/20201216200147346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200145997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20201216200144171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200144155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200143887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>需要注意</strong>的是，在安全设置一栏里，我们选择加签的方式来验证，在此说明一下，钉钉机器人的安全策略有三种，第一种是使用关键字，就是说你推送的消息里必须包含你创建机器人时定义的关键字，如果不包含就推送不了消息，第二种就是使用加密签名，第三种是定义几个ip源，非这些源的请求会被拒绝，综合来看还是第二种又安全又灵活。<br><img src="https://img-blog.csdnimg.cn/20201216200141694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  创建成功后，系统会分配给你一个webhook地址，这个地址需要保存一下，地址中有唯一的accesstoken</p><p><img src="https://img-blog.csdnimg.cn/20201216200144351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>  ok，那么怎么利用这个地址让你的机器人推送消息呢？查看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><h2 id="二、测试发送信息"><a href="#二、测试发送信息" class="headerlink" title="二、测试发送信息"></a>二、测试发送信息</h2><p>发现文档居然还是python2.0的版本，好吧，我们自己来翻译成3.0</p><ul><li><h3 id="在项目下新建包utils-dindin-py"><a href="#在项目下新建包utils-dindin-py" class="headerlink" title="在项目下新建包utils/dindin.py"></a>在项目下新建包utils/dindin.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> requests<span class="token punctuation">,</span> json  <span class="token comment"># 导入依赖库</span><span class="token comment"># https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38</span>timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#这里的secret是我们cp备份的</span>secret <span class="token operator">=</span> <span class="token string">'SECc96a44d409036efafe8645c659a551e3ad3ad15bdfd8a408b6254927a2d0d1ca'</span>secret_enc <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>string_to_sign <span class="token operator">=</span> <span class="token string">'&#123;&#125;\n&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>string_to_sign_enc <span class="token operator">=</span> string_to_sign<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>hmac_code <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secret_enc<span class="token punctuation">,</span> string_to_sign_enc<span class="token punctuation">,</span> digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>hmac_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span>  <span class="token comment"># eu4Q16kFubncXuZprXxwRuvDx3Yh/roFWEPn0T5MRPo%3D</span><span class="token comment"># print(timestamp)</span><span class="token comment"># print(sign)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 定义数据类型</span><span class="token comment">#这里webhook是我们创建成功后 webhook地址</span>webhook <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38&amp;timestamp='</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;sign="</span> <span class="token operator">+</span> sign<span class="token comment"># 定义要发送的数据</span><span class="token comment"># "at": &#123;"atMobiles": "['"+ mobile + "']"</span><span class="token keyword">def</span> <span class="token function">dindin_post</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"content"</span><span class="token punctuation">:</span> text<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 发送post请求</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>dindin_post<span class="token punctuation">(</span><span class="token number">134235</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>测试发送成功</strong><br><img src="https://img-blog.csdnimg.cn/20201216200344887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li></ul><h2 id="三、创建user（app）"><a href="#三、创建user（app）" class="headerlink" title="三、创建user（app）"></a>三、创建user（app）</h2><ol><li><h3 id="user-models-py"><a href="#user-models-py" class="headerlink" title="user/models.py"></a>user/models.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username</code></pre></li><li><h3 id="我们这里重写了django自带的用户表，所以要在settings中重新定义"><a href="#我们这里重写了django自带的用户表，所以要在settings中重新定义" class="headerlink" title="我们这里重写了django自带的用户表，所以要在settings中重新定义"></a>我们这里重写了django自带的用户表，所以要在settings中重新定义</h3><pre class="language-python" data-language="python"><code class="language-python">AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">'user.User'</span></code></pre></li><li><h3 id="user-views-py"><a href="#user-views-py" class="headerlink" title="user/views.py"></a>user/views.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment">#</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> utils<span class="token punctuation">.</span>dindin <span class="token keyword">import</span> dindin_post<span class="token keyword">import</span> random<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token keyword">import</span> jwt<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token comment"># 注册</span><span class="token keyword">class</span> <span class="token class-name">RegisterAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 存储数据</span>            User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>make_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user.view--16"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 登录</span><span class="token keyword">class</span> <span class="token class-name">LoginAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 判断密码</span>        <span class="token keyword">if</span> user_obj<span class="token punctuation">:</span>            <span class="token keyword">if</span> check_password<span class="token punctuation">(</span>password<span class="token punctuation">,</span> user_obj<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># jwt加密</span>                encode_jwt <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"uid"</span><span class="token punctuation">:</span> user_obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>encode_jwt<span class="token punctuation">)</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">:</span> encode_jwt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 发送验证码</span><span class="token keyword">class</span> <span class="token class-name">VerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 生成随机验证码6位</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>        <span class="token comment"># 存储到session</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">=</span> code  <span class="token comment"># 存储的也是 key-value 键值对</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>set_expiry<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 session 存活期 单位是秒</span>        <span class="token comment"># 调用钉钉接口 发送验证码</span>        dindin_post<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 校验验证码</span><span class="token keyword">class</span> <span class="token class-name">IsVerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        verification <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"verification"</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> verification <span class="token operator">==</span> code<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><h3 id="配置子路由user-urls-py"><a href="#配置子路由user-urls-py" class="headerlink" title="配置子路由user/urls.py"></a>配置子路由user/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>staticfiles<span class="token punctuation">.</span>urls <span class="token keyword">import</span> staticfiles_urlpatterns<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span> DefaultRouter<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token punctuation">,</span> refresh_jwt_token<span class="token comment"># ... the rest of your URLconf goes here ...</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 定义超链接路由</span>    <span class="token comment"># re_path('^static/upload/(?P&lt;path>.*)$',serve,&#123;'document_root':'/static/upload/'&#125;),</span>    path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> RegisterAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 注册</span>    path<span class="token punctuation">(</span><span class="token string">'mylogin/'</span><span class="token punctuation">,</span> LoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 登录自定义token</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_url/'</span><span class="token punctuation">,</span> DingDingAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 钉钉三方登录路由</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_back/'</span><span class="token punctuation">,</span> DingBackApiView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 三方登录回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'verification/'</span><span class="token punctuation">,</span> VerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 发送验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'isverification/'</span><span class="token punctuation">,</span> IsVerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 判断验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 全局token，登录视图 使用djangorestframework-jwt==1.11.0</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="配置主路由django-urls-py"><a href="#配置主路由django-urls-py" class="headerlink" title="配置主路由django/urls.py"></a>配置主路由django/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> re_path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'user/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'user.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="三、前端vue构建登录注册页面"><a href="#三、前端vue构建登录注册页面" class="headerlink" title="三、前端vue构建登录注册页面"></a>三、前端vue构建登录注册页面</h2><p><img src="https://img-blog.csdnimg.cn/20201216201121216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216201924820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><ol><li><h3 id="src-http-apis-js"><a href="#src-http-apis-js" class="headerlink" title="src/http/apis.js"></a>src/http/apis.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/* eslint-disable */</span><span class="token comment">// 用户登录</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>get<span class="token punctuation">,</span> post<span class="token punctuation">,</span> put<span class="token punctuation">,</span> del<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRegister</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/register/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/verification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getisVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/isverification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/login/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postDinDin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/dindin_url/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre></li><li><h3 id="注册页面src-components-register-vue"><a href="#注册页面src-components-register-vue" class="headerlink" title="注册页面src/components/register.vue"></a>注册页面src/components/register.vue</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>用户注册<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"用户名"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input ref<span class="token operator">=</span><span class="token string">"userNameInput"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"Basic usage"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon slot<span class="token operator">=</span><span class="token string">"prefix"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tooltip slot<span class="token operator">=</span><span class="token string">"suffix"</span> title<span class="token operator">=</span><span class="token string">"Extra information"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"info-circle"</span> style<span class="token operator">=</span><span class="token string">"color: rgba(0,0,0,.45)"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tooltip<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"密码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input prefix<span class="token operator">=</span><span class="token string">"*"</span> suffix<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"buttonlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>postRegister<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token comment">//表单样式</span>      formlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//标签</span>        labelCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//文本框</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//按钮样式</span>      buttonlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//按钮</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            offset<span class="token operator">:</span> <span class="token number">0</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//自定义方法</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        username<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>        password<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postRegister</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><h3 id="登录页面src-components-login-vue"><a href="#登录页面src-components-login-vue" class="headerlink" title="登录页面src/components/login.vue"></a>登录页面src/components/login.vue</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"用户名"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input ref<span class="token operator">=</span><span class="token string">"userNameInput"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"Basic usage"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon slot<span class="token operator">=</span><span class="token string">"prefix"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tooltip slot<span class="token operator">=</span><span class="token string">"suffix"</span> title<span class="token operator">=</span><span class="token string">"Extra information"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"info-circle"</span> style<span class="token operator">=</span><span class="token string">"color: rgba(0,0,0,.45)"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tooltip<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"密码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input prefix<span class="token operator">=</span><span class="token string">"*"</span> suffix<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"验证码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"verification"</span> @blur<span class="token operator">=</span><span class="token string">"isVerification"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isverification"</span><span class="token operator">></span>验证码错误<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"clickVerification"</span><span class="token operator">></span>点击发送验证码<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"buttonlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>img style<span class="token operator">=</span><span class="token string">"margin-left:20px;cursor:pointer;"</span> @click<span class="token operator">=</span><span class="token string">"dingding"</span> src<span class="token operator">=</span><span class="token string">"http://localhost:8000/static/dingding.png"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getisVerification<span class="token punctuation">,</span> getVerification<span class="token punctuation">,</span> postDinDin<span class="token punctuation">,</span> postLogin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      selected<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      startdate<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      dinDinUrl<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      verification<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      isverification<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment">//表单样式</span>      formlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//标签</span>        labelCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//文本框</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//按钮样式</span>      buttonlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//按钮</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            offset<span class="token operator">:</span> <span class="token number">0</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//自定义方法</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断验证码</span>    <span class="token function">isVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getisVerification</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>verification<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>verification<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//发送钉钉验证码</span>    <span class="token function">clickVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//钉钉登录</span>    <span class="token function-variable function">dingding</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">postDinDin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dinDinUrl <span class="token operator">=</span> res<span class="token punctuation">.</span>dindin_url        <span class="token comment">//打开新窗口跳转到此地址</span>        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>dindin_url<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// let just = true;</span>      <span class="token comment">// just = this.isVerification() &amp; just;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          username<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>          password<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//登录</span>        <span class="token function">postLogin</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>token<span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>username<span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>id<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> register <span class="token keyword">from</span> <span class="token string">'@/components/register'</span><span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">'@/components/login'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">var</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'register'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>register        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'login'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>login        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span>routes<span class="token punctuation">,</span>  mode<span class="token operator">:</span><span class="token string">'history'</span>   <span class="token comment">/*hash*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
    
    
    <summary type="html">发奋忘食，乐以忘优，不知老之将至</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="python" scheme="https://wyx6.top/tags/python/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>django结合haystack搜索框架使用Docker+ES实现秒级索引</title>
    <link href="https://wyx6.top/django%E7%BB%93%E5%90%88haystack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E7%A7%92%E7%BA%A7%E7%B4%A2%E5%BC%95/"/>
    <id>https://wyx6.top/django%E7%BB%93%E5%90%88haystack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E7%A7%92%E7%BA%A7%E7%B4%A2%E5%BC%95/</id>
    <published>2021-01-13T10:59:43.000Z</published>
    <updated>2021-02-21T11:25:29.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-python" data-language="python"><code class="language-python">pip install drf<span class="token operator">-</span>haystack <span class="token comment"># django的开源 搜索框架（python语音写的，搜索框架可以使用其他</span>语音的搜索引擎）pip install whoosh <span class="token comment"># 搜索引擎（python语音写的）</span>pip install jieba <span class="token comment"># 中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持</span>不是太好</code></pre><h2 id="什么是haystack？"><a href="#什么是haystack？" class="headerlink" title="什么是haystack？"></a>什么是haystack？</h2><ul><li>haystack是django的开源搜索框架，该框架支持 Solr,Elasticsearch,Whoosh, Xapian 搜索引 擎，不用更改代码，直接切换引擎，减少代码量。</li><li>搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小 巧，配置比较简单，当然性能自然略低。</li><li>中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换 whoosh的分词组件。</li></ul><h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><h3 id="syl-settings-py-全文检索配置"><a href="#syl-settings-py-全文检索配置" class="headerlink" title="syl/settings.py 全文检索配置"></a>syl/settings.py 全文检索配置</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.注册app '''</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'haystack'</span><span class="token punctuation">,</span> <span class="token comment"># haystack要放在应用的上面</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.模板路径 '''</span>TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''3.全文检索配置'''</span>HAYSTACK_SEARCH_RESULTS_PER_PAGE <span class="token operator">=</span> <span class="token number">15</span>  <span class="token comment"># 搜索出多条数据时需要分页</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'course.whoosh_cn_backend.MyWhooshEngine'</span><span class="token punctuation">,</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 指定倒排索引存放位置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># ES引擎</span><span class="token comment"># settings.py 修改haystack配置</span><span class="token comment"># ES引擎</span><span class="token comment"># HAYSTACK_CONNECTIONS = &#123;</span><span class="token comment">#     'default': &#123;</span><span class="token comment">#         'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',</span><span class="token comment">#         'URL': 'http://127.0.0.1:9200/',  # Elasticsearch服务器ip地址，端口号固定为9200</span><span class="token comment">#         'INDEX_NAME': 'syl',  # Elasticsearch建立的反向索引库的名称</span><span class="token comment">#     &#125;,</span><span class="token comment"># &#125;</span><span class="token comment"># 添加此项，当数据库改变时，会自动更新索引，非常方便</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><h3 id="在子应用下创建索引文件"><a href="#在子应用下创建索引文件" class="headerlink" title="在子应用下创建索引文件"></a>在子应用下创建索引文件</h3><p>apps/course/search_indexes.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token comment"># apps/course/search_indexes.py</span><span class="token comment"># 文件名必须是 search_indexes.py</span><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Course<span class="token comment"># 修改此处，类名为模型类的名称+Index，比如模型类为GoodsInfo,则这里类名为GoodsInfoIndex(其实可以随便写)</span><span class="token keyword">class</span> <span class="token class-name">CourseIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Course索引类    """</span>    <span class="token comment"># text为索引字段</span>    <span class="token comment"># document = True，这代表haystack和搜索引擎将使用此字段的内容作为索引进行检索</span>    <span class="token comment"># use_template=True 指定根据表中的那些字段建立索引文件的说明放在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 对那张表进行查询</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 重载get_model方法，必须要有</span>        <span class="token triple-quoted-string string">"""返回建立索引的模型类"""</span>        <span class="token keyword">return</span> Course <span class="token comment"># 返回这个model</span>    <span class="token comment"># 建立索引的数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回要建立索引的数据查询集"""</span>        <span class="token comment"># 这个方法返回什么内容，最终就会对那些方法建立索引，这里是对所有字段建立索引</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="指定索引模板文件"><a href="#指定索引模板文件" class="headerlink" title="指定索引模板文件"></a>指定索引模板文件</h3><pre class="language-python" data-language="python"><code class="language-python">templates<span class="token operator">/</span>search<span class="token operator">/</span>indexes<span class="token operator">/</span>course<span class="token operator">/</span>course_text<span class="token punctuation">.</span>txt</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建文件路径命名必须这个规范：templates/search/indexes/应用名称/模型类名称</span>_text<span class="token punctuation">.</span>txt</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token builtin">object</span><span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token builtin">object</span><span class="token punctuation">.</span>desc<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="apps-course-whoosh-cn-backend-py"><a href="#apps-course-whoosh-cn-backend-py" class="headerlink" title="apps/course/whoosh_cn_backend.py"></a>apps/course/whoosh_cn_backend.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token comment"># 更换 text 字段的 分析方式, 变为jieba分词中的中文分析器</span><span class="token keyword">from</span> haystack<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>whoosh_backend <span class="token keyword">import</span> WhooshEngine<span class="token punctuation">,</span> WhooshSearchBackend<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>fields <span class="token keyword">import</span> TEXT<span class="token keyword">from</span> jieba<span class="token punctuation">.</span>analyse <span class="token keyword">import</span> ChineseAnalyzer<span class="token keyword">class</span> <span class="token class-name">MyWhooshSearchBackend</span><span class="token punctuation">(</span>WhooshSearchBackend<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">build_schema</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>content_field_name<span class="token punctuation">,</span> schema<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>build_schema<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>        <span class="token comment"># 指定whoosh使用jieba进行分词</span>        schema<span class="token punctuation">.</span>_fields<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEXT<span class="token punctuation">(</span>stored<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                      analyzer<span class="token operator">=</span>ChineseAnalyzer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      field_boost<span class="token operator">=</span>fields<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>boost<span class="token punctuation">,</span>                                      sortable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>content_field_name<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyWhooshEngine</span><span class="token punctuation">(</span>WhooshEngine<span class="token punctuation">)</span><span class="token punctuation">:</span>    backend <span class="token operator">=</span> MyWhooshSearchBackend</code></pre><h3 id="课程全文检索接口视图函数"><a href="#课程全文检索接口视图函数" class="headerlink" title="课程全文检索接口视图函数"></a>课程全文检索接口视图函数</h3><p>course/views.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> syl <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> InvalidPage<span class="token punctuation">,</span> Paginator<span class="token keyword">from</span> haystack<span class="token punctuation">.</span>forms <span class="token keyword">import</span> ModelSearchForm<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token punctuation">,</span>HttpResponse<span class="token comment"># 如果settings.py中配置就是用settings中配置的，否则就每页15条</span>RESULTS_PER_PAGE <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token string">'HAYSTACK_SEARCH_RESULTS_PER_PAGE'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">course_index_search</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1.获取前端传过来的关键字（查询数据）</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 第几页</span>    page_size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_size'</span><span class="token punctuation">,</span> RESULTS_PER_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 每页多少条</span>    <span class="token comment"># 2.获取查询条件，进行查询</span>    <span class="token keyword">if</span> query<span class="token punctuation">:</span>        form <span class="token operator">=</span> ModelSearchForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> load_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 将查询条件传递给查询对 象</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> form<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询出来的最终数据</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'No file found！'</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 3.对结果集进行分页</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>results<span class="token punctuation">,</span> page_size<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>  <span class="token comment"># 从分好的页中拿第几页</span>    <span class="token keyword">except</span> InvalidPage<span class="token punctuation">:</span>  <span class="token comment"># 如果分页出错</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'No file found！'</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 4.把查询的分页结果集对象转换成json格式</span>    jsondata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> page<span class="token punctuation">.</span>object_list<span class="token punctuation">:</span>  <span class="token comment"># 分页后的课程查询结果</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token string">'desc'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>desc<span class="token punctuation">,</span>            <span class="token string">'img'</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">'://'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">]</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>img<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            <span class="token comment"># 'follower': result.object.follower,</span>            <span class="token string">'learner'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>learner<span class="token punctuation">,</span>            <span class="token string">'status'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>            <span class="token string">'course_type'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>course_type<span class="token punctuation">.</span><span class="token builtin">id</span>        <span class="token punctuation">&#125;</span>        jsondata<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'Search successfully！'</span><span class="token punctuation">,</span>        <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> page<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token string">"results"</span><span class="token punctuation">:</span> jsondata<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># return JsonResponse(result)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>result<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="syl-urls-py-添加路由"><a href="#syl-urls-py-添加路由" class="headerlink" title="syl/urls.py 添加路由"></a>syl/urls.py 添加路由</h3><pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> course_index_search<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="命令构建倒排索引"><a href="#命令构建倒排索引" class="headerlink" title="命令构建倒排索引"></a>命令构建倒排索引</h3><pre class="language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py rebuild_index</code></pre><h3 id="测试课程全文检索"><a href="#测试课程全文检索" class="headerlink" title="测试课程全文检索"></a>测试课程全文检索</h3><p>测试接口</p><pre class="language-python" data-language="python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span><span class="token punctuation">:</span><span class="token number">8888</span><span class="token operator">/</span>search<span class="token operator">/</span>?q<span class="token operator">=</span>测试<span class="token operator">&amp;</span>page<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>page_size<span class="token operator">=</span><span class="token number">1</span></code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/20201120190227302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">返回结果<span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Search successfully！"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"results"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"Linux入门课程"</span><span class="token punctuation">,</span><span class="token string">"desc"</span><span class="token punctuation">:</span> "要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。"<span class="token punctuation">,</span><span class="token string">"img"</span><span class="token punctuation">:</span> <span class="token string">"http://192.168.56.100:8888/media/course/linux.jpg"</span><span class="token punctuation">,</span><span class="token string">"learner"</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"course_type"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h1 id="docker安装ES"><a href="#docker安装ES" class="headerlink" title="docker安装ES"></a>docker安装ES</h1><ul><li><code>1.拉取docker镜像</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 从仓库拉取镜像</span>sudo docker image pull delron<span class="token operator">/</span>elasticsearch<span class="token operator">-</span>ik<span class="token punctuation">:</span><span class="token number">2.4</span><span class="token number">.6</span><span class="token operator">-</span><span class="token number">1.0</span></code></pre><ul><li><code>2.使用docker安装ES</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">9200</span><span class="token punctuation">:</span><span class="token number">9200</span> <span class="token operator">-</span>p <span class="token number">9300</span><span class="token punctuation">:</span><span class="token number">9300</span> <span class="token operator">-</span><span class="token operator">-</span>name elasticsearch delron<span class="token operator">/</span>elasticsearch<span class="token operator">-</span>ik<span class="token punctuation">:</span><span class="token number">2.4</span><span class="token number">.6</span><span class="token operator">-</span><span class="token number">1.0</span></code></pre><ul><li><code>3.在页面中测试</code></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">http<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">192.168.56.100:9200</span><span class="token regex-delimiter">/</span></span>报错安装  pip install elasticsearch</code></pre><h1 id="2-使用ES替代whoosh全文检索"><a href="#2-使用ES替代whoosh全文检索" class="headerlink" title="2.使用ES替代whoosh全文检索"></a>2.使用ES替代whoosh全文检索</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># settings.py  修改haystack配置</span><span class="token comment"># ES引擎</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'</span><span class="token punctuation">,</span>        <span class="token string">'URL'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:9200/'</span><span class="token punctuation">,</span>        <span class="token comment"># Elasticsearch服务器ip地址，端口号固定为9200</span>        <span class="token string">'INDEX_NAME'</span><span class="token punctuation">:</span> <span class="token string">'syl'</span><span class="token punctuation">,</span>                    <span class="token comment"># Elasticsearch建立的反向索引库的名称</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这时我们会有问题，就是我们在手动更新索引之后数据是无法进行同步的。这时我们就可以使用django-celery-haystack来解决此问题</p><h1 id="Haystack保持新鲜索引"><a href="#Haystack保持新鲜索引" class="headerlink" title="Haystack保持新鲜索引"></a><a href="https://django-haystack.readthedocs.io/en/master/other_apps.html">Haystack保持新鲜索引</a></h1><h2 id="Sub-Apps"><a href="#Sub-Apps" class="headerlink" title="Sub Apps"></a>Sub Apps</h2><p>These are apps that build on top of the infrastructure provided by Haystack. Useful for essentially extending what Haystack can do.</p><h2 id="queued-search"><a href="#queued-search" class="headerlink" title="queued_search"></a>queued_search</h2><p><a href="http://github.com/toastdriven/queued_search">http://github.com/toastdriven/queued_search</a> (2.X compatible)</p><p>Provides a queue-based setup as an alternative to <code>RealtimeSignalProcessor</code> or constantly running the <code>update_index</code> command. Useful for high-load, short update time situations.</p><h2 id="celery-haystack"><a href="#celery-haystack" class="headerlink" title="celery-haystack"></a>celery-haystack</h2><p><a href="https://github.com/jezdez/celery-haystack">https://github.com/jezdez/celery-haystack</a> (1.X and 2.X compatible)</p><p>Also provides a queue-based setup, this time centered around Celery. Useful for keeping the index fresh per model instance or with the included task to call the <code>update_index</code> management command instead.</p><h2 id="haystack-rqueue"><a href="#haystack-rqueue" class="headerlink" title="haystack-rqueue"></a>haystack-rqueue</h2><p><a href="https://github.com/mandx/haystack-rqueue">https://github.com/mandx/haystack-rqueue</a> (2.X compatible)</p><p>Also provides a queue-based setup, this time centered around RQ. Useful for keeping the index fresh using <code>./manage.py rqworker</code>.</p><h2 id="django-celery-haystack（推荐）"><a href="#django-celery-haystack（推荐）" class="headerlink" title="django-celery-haystack（推荐）"></a>django-celery-haystack（推荐）</h2><p><a href="https://github.com/mixcloud/django-celery-haystack-SearchIndex">https://github.com/mixcloud/django-celery-haystack-SearchIndex</a></p><p>Another queue-based setup, also around Celery. Useful for keeping the index fresh.</p>]]></content>
    
    
    <summary type="html">大直若屈，大巧若拙，大辩若讷</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django" scheme="https://wyx6.top/categories/python3/django/"/>
    
    <category term="haystack" scheme="https://wyx6.top/categories/python3/django/haystack/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="haystack" scheme="https://wyx6.top/tags/haystack/"/>
    
    <category term="Docker" scheme="https://wyx6.top/tags/Docker/"/>
    
    <category term="ES" scheme="https://wyx6.top/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://wyx6.top/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wyx6.top/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-01-06T02:51:48.000Z</published>
    <updated>2021-01-07T13:15:06.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>Python设计模式 设计模式的定义:为了解决面向对象系统中重要和重复的设计封装在一起的一种代码实现框架,可以使得代码更加易于扩展和调用</p><p>四个基本要素:模式名称,问题,解决方案,效果</p><p>六大原则:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>开闭原则<span class="token punctuation">:</span>一个软件实体<span class="token punctuation">,</span>如类<span class="token punctuation">,</span>模块和函数应该对扩展开发<span class="token punctuation">,</span>对修改关闭<span class="token punctuation">.</span>既软件实体应尽量在不修改原有代码的情况下进行扩展<span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">.</span>里氏替换原则<span class="token punctuation">:</span>所有引用父类的方法必须能透明的使用其子类的对象<span class="token number">3</span><span class="token punctuation">.</span>依赖倒置原则<span class="token punctuation">:</span>高层模块不应该依赖底层模块<span class="token punctuation">,</span>二者都应该依赖其抽象<span class="token punctuation">,</span>抽象不应该依赖于细节<span class="token punctuation">,</span>细节应该依赖抽象<span class="token punctuation">,</span>换而言之<span class="token punctuation">,</span>要针对接口编程而不是针对实现编程<span class="token number">4</span><span class="token punctuation">.</span>接口隔离原则<span class="token punctuation">:</span>使用多个专门的接口<span class="token punctuation">,</span>而不是使用单一的总接口<span class="token punctuation">,</span>即客户端不应该依赖那些并不需要的接口<span class="token number">5</span><span class="token punctuation">.</span>迪米特法则<span class="token punctuation">:</span>一个软件实体应该尽可能的少与其他实体相互作用<span class="token number">6</span><span class="token punctuation">.</span>单一直责原则<span class="token punctuation">:</span>不要存在多个导致类变更的原因<span class="token punctuation">.</span>即一个类只负责一项职责</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>定义:一种特殊的类,声明了若干方法,要求继承该接口的类必须实现这种方法</p><p>作用:限制继承接口的类的方法的名称及调用方式,隐藏了类的内部实现</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token comment">#定义抽象方法的关键字</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># @abstractmethod</span>    <span class="token comment"># def pay(self,money):</span>    <span class="token comment">#     raise NotImplementedError</span><span class="token keyword">class</span> <span class="token class-name">AiliPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#子类继承接口,必须实现接口中定义的抽象方法,否则不能实例化对象</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用支付宝支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ApplePay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用苹果支付支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span></code></pre><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>定义:保证一个类只有一个实例,并提供一个访问它的全局访问点</p><p>适用场景:当一个类只能有一个实例而客户可以从一个众所周知的访问点访问它时</p><p>优点:对唯一实例的受控访问,相当于全局变量,但是又可以防止此变量被篡改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#如果该类已经有了一个实例则直接返回,否则创建一个全局唯一的实例</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>name <span class="token operator">=</span> namea <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>b <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h3 id="工厂模式（celery）"><a href="#工厂模式（celery）" class="headerlink" title="工厂模式（celery）"></a>工厂模式（celery）</h3><p>定义:不直接向客户暴露对象创建的实现细节,而是通过一个工厂类来负责创建产品类的实例</p><p>角色:工厂角色,抽象产品角色,具体产品角色</p><p>优点:隐藏了对象创建代码的细节,客户端不需要修改代码</p><p>缺点:违反了单一职责原则,将创建逻辑集中到一个工厂里面,当要添加新产品时,违背了开闭原则</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#抽象产品角色</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AiliPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#具体产品角色</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>enable_yuebao<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>enable_yuebao <span class="token operator">=</span> enable_yuebao    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>enable_yuebao<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用余额宝支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用支付宝支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ApplePay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 具体产品角色</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用苹果支付支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PaymentFactory</span><span class="token punctuation">:</span>    <span class="token comment">#工厂角色</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'alipay'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AiliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'yuebao'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AiliPay<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'applepay'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ApplePay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> NameErrorp <span class="token operator">=</span> PaymentFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> p<span class="token punctuation">.</span>create_payment<span class="token punctuation">(</span><span class="token string">'yuebao'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>pay<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>定义:定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖它的对象都会得到通知并被自动更新.观察者模式又称为’发布订阅’模式</p><p>角色:抽象主题,具体主题(发布者),抽象观察者,具体观察者(订阅者)</p><p>适用场景:当一个抽象模型有两个方面,其中一个方面依赖于另一个方面.将两者封装在独立的对象中以使它们各自独立的改变和复用</p><p>当一个对象的改变需要同时改变其他对象,而且不知道具体有多少对象以待改变</p><p>当一个对象必须通知其他对象,而又不知道其他对象是谁,即这些对象之间是解耦的</p><p>优点:目标和观察者之间的耦合最小,支持广播通信</p><p>缺点:多个观察者之间互不知道对方的存在,因此一个观察者对主题的修改可能造成错误的更新</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token comment">#抽象主题</span><span class="token keyword">class</span> <span class="token class-name">Oberserver</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment">#具体主题</span><span class="token keyword">class</span> <span class="token class-name">Notice</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">attach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">detach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> obj <span class="token keyword">in</span> self<span class="token punctuation">.</span>observers<span class="token punctuation">:</span>            obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment">#抽象观察者</span><span class="token keyword">class</span> <span class="token class-name">ManagerNotice</span><span class="token punctuation">(</span>Notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>company_info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__company_info <span class="token operator">=</span> company_info    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__company_info    <span class="token decorator annotation punctuation">@company_info<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__company_info <span class="token operator">=</span> info        self<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#具体观察者</span><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>Oberserver<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>noti<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> noti<span class="token punctuation">.</span>company_info<span class="token comment">#消息订阅-发送</span>notice <span class="token operator">=</span> ManagerNotice<span class="token punctuation">(</span><span class="token punctuation">)</span>alex<span class="token operator">=</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>tony<span class="token operator">=</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>alex<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>tony<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info<span class="token operator">=</span><span class="token string">"公司运行良好"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alex<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tony<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info<span class="token operator">=</span><span class="token string">"公司将要上市"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alex<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tony<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>detach<span class="token punctuation">(</span>tony<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info<span class="token operator">=</span><span class="token string">"公司要破产了，赶快跑路"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alex<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tony<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">宝剑锋从磨砺出，梅花香自苦寒来</summary>
    
    
    
    <category term="设计模式" scheme="https://wyx6.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://wyx6.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>权限管理之位运算以及RBAC俩种实现方法</title>
    <link href="https://wyx6.top/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8ARBAC%E4%BF%A9%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>https://wyx6.top/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8ARBAC%E4%BF%A9%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2021-01-07T13:16:49.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后台系统设计——角色权限"><a href="#后台系统设计——角色权限" class="headerlink" title="后台系统设计——角色权限"></a>后台系统设计——角色权限</h1><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>不论是哪种后台管理系统，“人员权限”始终是绕不开的话题。无论是移动端，PC端产品，登陆都需要一个账号。只是对于C端的产品，大多都是用户自己注册即可。</p><p>而对于后台产品而言，是需要公司内部人员去创建账号的。每个使用系统的用户都有一个独一无二的账号，每个账号都有自己对应的权限。</p><p>多数情况下，除了超级管理员外，我们会对大多数的账号的权限做一些限制，以此来管理不同用户的使用权限问题。</p><p>譬如，做企业使用类软件，不同部门、不同职位的人的权限是不同的；再例如一款收费产品的收费用户和免费用户权限也是迥然不同的。</p><p>如果每个用户都单独做权限控制的话，当系统用户体量非常大的时候，就会发现以下问题：</p><p>很多账号权限都是一样的，但每次都要再配一次；</p><p>当某类权限用户的权限需要修改时，无法批量修改，只能一个个去修改非常耗时；</p><h1 id="二、经典模型——RBAC"><a href="#二、经典模型——RBAC" class="headerlink" title="二、经典模型——RBAC"></a>二、经典模型——RBAC</h1><p>这时候，聪明的产品先人就创建了“角色”的概念，通过对权限集的抽象，创立了角色，通过修改角色的权限，来控制拥有该角色的人员账号的权限。</p><h2 id="1、RBAC——基于角色的访问控制（Role-Based-Access-Control-）"><a href="#1、RBAC——基于角色的访问控制（Role-Based-Access-Control-）" class="headerlink" title="1、RBAC——基于角色的访问控制（Role-Based Access Control ）"></a><strong>1、RBAC——基于角色的访问控制（Role-Based Access Control ）</strong></h2><p>其基本思想是，对系统操作的各种权限不是直接授予具体的用户，而是在用户集合与权限集合之间建立一个角色集合。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。</p><p>这样做的好处是，不必在每次创建用户时都进行分配权限的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，这样将简化用户的权限管理，减少系统的开销。</p><p>按照百度百科对RBAC的定义，我们可以理解为此模型是通过角色关联用户，角色关联权限的方式，间接赋予用户权限。</p><h2 id="2-基于-Django-的后台管理平台，采用-RBAC-权限管理机制"><a href="#2-基于-Django-的后台管理平台，采用-RBAC-权限管理机制" class="headerlink" title="2.基于 Django 的后台管理平台，采用 RBAC 权限管理机制"></a>2.基于 Django 的后台管理平台，采用 RBAC 权限管理机制</h2><ul><li>用户表、角色表、权限表、资源列表<ul><li><code>用户表</code>：</li><li><code>角色表</code>：</li><li><code>资源列表(路径正则)</code>：资源名称（项目模块名称），资源路径（后台路由）<ul><li>资源分类：商品模块、订单模块、营销模块、权限模块、内容模块、其他模块</li></ul></li><li><code>权限表</code>：对某一个路由的增删改查权限</li><li><img src="https://img-blog.csdnimg.cn/20201221200059924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul><h2 id="3-RBAC角色权限管理机制实现思路"><a href="#3-RBAC角色权限管理机制实现思路" class="headerlink" title="3. RBAC角色权限管理机制实现思路"></a>3. RBAC角色权限管理机制实现思路</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 面向资源编程</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>shiyanlou<span class="token punctuation">.</span>com<span class="token operator">/</span>v1<span class="token operator">/</span>books<span class="token operator">/</span>        <span class="token comment"># 请求后端 books书籍表中数据</span>get    post<span class="token comment"># 用户表</span><span class="token comment"># 角色表</span><span class="token comment"># 权限表</span>get<span class="token operator">/</span>post<span class="token operator">/</span>put<span class="token operator">/</span>delete 对应关系</code></pre><ul><li>所有权限的本质是对数据库中表中数据增删改查的操作</li><li>而这些增删改查的操作是通过前端不同路由，通过get、post、put、delete方法操作数据库的</li><li>对权限的控制，最简单的方法就是判断当前用户是否可以对指定路由请求操作的权限</li><li>把角色和这个角色能够访问的 url 和 请求方式进行关联（因为正是的业务逻辑用户权限划分力度可能非常细致）</li><li>再简单的业务逻辑中这一张表就是权限表</li></ul><table><thead><tr><th>路由 资源(可能对应的是后端路由的 name名称，可以通过name名称解析出对应路由)</th><th>请求方式</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>get</td><td>判断用户是否可以查询books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>post</td><td>判断用户是否可以添加books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>put</td><td>判断用户是否可以更新books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>delete</td><td>判断用户是否可以删除books表中数据</td></tr></tbody></table><ul><li>后端如何判断用户权限<ul><li>用户发送求方法 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的url</li><li>后端首先查询时哪一个用户，然后查询当前用户的角色</li><li>最后判断这个角色是否可以访问 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的对应方法即可</li><li>如果这个角色有权限访问这个url就返回数据，不能访问就返回 401状态码</li></ul></li></ul><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><p><strong>表的设计</strong> </p><img src="https://img-blog.csdnimg.cn/2020122120045577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 角色表</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'角色'</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    per <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    role <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Role<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username<span class="token comment"># 节点表</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'节点表'</span><span class="token comment"># 权限表</span><span class="token keyword">class</span> <span class="token class-name">Access</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    role <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Role<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    node <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Node<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'权限表'</span></code></pre><p>在自定义中间件 添加判断权限</p><p>我们在响应视图前添加如下判断  </p><p>我们在访问<code>/user/blacklist/</code>时进行判断  </p><p>获取token解码获取当前用户信息 进行关联查询</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_decode_handler<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token comment"># 判断用户属于的角色是否有权限</span><span class="token keyword">class</span> <span class="token class-name">JurisdictionMyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/user/blacklist/"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取token</span>                token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token comment"># 获取userid</span>                user_id <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>                <span class="token comment"># 获取用户id角色</span>                role_id <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>role_id                <span class="token comment"># 获取角色的权限（路由）</span>                path <span class="token operator">=</span> Access<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>role_id<span class="token operator">=</span>role_id<span class="token punctuation">)</span>                i <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> i <span class="token keyword">in</span> path <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> i<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name<span class="token punctuation">]</span>                <span class="token comment"># 判断当前用户有没有权限</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> i<span class="token punctuation">:</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">return</span></code></pre><h1 id="三、位运算实现权限管理"><a href="#三、位运算实现权限管理" class="headerlink" title="三、位运算实现权限管理"></a>三、位运算实现权限管理</h1><h2 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1. 位运算"></a>1. 位运算</h2><p>程序中的所有数在计算机内存中都是以二进制的形式<a href="https://baike.baidu.com/item/%E5%82%A8%E5%AD%98/2446499">储存</a>的。位运算就是直接对整数在内存中的二进制位进行<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C/33052">操作</a>。比如，and运算本来是一个逻辑<a href="https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a>，但整数与整数之间也可以进行and运算。举个例子，6的二进制是110，11的二进制是1011，那么6 and 11的结果就是2，它是二进制对应位进行逻辑运算的结果（0表示False，1表示True，空位都当0处理）。</p><p><img src="https://img-blog.csdnimg.cn/20201221202731845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p><strong>二进制</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b001</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b011</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b110</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b111</span><span class="token punctuation">)</span><span class="token comment"># 打印结果</span><span class="token number">1</span><span class="token number">3</span><span class="token number">4</span><span class="token number">6</span><span class="token number">7</span></code></pre><h2 id="2-简单demo事例"><a href="#2-简单demo事例" class="headerlink" title="2. 简单demo事例"></a>2. 简单demo事例</h2><pre class="language-python" data-language="python"><code class="language-python">user <span class="token operator">=</span> <span class="token number">0b110</span>permisssion <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'usermange'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">,</span> <span class="token string">'blacklist'</span><span class="token punctuation">:</span> <span class="token number">0b010</span><span class="token punctuation">,</span> <span class="token string">'login'</span><span class="token punctuation">:</span> <span class="token number">0b001</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> user <span class="token operator">&amp;</span> permisssion<span class="token punctuation">[</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没权限"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@my_decorator</span><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入视图'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>view<span class="token punctuation">(</span><span class="token string">"usermange"</span><span class="token punctuation">)</span>view<span class="token punctuation">(</span><span class="token string">"blacklist"</span><span class="token punctuation">)</span>view<span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token comment"># 打印结果</span>进入视图进入视图没权限</code></pre><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><p>在中间件加入判断  我们的<code>permission</code>也可以创建相应的表</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用位运算来判断权限</span><span class="token keyword">class</span> <span class="token class-name">JurisdictionMyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 权限对应表</span>        permission <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'/user/blacklist/'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">,</span> <span class="token string">'/user/user/'</span><span class="token punctuation">:</span> <span class="token number">0b010</span><span class="token punctuation">,</span> <span class="token string">'/user/user//'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/user/blacklist/"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取当前用户的权限</span>                per <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>                pk<span class="token operator">=</span>jwt_decode_handler<span class="token punctuation">(</span>token<span class="token operator">=</span>request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>per                <span class="token comment"># print(not bin(int(per)))   # False</span>                <span class="token comment"># print(permission[request.path]) # 4</span>                <span class="token comment"># 判断当前用户的权限 是否在 权限对应表中 有相应的权限</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">int</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span> <span class="token operator">&amp;</span> permission<span class="token punctuation">[</span>request<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"utils/mymidder--142"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token keyword">return</span></code></pre><p><strong>在实际开发中，往往一个类对象拥有多种权限，每种权限有两个状态即有和无，正常情况下，有多少个权限，就需要多少个字段保存相应状态，如果权限过多，那么这种方式显得极其笨重，最近学习了一种用位运算权限管理的方式，方便快捷，实现原理简单，大大简化操作，简单实现权限的管理</strong></p>]]></content>
    
    
    <summary type="html">修身、齐家、治国、平天下</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4" scheme="https://wyx6.top/categories/python3/django2-0-4/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="中间件" scheme="https://wyx6.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="位运算" scheme="https://wyx6.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="RBAC" scheme="https://wyx6.top/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>python3实现队列定时执行异步任务</title>
    <link href="https://wyx6.top/python3%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    <id>https://wyx6.top/python3%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-12-28T11:35:36.000Z</published>
    <updated>2021-01-07T13:06:45.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们异步任务一般会想到什么  </p><p>celery <a href="https://blog.csdn.net/weixin_45954124/article/details/109493963">有兴趣戳这里</a></p><p><a href="https://blog.csdn.net/weixin_45954124/article/details/110820950">celery 使用</a></p><p><a href="https://www.celerycn.io/yong-hu-zhi-nan/ding-qi-ren-wu-periodic-tasks">celery 中文手册</a></p><p>celery 最终实现效果就是异步任务以及定时任务</p><p>那我们先来看看celery底层是什么  </p><p>broker、backend、生产者、消费者、还有celery来调度任务</p><p>消息队列 用来存储任务 以及调度任务</p><p>那我们也可以使用 queue来实现异步任务</p><h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><p>我们这里实现的是股票有变动情况则推送消息给关注该股票的人员</p><h2 id="util-queue-py"><a href="#util-queue-py" class="headerlink" title="util_queue.py"></a>util_queue.py</h2><p>手写celery</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'mydjango.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> redis<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> logginglogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 进阶用法</span><span class="token keyword">class</span> <span class="token class-name">Asynchronization</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">**</span>redis_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># __私有方法</span>        self<span class="token punctuation">.</span>__db <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span><span class="token operator">**</span>redis_kwargs<span class="token punctuation">)</span>        <span class="token comment"># 设置key</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 返回列表长度</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>llen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 右侧进入列表</span>        self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 左侧出  形成队列 先进先出</span>        item <span class="token operator">=</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>lpop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token keyword">import</span> time<span class="token keyword">from</span> send_email <span class="token keyword">import</span> send_email_task<span class="token comment"># 实例化</span>q <span class="token operator">=</span> Asynchronization<span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span><span class="token comment"># 循环添加</span><span class="token comment"># for i in range(5):</span><span class="token comment">#</span><span class="token comment">#     q.put(i)</span><span class="token comment">#     time.sleep(1)</span><span class="token comment"># 导入线程模块</span><span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">dojob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 函数内实例化 不冲突</span>    q <span class="token operator">=</span> Asynchronization<span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span>    <span class="token comment"># 无限循环</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment"># 删除左侧第一个 也就是陷进去的那一个</span>        result <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            email <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email            <span class="token comment"># print(email)</span>            <span class="token comment"># logger.info(email)</span>            send_email_task<span class="token punctuation">(</span>email<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span>            <span class="token comment"># logger.error(e)</span>        <span class="token comment"># 判断是否为空</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>            <span class="token comment"># 删除完毕 跳出循环</span>            <span class="token keyword">break</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">inform_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> user<span class="token punctuation">:</span>        email <span class="token operator">=</span> i<span class="token punctuation">.</span>email        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定义线程</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dojob<span class="token punctuation">)</span>        <span class="token comment"># 启动</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># inform_user()</span><span class="token comment"># print(q.size())</span></code></pre><p>然后我们在要使用的地方进行调用即可</p>]]></content>
    
    
    <summary type="html">生活总会给你另一个机会，这个机会叫明天</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    
    <category term="python3" scheme="https://wyx6.top/tags/python3/"/>
    
    <category term="queue" scheme="https://wyx6.top/tags/queue/"/>
    
    <category term="celery" scheme="https://wyx6.top/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>django+vue前后端分离利用redis+websocket实现实时排序股票图</title>
    <link href="https://wyx6.top/redis-websocket%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://wyx6.top/redis-websocket%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2020-12-28T11:14:49.000Z</published>
    <updated>2021-02-21T11:31:03.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们之前学习过<a href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/?t=1609153167579">websocket</a></p><p>在这次我们又新学习了<a href="https://www.runoob.com/redis/redis-sorted-sets.html">redis的有序集合</a>  </p><p>​        有序集合的底层是 <strong>链表</strong> 和 <strong>hash</strong></p><p>​        在查询时又使用了<strong>跳表</strong> 增加了占用空间  是一种以空间换时间的方式</p><p>​        </p><p>话不多说 直接开干</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket <span class="token keyword">import</span> accept_websocket<span class="token comment"># 获取排行榜</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">ranking</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 向前端发送时间</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                list2 <span class="token operator">=</span> r6<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                list2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>                list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># print(list2)</span>                s <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>                    s <span class="token operator">+=</span> <span class="token number">1</span>                    list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"total"</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"ranking"</span><span class="token punctuation">:</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ranking/'</span><span class="token punctuation">,</span> ranking<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 实时充值排行</span><span class="token punctuation">]</span></code></pre><h1 id="前端vue"><a href="#前端vue" class="headerlink" title="前端vue"></a>前端vue</h1><h2 id="wallet-vue"><a href="#wallet-vue" class="headerlink" title="wallet.vue"></a>wallet.vue</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout id<span class="token operator">=</span><span class="token string">"components-layout-demo-custom-trigger"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider <span class="token operator">:</span>trigger<span class="token operator">=</span><span class="token string">"null"</span> collapsible<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>leftmenu <span class="token operator">:</span>menu_number<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的钱包<span class="token operator">--</span><span class="token operator">-</span>余额 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> balance <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"() => (modal2Visible = true)"</span><span class="token operator">></span>            充值          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>modal            v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"modal2Visible"</span>            title<span class="token operator">=</span><span class="token string">"Vertically centered modal dialog"</span>            centered            @ok<span class="token operator">=</span><span class="token string">"() => (modal2Visible = false)"</span>          <span class="token operator">></span>            充值金额            <span class="token operator">&lt;</span>a<span class="token operator">-</span>input<span class="token operator">-</span>number              <span class="token operator">:</span>formatter<span class="token operator">=</span><span class="token string">"value => `$ $&#123;value&#125;`.replace(/\B(?=(\d&#123;3&#125;)+(?!\d))/g, ',')"</span>              <span class="token operator">:</span>parser<span class="token operator">=</span><span class="token string">"value => value.replace(/\$\s?|(,*)/g, '')"</span>              @change<span class="token operator">=</span><span class="token string">"onChange"</span>            <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"postPlant"</span><span class="token operator">></span>普通充值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            选择支付            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/支付宝.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(1)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/微信.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(2)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/pay.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(3)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"'http://127.0.0.1:8000/static/we_pay/' + we_img"</span> alt<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"we_img"</span> title<span class="token operator">=</span><span class="token string">"微信扫码"</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>modal<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的优惠券<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>今日充值排行榜<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in message"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>ranking <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>充值金额<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>total <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//导入组件</span><span class="token keyword">import</span> leftmenu <span class="token keyword">from</span> <span class="token string">'./leftmenu.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> staff_service <span class="token keyword">from</span> <span class="token string">'./staff_service.vue'</span><span class="token punctuation">;</span><span class="token comment">//导入跨域</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getBalance<span class="token punctuation">,</span> getWxBack<span class="token punctuation">,</span> postPlant<span class="token punctuation">,</span> postRecharge<span class="token punctuation">,</span> postWxBack<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      balance<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      modal2Visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      total_amount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      we_img<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//注册组件标签</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'staff_service'</span><span class="token operator">:</span> staff_service<span class="token punctuation">,</span>    <span class="token string">'leftmenu'</span><span class="token operator">:</span> leftmenu<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">postPlant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        balance<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postPlant</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modal2Visible <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//获取余额</span>    <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(res)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> res<span class="token punctuation">.</span>balance      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//跳转支付</span>    <span class="token function">postBalance</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postBalance'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        total_amount<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>        pay_method<span class="token operator">:</span> value      <span class="token punctuation">&#125;</span>      <span class="token function">postRecharge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment">// this.$router.push(res.data.pay_url)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>pay_url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>we_img <span class="token operator">=</span> res<span class="token punctuation">.</span>img        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/pay/ranking/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> data2        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span>message <span class="token operator">=</span> data        <span class="token comment">// getWxBack(&#123;img: _this.we_img&#125;).then(res => &#123;</span>        <span class="token comment">// // getWxBack(&#123;img: "order_773561.jpg"&#125;).then(res => &#123;</span>        <span class="token comment">//   _this.getBalance()</span>        <span class="token comment">// &#125;)</span>        <span class="token comment">// data = JSON.parse(data)</span>        <span class="token comment">// console.log(data[0])</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger <span class="token punctuation">&#123;</span>  font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>  padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>  transition<span class="token operator">:</span> color <span class="token number">0.3</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>  color<span class="token operator">:</span> #<span class="token number">1890</span>ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>logo <span class="token punctuation">&#123;</span>  height<span class="token operator">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>  background<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  margin<span class="token operator">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="apis-js"><a href="#apis-js" class="headerlink" title="apis.js"></a>apis.js</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取用户余额</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/balance/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 三方的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRecharge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/pay/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 自定义的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postPlant</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/plant/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 查看微信支付是否完成</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getWxBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/wx_back/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span> <span class="token string">'/wallet'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"余额"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> wallet<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://img-blog.csdnimg.cn/20201228164108714.gif" alt="在这里插入图片描述" loading="lazy"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>完全ok 没有难点 需要记住redis的方法 zrange   以及withscores属性</p><p><img src="https://img-blog.csdnimg.cn/20201228191348241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
    
    
    <summary type="html">天高目远须长久，地厚心深大事成</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    
    <category term="redis" scheme="https://wyx6.top/tags/redis/"/>
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>django2.0.4+vue工厂模式 支付融合 微信二维码支付、支付宝、PayPal跨境支付</title>
    <link href="https://wyx6.top/django2-0-4-vue%E6%94%AF%E4%BB%98%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BE%AE%E4%BF%A1%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81PalPay/"/>
    <id>https://wyx6.top/django2-0-4-vue%E6%94%AF%E4%BB%98%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BE%AE%E4%BF%A1%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81PalPay/</id>
    <published>2020-12-28T09:17:05.000Z</published>
    <updated>2021-02-19T08:58:43.336Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式我们在之前已经使用过了  当时我们做的是三方登录 <a href="https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/">有兴趣的可以戳这里</a></p><p>所需包</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> mydjango<span class="token punctuation">.</span>settings <span class="token keyword">import</span> alipay<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token keyword">from</span> payment<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> payment<span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> uuid<span class="token keyword">import</span> qrcode<span class="token keyword">import</span> paypalrestsdk</code></pre><h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>大家先去看<a href="https://opendocs.alipay.com/open/291/introduce">官方文档</a></p><p>或者看<a href="https://blog.csdn.net/weixin_45954124/article/details/109583431">我的教程</a></p><p><img src="https://img-blog.csdnimg.cn/20201228163628128.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="settings-py配置"><a href="#settings-py配置" class="headerlink" title="settings.py配置"></a>settings.py配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 支付宝配置</span><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment"># 回调地址</span>RETURN_URL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/pay/ali_back/'</span>app_private_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/app_private_key'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay_public_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/alipay_public'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    appid<span class="token operator">=</span><span class="token string">"2016102500759596"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 默认回调url</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span>  <span class="token comment"># RSA 或者 RSA2</span>    debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 默认False</span><span class="token punctuation">)</span></code></pre><h2 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><p>支付宝生成一个支付地址 跳转即可支付</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Ali</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span><span class="token string">"唯一不重复字符串"</span><span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span><span class="token string">"金额"</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AliBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ali_pay/'</span><span class="token punctuation">,</span> Ali<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> AliBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="微信扫码支付"><a href="#微信扫码支付" class="headerlink" title="微信扫码支付"></a>微信扫码支付</h1><p>大家先去看<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5&index=3">官方文档</a></p><p>或者看[教程</p><p><a href="https://v3u.cn/a_id_182"><img src="https://img-blog.csdnimg.cn/20201228163627495.gif" alt="请添加图片描述" style="zoom:200%;" / loading="lazy"></a></p><h2 id="支付接口！！！"><a href="#支付接口！！！" class="headerlink" title="支付接口！！！"></a>支付接口！！！</h2><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><h3 id="wx-pay-py"><a href="#wx-pay-py" class="headerlink" title="wx_pay.py"></a>wx_pay.py</h3><p><a href="https://blog.csdn.net/weixin_45954124/article/details/112294468">点击查看</a></p><p>我们在调用支付接口时就要生成一个订单信息</p><p>微信支付生成二维码</p><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>生成图片在项目文件下 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">class</span> <span class="token class-name">Wx</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="验证支付地址"><a href="#验证支付地址" class="headerlink" title="验证支付地址"></a>验证支付地址</h2><p>微信需要我们去验证一下是否完成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WxBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token string">"order_235117"</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置-1"><a href="#路由配置-1" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'wx_pay/'</span><span class="token punctuation">,</span> Wx<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> WxBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="PayPal-国际支付"><a href="#PayPal-国际支付" class="headerlink" title="PayPal 国际支付"></a>PayPal 国际支付</h1><p><a href="https://github.com/paypal/PayPal-Python-SDK#configuration">官方文档</a></p><p><a href="https://v3u.cn/a_id_157">教程</a></p><img src="https://img-blog.csdnimg.cn/20201228163956125.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h2 id="支付接口-1"><a href="#支付接口-1" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">5.00</span><span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"支付失败"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址-1"><a href="#回调地址-1" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span></code></pre><h2 id="路由配置-2"><a href="#路由配置-2" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'pay_pay/'</span><span class="token punctuation">,</span> PayPal<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PayBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>这时候我们发现三方支付的流程大致是一样的  </p><p>我们进行资源整合</p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Create your models here.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># User有用户名即可 username</span><span class="token comment"># 充值</span><span class="token keyword">class</span> <span class="token class-name">Recharge</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    PAY_METHOD <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"支付宝"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"微信"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Pay"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    ORDER_STATUS <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"待充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"已充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"已取消"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>PROTECT<span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"充值用户"</span><span class="token punctuation">)</span>    order_id <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'订单号'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">124</span><span class="token punctuation">)</span>    trade_no <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'支付宝订单号'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 28位</span>    pay_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'充值时间'</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pay_method <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'充值方式'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>PAY_METHOD<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'充值状态'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>ORDER_STATUS<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    total_amount <span class="token operator">=</span> models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"充值金额"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'充值支付'</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>order_id</code></pre><h2 id="plant-py-工厂模式"><a href="#plant-py-工厂模式" class="headerlink" title="plant.py 工厂模式"></a>plant.py 工厂模式</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> payment<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> payment<span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> uuid<span class="token keyword">from</span> mydjango<span class="token punctuation">.</span>settings <span class="token keyword">import</span> alipay<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token keyword">import</span> qrcode<span class="token keyword">import</span> paypalrestsdk<span class="token keyword">class</span> <span class="token class-name">WxPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token comment"># print(data_dict)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span> <span class="token keyword">and</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>                order_id<span class="token operator">=</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>order_id<span class="token operator">=</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>            user_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>balance<span class="token operator">=</span>user_obj<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'ok'</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token comment"># print(data_dict)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'static/we_pay/'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span>        <span class="token comment"># return HttpResponse(json.dumps(&#123;'img': qrcode_name&#125;))</span><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token comment"># Recharge.objects.filter(order_id=data_dict.get("out_trade_no")).update(status=2)</span>            <span class="token comment"># user_obj = User.objects.filter(username=request.user.username)</span>            <span class="token comment"># user_obj.update(balance=user_obj.first().balance + int(data_dict.get("total_fee")))</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> total_amount <span class="token operator">/</span> <span class="token number">6.531</span>        total_amount <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span><span class="token keyword">class</span> <span class="token class-name">AliPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment"># orders_obj = Recharge.objects.get(order_id=data['out_trade_no'])</span>        <span class="token comment"># orders_obj.trade_no = data['trade_no']</span>        <span class="token comment"># orders_obj.status = 2</span>        <span class="token comment"># orders_obj.save()</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span>obj<span class="token punctuation">.</span>order_id<span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span>obj<span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">product_pay</span><span class="token punctuation">(</span>why<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(why)</span>        <span class="token keyword">if</span> why <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WxPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> PayPal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> why <span class="token operator">==</span> <span class="token string">"ali_back"</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> AliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token string">"wx_back"</span><span class="token punctuation">:</span>            w <span class="token operator">=</span> WxPay<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> w<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token string">"pay_back"</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> PayPal<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span></code></pre><h2 id="views-py-视图"><a href="#views-py-视图" class="headerlink" title="views.py 视图"></a>views.py 视图</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通充值</span><span class="token keyword">class</span> <span class="token class-name">PlantAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        balance <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            list2 <span class="token operator">=</span> r6<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            list2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>            list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>                list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> x <span class="token keyword">in</span> list3<span class="token punctuation">:</span>                    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> x<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> k <span class="token operator">==</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">:</span>                            total <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            r6<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> total<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            r6<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        user_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>balance<span class="token operator">=</span>user_obj<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> balance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 工厂模式  支付</span><span class="token keyword">class</span> <span class="token class-name">PlantPayAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># 充值地址或者二维码</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        why <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> plant<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_pay<span class="token punctuation">(</span>why<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>pay_url<span class="token punctuation">.</span>pay<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 回调地址 获取用户详细信息</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        details <span class="token operator">=</span> plant<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_pay<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"details"</span><span class="token punctuation">:</span> details<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 获取余额</span><span class="token keyword">class</span> <span class="token class-name">BalanceAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"balance"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>balance<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="urls-py-路由"><a href="#urls-py-路由" class="headerlink" title="urls.py 路由"></a>urls.py 路由</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># path('balance/', balance),</span>    path<span class="token punctuation">(</span><span class="token string">'balance/'</span><span class="token punctuation">,</span> BalanceAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 获取余额</span>    path<span class="token punctuation">(</span><span class="token string">'pay/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 工厂模式 支付</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 阿里回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># wx 验证地址</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># pal回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'plant/'</span><span class="token punctuation">,</span> PlantAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 普通充值接口</span><span class="token punctuation">]</span></code></pre><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="wallet-vue-前端页面展示"><a href="#wallet-vue-前端页面展示" class="headerlink" title="wallet.vue  前端页面展示"></a>wallet.vue  前端页面展示</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout id<span class="token operator">=</span><span class="token string">"components-layout-demo-custom-trigger"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider <span class="token operator">:</span>trigger<span class="token operator">=</span><span class="token string">"null"</span> collapsible<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>leftmenu <span class="token operator">:</span>menu_number<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的钱包<span class="token operator">--</span><span class="token operator">-</span>余额 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> balance <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"() => (modal2Visible = true)"</span><span class="token operator">></span>            充值          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>modal            v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"modal2Visible"</span>            title<span class="token operator">=</span><span class="token string">"Vertically centered modal dialog"</span>            centered            @ok<span class="token operator">=</span><span class="token string">"() => (modal2Visible = false)"</span>          <span class="token operator">></span>            充值金额            <span class="token operator">&lt;</span>a<span class="token operator">-</span>input<span class="token operator">-</span>number              <span class="token operator">:</span>formatter<span class="token operator">=</span><span class="token string">"value => `$ $&#123;value&#125;`.replace(/\B(?=(\d&#123;3&#125;)+(?!\d))/g, ',')"</span>              <span class="token operator">:</span>parser<span class="token operator">=</span><span class="token string">"value => value.replace(/\$\s?|(,*)/g, '')"</span>              @change<span class="token operator">=</span><span class="token string">"onChange"</span>            <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"postPlant"</span><span class="token operator">></span>普通充值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            选择支付            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/支付宝.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(1)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/微信.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(2)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/pay.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(3)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"'http://127.0.0.1:8000/static/we_pay/' + we_img"</span> alt<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"we_img"</span> title<span class="token operator">=</span><span class="token string">"微信扫码"</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>modal<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的优惠券<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//导入组件</span><span class="token keyword">import</span> leftmenu <span class="token keyword">from</span> <span class="token string">'./leftmenu.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> staff_service <span class="token keyword">from</span> <span class="token string">'./staff_service.vue'</span><span class="token punctuation">;</span><span class="token comment">//导入跨域</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getBalance<span class="token punctuation">,</span> getWxBack<span class="token punctuation">,</span> postPlant<span class="token punctuation">,</span> postRecharge<span class="token punctuation">,</span> postWxBack<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      balance<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      modal2Visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      total_amount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      we_img<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//注册组件标签</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'staff_service'</span><span class="token operator">:</span> staff_service<span class="token punctuation">,</span>    <span class="token string">'leftmenu'</span><span class="token operator">:</span> leftmenu<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">postPlant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        balance<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postPlant</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modal2Visible <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//获取余额</span>    <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(res)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> res<span class="token punctuation">.</span>balance      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//跳转支付</span>    <span class="token function">postBalance</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postBalance'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        total_amount<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>        pay_method<span class="token operator">:</span> value      <span class="token punctuation">&#125;</span>      <span class="token function">postRecharge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment">// this.$router.push(res.data.pay_url)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>pay_url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>we_img <span class="token operator">=</span> res<span class="token punctuation">.</span>img        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger <span class="token punctuation">&#123;</span>  font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>  padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>  transition<span class="token operator">:</span> color <span class="token number">0.3</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>  color<span class="token operator">:</span> #<span class="token number">1890</span>ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>logo <span class="token punctuation">&#123;</span>  height<span class="token operator">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>  background<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  margin<span class="token operator">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="apis-js-访问接口"><a href="#apis-js-访问接口" class="headerlink" title="apis.js  访问接口"></a>apis.js  访问接口</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取用户余额</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/balance/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 三方的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRecharge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/pay/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 自定义的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postPlant</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/plant/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 查看微信支付是否完成</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getWxBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/wx_back/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre><h2 id="index-js-配置路由"><a href="#index-js-配置路由" class="headerlink" title="index.js  配置路由"></a>index.js  配置路由</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span> <span class="token string">'/wallet'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"余额"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> wallet<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><img src="https://img-blog.csdnimg.cn/20201228164108714.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来说是没有难度的  大家要细心  注意配置文件以及秘钥 这里就全体跑通服务了</p><p>大家需要多看官方文档</p><p>支付宝沙箱是不稳定的，大家需要注意</p><p>微信我们这里使用的是二维码支付，大家也可以使用别的进行支付，没有回调地址，我们支付完成后要进行验证</p><p>paypal是国际通用的  大家要进行实时汇率转换 我这里是写死的 注意</p><p>我们这里还可以进行拓展 例如充值排行榜和优惠券 稍后带来</p>]]></content>
    
    
    <summary type="html">路漫漫其修远兮，吾将上下而求索</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    <category term="工厂模式" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="微信支付" scheme="https://wyx6.top/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
    <category term="沙箱支付" scheme="https://wyx6.top/tags/%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/"/>
    
    <category term="支付宝支付" scheme="https://wyx6.top/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
    <category term="PayPal支付" scheme="https://wyx6.top/tags/PayPal%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>django+vue基于websocket人工客服系统打造</title>
    <link href="https://wyx6.top/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E9%80%A0/"/>
    <id>https://wyx6.top/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E9%80%A0/</id>
    <published>2020-12-23T11:47:01.000Z</published>
    <updated>2021-02-19T08:53:11.156Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/?t=1608730074702">websocket已经讲过了有兴趣的可以戳这里</a></p><p>今天我们要做的就是基于websocket实时人工客服，先来了解一下机制</p><h1 id="WebSocket-机制"><a href="#WebSocket-机制" class="headerlink" title="WebSocket 机制"></a>WebSocket 机制</h1><p>WebSocket 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在 TCP 之上，同 HTTP 一样通过 TCP 来传输数据，但是它和 HTTP 最大不同是：</p><ul><li>WebSocket 是一种双向通信协议，在建立连接后，WebSocket 服务器和 Browser/Client Agent 都能主动的向对方发送或接收数据，就像 Socket 一样；</li><li>WebSocket 需要类似 TCP 的客户端和服务器端通过握手连接，连接成功后才能相互通信。</li><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tV2ViU29ja2V0L2ltZzAwMi5qcGc?x-oss-process=image/format,png" alt="图 2.WebSocket 请求响应客户端服务器交互图" loading="lazy"></li></ul><p>那我们知道可为什么要使用它了吧</p><h1 id="django后端接口"><a href="#django后端接口" class="headerlink" title="django后端接口"></a>django后端接口</h1><h2 id="表的设计"><a href="#表的设计" class="headerlink" title="表的设计"></a>表的设计</h2><p><img src="https://img-blog.csdnimg.cn/20201223200058535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 聊天表</span><span class="token keyword">class</span> <span class="token class-name">Chat</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_id_a <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    user_id_b <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        index_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id_a'</span><span class="token punctuation">,</span> <span class="token string">'user_id_b'</span><span class="token punctuation">]</span>        unique_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id_a'</span><span class="token punctuation">,</span> <span class="token string">'user_id_b'</span><span class="token punctuation">]</span>        <span class="token comment"># 联合索引要这样写入！！！！！！！！！</span>        db_table <span class="token operator">=</span> <span class="token string">'聊天表'</span><span class="token comment"># 消息表</span><span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    message <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    chat <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Chat<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'消息表'</span></code></pre><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 接收前端信息</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">reception_socket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> message <span class="token keyword">in</span> request<span class="token punctuation">.</span>websocket<span class="token punctuation">:</span>            input_text <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            username <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            uid <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>            input_text <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"inputText"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                chat <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>message<span class="token operator">=</span>input_text<span class="token punctuation">,</span> chat<span class="token operator">=</span>chat<span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                chat_id <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>message<span class="token operator">=</span>input_text<span class="token punctuation">,</span> chat<span class="token operator">=</span>chat_id<span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment"># 主动推送消息</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">send_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    uid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 向前端发送时间</span>                        <span class="token keyword">try</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                ser <span class="token operator">=</span> MessageModelSerializer<span class="token punctuation">(</span>Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>chat_id<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>urls.py</p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">from django.urls import path, includefrom .views import *urlpatterns &#x3D; [    path(&#39;reception_socket&#x2F;&#39;, reception_socket),    # 客服系统接收前端信息    path(&#39;send_websocket&#x2F;&#39;, send_websocket),  #客服发送消息]</code></pre><h1 id="VUE前端"><a href="#VUE前端" class="headerlink" title="VUE前端"></a>VUE前端</h1><h2 id="客户页面-staff-service-vue"><a href="#客户页面-staff-service-vue" class="headerlink" title="客户页面  staff_service.vue"></a>客户页面  staff_service.vue</h2><p>我这里封装为组件了 你也可以给个路由成为一个单独的页面</p><p><img src="https://img-blog.csdnimg.cn/20201223201100165.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"showDrawer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"plus"</span><span class="token operator">/</span><span class="token operator">></span>        人工客服      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>drawer        title<span class="token operator">=</span><span class="token string">"翔翔客服带给您最好的体验"</span>        <span class="token operator">:</span>width<span class="token operator">=</span><span class="token string">"720"</span>        <span class="token operator">:</span>visible<span class="token operator">=</span><span class="token string">"visible"</span>        <span class="token operator">:</span>body<span class="token operator">-</span>style<span class="token operator">=</span><span class="token string">"&#123; paddingBottom: '80px' &#125;"</span>        @close<span class="token operator">=</span><span class="token string">"onClose(false)"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in message"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>              <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>form <span class="token operator">:</span>form<span class="token operator">=</span><span class="token string">"form"</span> layout<span class="token operator">=</span><span class="token string">"vertical"</span> hide<span class="token operator">-</span>required<span class="token operator">-</span>mark<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token operator">:</span>span<span class="token operator">=</span><span class="token string">"24"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"Description"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a<span class="token operator">-</span>textarea                  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputText"</span>                  <span class="token operator">:</span>rows<span class="token operator">=</span><span class="token string">"4"</span>                  placeholder<span class="token operator">=</span><span class="token string">"请输入问题描述"</span>                <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>div          <span class="token operator">:</span>style<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>          position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>          right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>          borderTop<span class="token operator">:</span> <span class="token string">'1px solid #e9e9e9'</span><span class="token punctuation">,</span>          padding<span class="token operator">:</span> <span class="token string">'10px 16px'</span><span class="token punctuation">,</span>          background<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>          textAlign<span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>          zIndex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>"        <span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123; marginRight: '8px' &#125;"</span> @click<span class="token operator">=</span><span class="token string">"onClose(false)"</span><span class="token operator">></span>            Cancel          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"onClose(true)"</span><span class="token operator">></span>            Submit          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>drawer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">'js-md5'</span><span class="token punctuation">;</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">"echarts"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"staff_service"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      form<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$form<span class="token punctuation">.</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      inputText<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      uid<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">showDrawer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token parameter">ok</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> ok<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">//判断浏览器是否支持websocket</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//生成websocket链接</span>          <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/reception_socket/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//发送链接请求</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span> _this<span class="token punctuation">.</span>username<span class="token punctuation">,</span> inputText<span class="token operator">:</span> _this<span class="token punctuation">.</span>inputText<span class="token punctuation">,</span> uid<span class="token operator">:</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//发送消息</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将获取信息打印</span>            <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token comment">// alert(received_msg);</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//捕获断开链接</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/send_websocket/?uid="</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> data2        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span>message <span class="token operator">=</span> data        <span class="token comment">// data = JSON.parse(data)</span>        <span class="token comment">// console.log(data[0])</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="客服页面service-vue"><a href="#客服页面service-vue" class="headerlink" title="客服页面service.vue"></a>客服页面service.vue</h2><p>需要设置路由 客服是一个单独的页面</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"showDrawer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"plus"</span><span class="token operator">/</span><span class="token operator">></span>        人工客服      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>drawer        title<span class="token operator">=</span><span class="token string">"翔翔客服带给您最好的体验"</span>        <span class="token operator">:</span>width<span class="token operator">=</span><span class="token string">"720"</span>        <span class="token operator">:</span>visible<span class="token operator">=</span><span class="token string">"visible"</span>        <span class="token operator">:</span>body<span class="token operator">-</span>style<span class="token operator">=</span><span class="token string">"&#123; paddingBottom: '80px' &#125;"</span>        @close<span class="token operator">=</span><span class="token string">"onClose(false)"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in message"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>              <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>form <span class="token operator">:</span>form<span class="token operator">=</span><span class="token string">"form"</span> layout<span class="token operator">=</span><span class="token string">"vertical"</span> hide<span class="token operator">-</span>required<span class="token operator">-</span>mark<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token operator">:</span>span<span class="token operator">=</span><span class="token string">"24"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"Description"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a<span class="token operator">-</span>textarea                  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputText"</span>                  <span class="token operator">:</span>rows<span class="token operator">=</span><span class="token string">"4"</span>                  placeholder<span class="token operator">=</span><span class="token string">"请输入问题描述"</span>                <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>div          <span class="token operator">:</span>style<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>          position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>          right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>          borderTop<span class="token operator">:</span> <span class="token string">'1px solid #e9e9e9'</span><span class="token punctuation">,</span>          padding<span class="token operator">:</span> <span class="token string">'10px 16px'</span><span class="token punctuation">,</span>          background<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>          textAlign<span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>          zIndex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>"        <span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123; marginRight: '8px' &#125;"</span> @click<span class="token operator">=</span><span class="token string">"onClose(false)"</span><span class="token operator">></span>            Cancel          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"onClose(true)"</span><span class="token operator">></span>            Submit          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>drawer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">'js-md5'</span><span class="token punctuation">;</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">"echarts"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"staff_service"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      form<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$form<span class="token punctuation">.</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      inputText<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      uid<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">showDrawer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token parameter">ok</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> ok<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">//判断浏览器是否支持websocket</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//生成websocket链接</span>          <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/reception_socket/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//发送链接请求</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span> <span class="token string">"客服"</span><span class="token punctuation">,</span> inputText<span class="token operator">:</span> _this<span class="token punctuation">.</span>inputText<span class="token punctuation">,</span> uid<span class="token operator">:</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//发送消息</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将获取信息打印</span>            <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token comment">// alert(received_msg);</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//捕获断开链接</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/send_websocket/?uid="</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> data2        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span>message <span class="token operator">=</span> data        <span class="token comment">// data = JSON.parse(data)</span>        <span class="token comment">// console.log(data[0])</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://img-blog.csdnimg.cn/20201223201913770.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>ok 今天的学习就到这里了</p>]]></content>
    
    
    <summary type="html">会当凌绝顶，一览众山小</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/websocket/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>django+vue基于websocket创造实时ECharts股票图</title>
    <link href="https://wyx6.top/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/"/>
    <id>https://wyx6.top/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/</id>
    <published>2020-12-23T11:00:42.000Z</published>
    <updated>2021-02-19T08:52:50.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、什么是Websocket"><a href="#一-、什么是Websocket" class="headerlink" title="一 、什么是Websocket"></a>一 、<a href="https://baike.baidu.com/item/WebSocket/1953845?fr=aladdin">什么是Websocket</a></h1><p>WebSocket是一种在单个TCP连接上进行全双工通信的协议</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</p><p>现在，很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p>而比较新的技术去做轮询的效果是Comet。这种技术虽然可以双向通信，但依然需要反复发出请求。而且在Comet中，普遍采用的长链接，也会消耗服务器资源。</p><p>在这种情况下，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯</p><h1 id="websocket作用及意义"><a href="#websocket作用及意义" class="headerlink" title="websocket作用及意义"></a>websocket作用及意义</h1><p>Browser已经支持http协议，为什么还要开发一种新的WebSocket协议呢？我们知道http协议是一种单向的网络协议，在建立连接后，它只允许Browser/UA（UserAgent）向WebServer发出请求资源后，WebServer才能返回相应的数据。而WebServer不能主动的推送数据给Browser/UA，当初这么设计http协议也是有原因的，假设WebServer能主动的推送数据给Browser/UA，那Browser/UA就太容易受到攻击，一些广告商也会主动的把一些广告信息在不经意间强行的传输给客户端，这不能不说是一个灾难。那么单向的http协议给现在的网站或Web应用程序开发带来了哪些问题呢？</p><p>让我们来看一个案例，现在假设我们想开发一个基于Web的应用程序去获取当前Web<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">服务器</a>的实时数据，例如股票的实时行情，火车票的剩余票数等等，这就需要Browser/UA与WebServer端之间反复的进行http通信，Browser不断的发送Get请求，去获取当前的实时数据。下面介绍几种常见的方式：</p><h1 id="二、什么是ECharts"><a href="#二、什么是ECharts" class="headerlink" title="二、什么是ECharts"></a>二、<a href="https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts">什么是ECharts</a></h1><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>丰富的可视化类型</li><li>多种数据格式无需转换直接使用</li><li>千万数据的前端展现</li><li>移动端优化</li><li>多渲染方案，跨平台使用！</li><li>深度的交互式数据探索</li><li>多维数据的支持以及丰富的视觉编码手段</li><li>动态数据</li><li>绚丽的特效</li><li>通过 GL 实现更多更强大绚丽的三维可视化</li><li>无障碍访问（4.0+）</li></ol><h1 id="三、Django实现Websocket"><a href="#三、Django实现Websocket" class="headerlink" title="三、Django实现Websocket"></a>三、Django实现Websocket</h1><p><strong>django实现websocket大致上有两种方式，一种channels，一种是dwebsocket。channels依赖于redis，twisted等，相比之下使用dwebsocket要更为方便一些</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#dwebsocket有两种装饰器：require_websocket和accept_websocekt，使用require_websocket装饰器会导致视图函数无法接收导致正常的http请求，一般情况使用accept_websocket方式就可以了，</span><span class="token comment"># </span><span class="token comment"># dwebsocket的一些内置方法：</span><span class="token comment"># </span><span class="token comment"># request.is_websocket（）：判断请求是否是websocket方式，是返回true，否则返回false</span><span class="token comment"># request.websocket： 当请求为websocket的时候，会在request中增加一个websocket属性，</span><span class="token comment"># WebSocket.wait（） 返回客户端发送的一条消息，没有收到消息则会导致阻塞</span><span class="token comment"># WebSocket.read（） 和wait一样可以接受返回的消息，只是这种是非阻塞的，没有消息返回None</span><span class="token comment"># WebSocket.count_messages（）返回消息的数量</span><span class="token comment"># WebSocket.has_messages（）返回是否有新的消息过来</span><span class="token comment"># WebSocket.send（message）像客户端发送消息，message为byte类型</span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-python" data-language="python"><code class="language-python">pip install dwebsocket</code></pre><h2 id="dwebsocket配置"><a href="#dwebsocket配置" class="headerlink" title="dwebsocket配置"></a>dwebsocket配置</h2><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'dwebsocket'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'dwebsocket.middleware.WebSocketMiddleware'</span><span class="token punctuation">,</span>    <span class="token comment"># 为所有的URL提供websocket，如果只是单独的视图需要可以不选</span><span class="token punctuation">]</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>案例 根据自己的情况进行修改</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">test_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定时推送 无限循环</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">## 每隔5秒发送一次</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"发送的内容"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h2><ol><li><p>首先获取数据  存储到mongodb</p><p>data_test.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimehost <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token comment"># client = MongoClient(host, 27017)  # 建立客户端对象</span><span class="token comment"># db = client.mydb  # 连接mydb数据库，没有则自动创建</span><span class="token comment"># myset = db.testset  # 使用test_set集合，没有则自动创建</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'test3'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> db<span class="token punctuation">.</span>persons<span class="token comment"># 在PyMongo 3.x版本后，官方推荐使用insert_one(),该方法返回的不再是单纯的_id值，我们需要执行result.inserted_id查看 _id 值</span>ress <span class="token operator">=</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询集合中age是20的数据</span><span class="token comment"># res = p.find(&#123;'age':&#123;'$gt':20&#125;&#125;)  # 查询集合中age大于20的数据</span><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">'https://data.gtimg.cn/flashdata/hushen/latest/daily/sz000002.js?maxage=43201&amp;visitDstTime=1'</span><span class="token punctuation">)</span>  <span class="token comment"># 向get中传入一个网址</span><span class="token comment"># type(res)  # 响应对象lass 'requests.models.Response'></span><span class="token comment"># print(res.status_code)  # 响应码</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># print(res.text.split("\n"))</span><span class="token keyword">def</span> <span class="token function">add_stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b<span class="token punctuation">[</span><span class="token string">"_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"day"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        p<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li><li><p>在视图中views.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 今日股市</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">test_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment"># [&#123;'_id': '200729', 'p1': '26.71', 'p2': '27.11', 'p3': '27.14', 'p4': '26.51', 'day': '926894'&#125;]</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>            add_stock<span class="token punctuation">(</span><span class="token punctuation">)</span>            inform_user<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 向前端发送时间</span></code></pre></li><li><p>路由urls.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'websocketlink/'</span><span class="token punctuation">,</span> test_websocket<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># websocket常连接实时跟新</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="四、前端Vue"><a href="#四、前端Vue" class="headerlink" title="四、前端Vue"></a>四、前端Vue</h2><p><strong>事例</strong> </p><p>因为我们是实时更新 所以需要写在钩子函数中 <a href="">关于vue生命周期点击查看</a></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">//判断浏览器是否支持websocket</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//生成websocket链接</span>    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/send_websocket/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送链接请求</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//发送消息</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//将获取信息打印</span>      <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token comment">// alert(received_msg);</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//捕获断开链接</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>statistics.vue</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1 align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>今日股票<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 为 ECharts 准备一个具备大小（宽高）的 <span class="token constant">DOM</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"main"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;width: '2000px',height:'600px'&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getStatistics<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"statistics"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> data      <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">let</span> p_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token function">getStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        data <span class="token operator">=</span> res<span class="token punctuation">.</span>data        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          id_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span>          p_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span>          <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              text<span class="token operator">:</span> <span class="token string">'今日股市'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// data: id_list</span>              data<span class="token operator">:</span> id_list            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>              name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>              type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>              data<span class="token operator">:</span> p_list              <span class="token comment">// data: pr_list</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id_list<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/websocketlink/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p1_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p2_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p3_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p4_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          id_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span>          p1_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span>          p2_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p2<span class="token punctuation">)</span>          p3_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p3<span class="token punctuation">)</span>          p4_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p4<span class="token punctuation">)</span>          <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              text<span class="token operator">:</span> <span class="token string">'今日股市'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// data: id_list</span>              data<span class="token operator">:</span> id_list            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p1_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p2_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p3_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p4_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://img-blog.csdnimg.cn/20201223194549725.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>ok搞定收工</p>]]></content>
    
    
    <summary type="html">欲穷千里目，更上一城楼</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django2.0.4--vue" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/categories/python3/django2-0-4-vue/websocket/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="vue" scheme="https://wyx6.top/tags/vue/"/>
    
    <category term="websocket" scheme="https://wyx6.top/tags/websocket/"/>
    
    <category term="ECharts" scheme="https://wyx6.top/tags/ECharts/"/>
    
  </entry>
  
  <entry>
    <title>python高阶函数详解</title>
    <link href="https://wyx6.top/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://wyx6.top/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2020-12-22T10:45:17.698Z</published>
    <updated>2021-01-07T13:07:31.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Python中，变量可以指向函数</p><p>函数名也是变量</p><p>既然变量可以指向函数，<br>函数的参数能接收变量，</p><p><strong>&lt;&lt;&lt;那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。&gt;&gt;&gt;</strong></p><h1 id="map-function-iterable-…"><a href="#map-function-iterable-…" class="headerlink" title="map(function, iterable, …)"></a>map(function, iterable, …)</h1><p>map(function, iterable, …)</p><p><strong>功能</strong><br><strong>将第一个参数 function 依次作用在参数可迭代对象中的每一个元素上，</strong><br><strong>返回包含每次 function 函数返回值的新迭代器</strong></p><p><strong>参数</strong><br><strong>function – 函数，有两个参数</strong><br><strong>iterable – 俩个可迭代对象（如：序列）</strong></p><p><strong>返回值</strong><br><strong>Python 3.x 返回迭代器</strong></p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def func(a,b):    return a * b     #map第一个实参写函数名                            #实参以最少的一方为准ss &#x3D; map(func,[1,2,3,4,5],[1,2,3,4,5,6,7,8,9])for i in ss:    #用迭代器输出    print(i)</code></pre><h1 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable[, initializer])"></a>reduce(function, iterable[, initializer])</h1><p>reduce(function, iterable[, initializer])</p><p><strong>功能</strong><br><strong>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：</strong><br><strong>用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，</strong><br><strong>得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</strong></p><p><strong>其效果类似：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</strong></p><p><strong>参数</strong><br><strong>function – 函数，有两个参数</strong><br><strong>iterable – 可迭代对象</strong><br><strong>initializer – 可选，初始参数</strong></p><p><strong>返回值</strong><br><strong>返回函数计算结果。</strong></p><p>俩种书写格式</p><pre class="language-none"><code class="language-none"># 1.0import functools# # 2.0# from functools import reduce#ret &#x3D; functools.reduce(lambda a,b:a*b, [11,22,33,44,55])print(ret)</code></pre><h1 id="filter-function-iterable"><a href="#filter-function-iterable" class="headerlink" title="filter(function, iterable)"></a>filter(function, iterable)</h1><p>filter(function, iterable)</p><p><strong>功能</strong><br><strong>该接收两个参数，第一个为函数，</strong><br><strong>第二个为序列，序列的每个元素作为参数传递给函数进行判断，</strong><br><strong>然后返回 True 或 False，最后将返回 True 的元素放到新迭代器对象中</strong></p><p><strong>参数</strong><br><strong>function – 判断函数</strong><br><strong>iterable – 可迭代对象（如：序列）</strong></p><p><strong>返回值</strong><br><strong>返回一个迭代器对象</strong></p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def func(n):    return n % 2 &#x3D;&#x3D; 0ret &#x3D; filter(func,range(1,101))print(list(ret))        #迭代器ret &#x3D; filter(lambda a: a % 3 &#x3D;&#x3D; 0 ,range(10))print(list(ret))</code></pre><h1 id="sorted-iterable-key-abs-reverse-False"><a href="#sorted-iterable-key-abs-reverse-False" class="headerlink" title="sorted(iterable, key=abs, reverse=False)"></a>sorted(iterable, key=abs, reverse=False)</h1><p>sorted(iterable, key=abs, reverse=False)<br>       #可迭代对象 #绝对值  #排序</p><p><strong>功能</strong><br><strong>对所有可迭代的对象进行排序操作</strong></p><p><strong>参数</strong><br><strong>iterable – 可迭代对象。</strong><br><strong>key – key指定的函数将作用于可迭代对象上的每一个元素，并根据key函数返回的结果进行排序</strong><br><strong>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）</strong></p><p><strong>返回值</strong><br><strong>返回重新排序的列表</strong></p><pre class="language-python" data-language="python"><code class="language-python">ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>绝对值ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span></code></pre><h1 id="lambda表达式-匿名函数"><a href="#lambda表达式-匿名函数" class="headerlink" title="lambda表达式(匿名函数)"></a>lambda表达式(匿名函数)</h1><p>匿名函数的另一个别称是“lambda表达式”</p><p>lambda表达式的语法：<br>       <strong>lambda argument_list: expression</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token comment"># lambda 格式：</span><span class="token comment"># lambda 形参:表达式或者返回值</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>       <span class="token comment">#有参无返</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>ff <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>a<span class="token operator">*</span>b          <span class="token comment">#有参有返</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>在函数内部，可以调用其他函数。</p><p>如果一个函数在内部调用自身本身，这个函数就是递归函数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 阶乘</span><span class="token comment"># 1！= 1*1</span><span class="token comment"># 2！= 1*2</span><span class="token comment"># 3！= 1*2*3</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment">#n * (n-1)</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#调用本身</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>斐波那契数列</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="返回函数-闭包"><a href="#返回函数-闭包" class="headerlink" title="返回函数 闭包"></a>返回函数 闭包</h1><p><strong>外层函数返回内层函数的引用 – 起到了让内层函数执行的目的</strong></p><pre class="language-none"><code class="language-none">#返回函数# def outer():#     def inner():#         return sum([i for i in range(1,101) if i % 2 &#x3D;&#x3D; 0])#     return inner()      #外层函数返回内层函数的引用 -- 起到了让内层函数执行的目的# print(outer())def outer(n):    def inner():        return sum([i for i in range(1,n+1) if i % 2 &#x3D;&#x3D; 0])    return inner      #外层函数返回内层函数的引用 -- 起到了让内层函数执行的目的print(outer(100)())</code></pre><h1 id="闭包是“返回函数”的一个典型应用"><a href="#闭包是“返回函数”的一个典型应用" class="headerlink" title="闭包是“返回函数”的一个典型应用"></a>闭包是“返回函数”的一个典型应用</h1><p><strong>闭包的定义：</strong><br><strong>在一个外函数中定义了一个内函数，    #函数的嵌套</strong><br><strong>内函数里运用了外函数的临时变量，    #嵌套作用域变量</strong><br><strong>并且外函数的返回值是内函数的引用。   #返回函数</strong><br><strong>这样就构成了一个闭包。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 闭包</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> a<span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> innerouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="偏函数由functools-partial创建"><a href="#偏函数由functools-partial创建" class="headerlink" title="偏函数由functools.partial创建"></a>偏函数由functools.partial创建</h1><p><strong>偏函数由functools.partial创建</strong></p><p><strong>它的作用就是，把一个函数的某些参数给固定住</strong><br><strong>（也就是设置默认值），</strong><br><strong>返回一个新的函数，调用这个新函数会更简单。</strong></p><p>#比较少用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b                <span class="token comment">#不可以给第一个值固定 否则报错</span>f <span class="token operator">=</span> partial<span class="token punctuation">(</span>func<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#传a的值</span></code></pre>]]></content>
    
    
    <summary type="html">梦想绝不是梦，两者之间的差别通常都有一段非常值得人们深思的距离</summary>
    
    
    
    <category term="python" scheme="https://wyx6.top/categories/python/"/>
    
    
    <category term="高阶函数" scheme="https://wyx6.top/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>彻底理解python装饰器以及使用场景</title>
    <link href="https://wyx6.top/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://wyx6.top/%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-12-22T10:43:01.555Z</published>
    <updated>2021-02-21T11:29:32.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">装饰器</a></h1><p>装饰器的底层实际就是闭包</p><pre><code>**在一个外函数中定义了一个内函数，    #函数的嵌套**、**内函数里运用了外函数的临时变量，    #嵌套作用域变量****并且外函数的返回值是内函数的引用。   #返回函数****这样就构成了一个闭包。**`</code></pre><p>装饰器是在函数调用之上的修饰 他的作用是在不改变原有项目代码的基础上增加一些额外的功能</p><p>装饰器能有助于检查某个人是否被授权去使用一个web应用的端点(endpoint)。它们被大量使用于Flask和Django web框架中。</p><p>日志是装饰器运用的另一个亮点</p><h1 id="装饰器格式"><a href="#装饰器格式" class="headerlink" title="装饰器格式"></a>装饰器格式</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能'</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">#现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'789'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello python'</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="有形参的装饰器"><a href="#有形参的装饰器" class="headerlink" title="有形参的装饰器"></a>有形参的装饰器</h1><pre class="language-none"><code class="language-none">def outer(func):        # @里有形参 这里必须跟    def inner(a,b):            #自上而下的执行        print(&#39;装饰器函数开始执行&#39;)        print(&#39;特殊校验功能开始执行&#39;)        # 这里也得跟形参        func(a,b)      #现在代表ff        print(&#39;装饰器函数结束执行&#39;)    return inner@outerdef ff(a,b):        #有形参    print(&#39;a+b&#x3D;&#39;,(a+b))ff(50,60)</code></pre><h1 id="有形参的装饰器-用不定长参数"><a href="#有形参的装饰器-用不定长参数" class="headerlink" title="有形参的装饰器  用不定长参数"></a>有形参的装饰器  用不定长参数</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数开始执行'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能开始执行'</span><span class="token punctuation">)</span>        <span class="token comment"># 这里也得跟形参</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>      <span class="token comment">#现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数结束执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#有形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a+b+d='</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span></code></pre><h1 id="多层装饰器"><a href="#多层装饰器" class="headerlink" title="多层装饰器"></a>多层装饰器</h1><p><strong>多层嵌套装饰器开始的时候，</strong><br><strong>装饰器自上而下开始，</strong><br><strong>然后执行函数操作，</strong><br><strong>结束时，装饰器自下而上结束</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数1开始执行'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能1开始执行'</span><span class="token punctuation">)</span>        <span class="token comment"># 这里也得跟形参</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># 现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数1结束执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">def</span> <span class="token function">outer2</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数2开始执行'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能2开始执行'</span><span class="token punctuation">)</span>        <span class="token comment"># 这里也得跟形参</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># 现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数2结束执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer1</span><span class="token decorator annotation punctuation">@outer2</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 有形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a+b+d='</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span></code></pre><h1 id="装饰器使用场景"><a href="#装饰器使用场景" class="headerlink" title="装饰器使用场景"></a><strong>装饰器使用场景</strong></h1><ul><li>计算运行时间</li><li><code>身份验证</code></li><li>写入日志</li><li>redis缓存</li></ul><h2 id="计算运行时间装饰器"><a href="#计算运行时间装饰器" class="headerlink" title="计算运行时间装饰器"></a>计算运行时间装饰器</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#timer(test1)  func=test1</span>    <span class="token keyword">def</span> <span class="token function">deco</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>      <span class="token comment">#run test1</span>        stop_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running time is %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> deco<span class="token decorator annotation punctuation">@timer</span>     <span class="token comment"># test1=timer(test1)</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in the test1"</span><span class="token punctuation">)</span>test1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><pre class="language-python" data-language="python"><code class="language-python">user<span class="token punctuation">,</span>passwd <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> user <span class="token operator">==</span> username <span class="token keyword">and</span> password <span class="token operator">==</span> passwd<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"User has passed authentication"</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> func<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span>   <span class="token comment">#这里执行func()相当于执行调用的函数如home()</span>            <span class="token keyword">return</span> res          <span class="token comment">#为了获得home()函数返回值，可以将执行结果赋值给res然后返回print(home())结果是"from home"而不是"None"了</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"非合法用户"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@auth</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"welcome to home page"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"from home"</span>home<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span></code></pre><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">import</span> traceback<span class="token keyword">def</span> <span class="token function">decoratore</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前运行方法"</span><span class="token punctuation">,</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 这里应该调用log模块来记录到日志里</span>    <span class="token keyword">return</span> log<span class="token decorator annotation punctuation">@decoratore</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">''' 上面运行结果    当前运行方法 test    Traceback (most recent call last):      File "C:/Users/tom/Desktop/alipay_demo/aaa/t2.py", line 11, in log        return func(*args,`kwargs)      File "C:/Users/tom/Desktop/alipay_demo/aaa/t2.py", line 18, in test        int('a')    ValueError: invalid literal for int() with base 10: 'a'     22222    '''</span></code></pre><h2 id="redis缓存"><a href="#redis缓存" class="headerlink" title="redis缓存"></a>redis缓存</h2><pre class="language-python" data-language="python"><code class="language-python">第一步：查询redis缓存是否存在这个key第二步：如果存在这个key，不用去mysql中查询，直接从redis中取出数据即可（减轻了mysql压力）第三步：如果查询的key不存在，先到mysql中查询数据，让后设置到redis中，下次查询就有了</code></pre><p><strong>#1.5.3.1 2B青年实现</strong></p><ul><li>2B青年每一个需要使用缓存的数据，我都写一个方法获取数据，再写一个方法处理缓存。</li><li>若需要用到缓存的地方越来越多，每一个都需要这么写一套代码，代码冗余繁琐。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token keyword">import</span> time<span class="token comment"># 获取readed缓存</span><span class="token keyword">def</span> <span class="token function">get_readed_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 判断键是否存在</span>    key <span class="token operator">=</span> <span class="token string">'readed'</span>    <span class="token keyword">if</span> cache<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 不存在，则通过sql语句获取数据，并写入缓存,这里只是一个举例的sql语句</span>        data <span class="token operator">=</span> <span class="token string">"select name from tb"</span>        <span class="token comment"># 写入缓存</span>        cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">3600</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_readed_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_readed_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test1<span class="token punctuation">(</span><span class="token punctuation">)</span>    test2<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>#1.5.3.2 NB青年</strong></p><ul><li>NB青年可以使用三级装饰器，在装饰器中判断key如果存在就从reids中获取，如果不存在就从数据库查询，并设置到reids中</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment"># 获取redis缓存的装饰器</span><span class="token keyword">def</span> <span class="token function">redis_cache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__redis_cache</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">warpper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> `kw<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cache<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 判断缓存是否存在</span>                data <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 若不存在则执行获取数据的方法</span>                <span class="token comment"># 注意返回数据的类型(字符串，数字，字典，列表均可)</span>                data <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> `kw<span class="token punctuation">)</span>   <span class="token comment"># 从数据库查询到数据设置到redis中</span>                cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>            <span class="token keyword">return</span> data        <span class="token keyword">return</span> warpper    <span class="token keyword">return</span> __redis_cache<span class="token comment">#键值为test，超时时间为60秒</span><span class="token decorator annotation punctuation">@redis_cache</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_test_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取Blog模型随机排序前3条数据</span>    <span class="token comment"># (Blog模型是我自己的模型，具体代码根据自己需求获取数据)</span>    <span class="token comment"># values执行结果，将返回一个字典。字典可以直接存入redis</span>    <span class="token comment"># data = Blog.objects.values('id', 'caption').order_by('?')[:3]</span>    data <span class="token operator">=</span> <span class="token string">'从数据库查询到了数据'</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_test_data<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">世上无难事，只怕有心人</summary>
    
    
    
    <category term="python" scheme="https://wyx6.top/categories/python/"/>
    
    
    <category term="python基础" scheme="https://wyx6.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="装饰器" scheme="https://wyx6.top/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>django 微信扫码支付流程</title>
    <link href="https://wyx6.top/django%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/"/>
    <id>https://wyx6.top/django%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/</id>
    <published>2020-12-22T09:17:05.000Z</published>
    <updated>2021-02-21T11:33:15.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信扫码支付"><a href="#微信扫码支付" class="headerlink" title="微信扫码支付"></a>微信扫码支付</h1><p>大家先去看<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5&index=3">官方文档</a></p><p>或者看<a href="https://v3u.cn/a_id_182">教程</a></p><img src="https://img-blog.csdnimg.cn/20201228163627495.gif" alt="请添加图片描述" style="zoom:200%;"/ loading="lazy"><h2 id="支付接口！！！"><a href="#支付接口！！！" class="headerlink" title="支付接口！！！"></a>支付接口！！！</h2><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><h3 id="wx-pay-py"><a href="#wx-pay-py" class="headerlink" title="wx_pay.py"></a>wx_pay.py</h3><p><a href="https://blog.csdn.net/weixin_45954124/article/details/112294468">点击查看</a></p><p>我们在调用支付接口时就要生成一个订单信息</p><p>微信支付生成二维码</p><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>生成图片在项目文件下 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">class</span> <span class="token class-name">Wx</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="验证支付地址"><a href="#验证支付地址" class="headerlink" title="验证支付地址"></a>验证支付地址</h2><p>微信需要我们去验证一下是否完成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WxBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token string">"order_235117"</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'wx_pay/'</span><span class="token punctuation">,</span> Wx<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> WxBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre>]]></content>
    
    
    <summary type="html">不要人夸颜色好，只留清气满乾坤!</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django" scheme="https://wyx6.top/categories/python3/django/"/>
    
    <category term="支付" scheme="https://wyx6.top/categories/python3/django/%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="微信支付" scheme="https://wyx6.top/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>django 支付宝沙箱支付流程</title>
    <link href="https://wyx6.top/django%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/"/>
    <id>https://wyx6.top/django%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-12-22T09:17:05.000Z</published>
    <updated>2021-02-21T11:32:59.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>大家先去看<a href="https://opendocs.alipay.com/open/291/introduce">官方文档</a></p><p>或者看<a href="https://blog.csdn.net/weixin_45954124/article/details/109583431">我的教程</a></p><p><img src="https://img-blog.csdnimg.cn/20201228163628128.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="settings-py配置"><a href="#settings-py配置" class="headerlink" title="settings.py配置"></a>settings.py配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 支付宝配置</span><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment"># 回调地址</span>RETURN_URL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/pay/ali_back/'</span>app_private_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/app_private_key'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay_public_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/alipay_public'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    appid<span class="token operator">=</span><span class="token string">"2016102500759596"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 默认回调url</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span>  <span class="token comment"># RSA 或者 RSA2</span>    debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 默认False</span><span class="token punctuation">)</span></code></pre><h2 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><p>支付宝生成一个支付地址 跳转即可支付</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Ali</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span><span class="token string">"唯一不重复字符串"</span><span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span><span class="token string">"金额"</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AliBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ali_pay/'</span><span class="token punctuation">,</span> Ali<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> AliBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre>]]></content>
    
    
    <summary type="html">粉骨碎身浑不怕，要留清白在人间</summary>
    
    
    
    <category term="python3" scheme="https://wyx6.top/categories/python3/"/>
    
    <category term="django" scheme="https://wyx6.top/categories/python3/django/"/>
    
    <category term="支付" scheme="https://wyx6.top/categories/python3/django/%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="django" scheme="https://wyx6.top/tags/django/"/>
    
    <category term="沙箱支付" scheme="https://wyx6.top/tags/%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/"/>
    
    <category term="支付宝支付" scheme="https://wyx6.top/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
</feed>
