<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pandas进阶</title>
      <link href="pandas%E8%BF%9B%E9%98%B6/"/>
      <url>pandas%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="pandas俩个数据结构-Series-amp-DataFrame"><a href="#pandas俩个数据结构-Series-amp-DataFrame" class="headerlink" title="pandas俩个数据结构 Series &amp; DataFrame"></a>pandas俩个数据结构 Series &amp; DataFrame</h1><p><img src="https://img-blog.csdnimg.cn/2021032713502782.gif" alt="在这里插入图片描述" loading="lazy"></p><p>Series表示一维数据     DataFrame表示二维数据 pandas没有三维以上的数据结构</p><p><img src="https://img-blog.csdnimg.cn/20210327134753429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>下载</p><pre class="language-python" data-language="python"><code class="language-python">pip install jupyter</code></pre><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html">Series</a></h1><p><a href="https://pandas.pydata.org/Pandas-docs/stable/reference/api/Pandas.Series.html#Pandas.Series"><code>Series</code> (opens new window)</a>是带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。轴标签统称为<strong>索引</strong>。调用 <code>pd.Series</code> 函数即可创建 Series：</p><p>创建一个Series对象</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">,</span>              name<span class="token operator">=</span><span class="token string">'num'</span><span class="token punctuation">)</span>s<span class="token comment">#%%</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span>s<span class="token comment">#%%</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s</code></pre><p><img src="https://img-blog.csdnimg.cn/20210327135844998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/frame.html">DataFrame</a></h1><p>创建Dataframe对象</p><ol><li><strong>通过二维的list-like创建</strong></li><li><strong>通过字典创建</strong></li><li><strong>通过读取Excel表</strong></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 通过二维的列表</span>list_2d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list_2d<span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 可以设置他的columns（列索引）和index（行索引）</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list_2d<span class="token punctuation">,</span>                  columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 通过字典创建 指定x y为行索引</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df</code></pre><p><img src="https://img-blog.csdnimg.cn/2021032714053233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>通过读取Excel文件 <a href="https://gitee.com/heart-addiction/pandas/blob/master/A006_create_DataFrame/goods_base.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'goods_base.xlsx'</span><span class="token punctuation">,</span>                   index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'col_name'</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'index_name'</span>df</code></pre><p><img src="https://img-blog.csdnimg.cn/20210327141251228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="read-excel"><a href="#read-excel" class="headerlink" title="read_excel"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html">read_excel</a></h1><p><img src="https://img-blog.csdnimg.cn/20210327142326290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20210327142704961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="普通读取"><a href="#普通读取" class="headerlink" title="普通读取"></a>普通读取</h2><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/goods_base.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'goods_base.xlsx'</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210327145110950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20210327145059201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="sheet-name"><a href="#sheet-name" class="headerlink" title="sheet_name"></a>sheet_name</h2><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/sheet_name.xlsx">下载</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 读取所有</span>df_dict <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 返回一个DataFrame</span>df_dict<span class="token comment">#%%</span><span class="token comment"># 取出3月的</span>df_dict<span class="token punctuation">[</span><span class="token string">'3月'</span><span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210327210900850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  sheet_name</span><span class="token comment"># 指定下标 初始值 0</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定名字</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token string">'3月'</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 读取多个sheet 传入列表  返回一个DataFrame</span>df_dict <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'sheet_name.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'3月'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df_dict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#%%</span>df_dict<span class="token punctuation">[</span><span class="token string">'3月'</span><span class="token punctuation">]</span></code></pre><img src="https://img-blog.csdnimg.cn/20210327205852167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:250%;" / loading="lazy"><h2 id="header-amp-index-col"><a href="#header-amp-index-col" class="headerlink" title="header &amp; index_col"></a>header &amp; index_col</h2><p><a href="https://gitee.com/heart-addiction/pandas/blob/master/B001_read_excel/header.xlsx">下载</a></p><p><img src="https://img-blog.csdnimg.cn/20210327212115480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  header</span><span class="token comment"># 指定为空 默认会让第一行为索引</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 不指定第一行默认为索引</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 指定第一行为索引</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>              header<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210327212342506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 指定列索引（header） 和 行索引（index_col）</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'header.xlsx'</span><span class="token punctuation">,</span>              sheet_name<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>              header<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210327213024432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="usecols"><a href="#usecols" class="headerlink" title="usecols"></a>usecols</h2><p><img src="https://img-blog.csdnimg.cn/20210327213138293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><p><img src="https://img-blog.csdnimg.cn/20210327213855871.gif" alt="请添加图片描述" loading="lazy"></p><h3 id="int-list"><a href="#int-list" class="headerlink" title="int-list"></a>int-list</h3><p><img src="https://img-blog.csdnimg.cn/20210327213855472.gif" alt="请添加图片描述" loading="lazy"></p><h3 id="str-list"><a href="#str-list" class="headerlink" title="str-list"></a>str-list</h3><p><img src="https://img-blog.csdnimg.cn/20210327213855689.gif" alt="请添加图片描述" loading="lazy"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="https://img-blog.csdnimg.cn/20210327213855927.gif" alt="请添加图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 数据分析 </category>
          
          <category> pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析-初识pandas</title>
      <link href="pandas%E5%85%A5%E9%97%A8/"/>
      <url>pandas%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：为什么用python做数据分析"><a href="#前言：为什么用python做数据分析" class="headerlink" title="前言：为什么用python做数据分析"></a>前言：为什么用python做数据分析</h1><h2 id="1-Python数据分析的理由"><a href="#1-Python数据分析的理由" class="headerlink" title="1. Python数据分析的理由"></a>1. Python数据分析的理由</h2><p>对于数据分析师从业者而言，经常需要从事：数据库操作、报告撰写、数据可视化、数据挖掘的工作。这些工作不写代码也可以操作，利用 Excel 进行数据可视化、使用 SPSS 等一些亲民类平台工具进行数据挖掘，在《<a href="http://c.biancheng.net/view/8265.html?1596707552">数据分析是什么？</a>》中我们介绍了使用平台工具虽然可造作性强，但是不可避免的会存在重复机械的劳动，从而降低自己的工作效率，但如果你会用 Python 编写代码，操作的自由度更高，发展的潜力更大。</p><h4 id="1-Python强大的第三方库"><a href="#1-Python强大的第三方库" class="headerlink" title="1) Python强大的第三方库"></a>1) Python强大的第三方库</h4><p>Python 语言拥有简洁易读的特性，它是个生态完善且开源软件包很多的高级动态编程语言。在数据分析过程中，可以通过调用不同的包来完成相应的工作，比如上述介绍的 Numpy、SciPy 和 Matplotlib以及 pandas，这些模块分别承担着数据分析工作不同的任务。就拿 Numpy 来说吧，Numpy （Numerical Python）的简称，是 Python 科学计算的基础包。功能主要如下：</p><ul><li>快速高效的多维数组对象 ndarray。</li><li>线性代数运算、傅里叶变换，以及随机数生成。</li><li>用于将 C、C++、Fortran（公式翻译语言）代码集成到 Python 的工具。</li><li>用于对数组执行元素级计算以及直接对数组执行数学运算的函数。</li></ul><p>Numpy 除了为 Python 提供快速的数组处理能力，它的另外一个主要作用是作为在算法之间传递数据的容器。对于数值型数据，NumPy 数组在存储和处理数据时要比内置的 Python 数据结构高效得多，在后续章节中我们对 Numpy 进行详细介绍。</p><h4 id="2-分析过程可控复用性强"><a href="#2-分析过程可控复用性强" class="headerlink" title="2) 分析过程可控复用性强"></a>2) 分析过程可控复用性强</h4><p>当我们使用 Python 做数据分析时，可以将分析的过程保存下来，从而实现对分析过程的追溯，最后当一个数据分析的任务完成后，我们可以代码以脚本的形式保存下来，以实现后续复用的目的，从而提升你的工作效率。</p><p><img src="http://c.biancheng.net/uploads/allimg/200807/9-200PG1251K40.png" alt="Python数据分析" loading="lazy"><br>图1：Python人生新路标</p><h4 id="3-Python语言功能完善"><a href="#3-Python语言功能完善" class="headerlink" title="3) Python语言功能完善"></a>3) Python语言功能完善</h4><p>Python 不仅在数据分析方面有很突出的表现能力，还在网络爬虫、Web 站点开发、游戏开发、自动化运维等众多领域都有很广泛的应用。这对于软件公司来说无疑是一件锦上添花的事情，让使用一种语言完成全部服务成为可能。</p><p>我们可以用 Python 的爬虫框架 Scrapy 来爬取数据，然后交给 pandas 做数据清洗处理，最后使用Python 的 Django 框架搭建 Web 站点将结果展示出来，你会发现在这一过程中，我们仅靠 Python 语言的框架实现了全部需求。所有的开发人员使用同一种编程工具将会给企业带来非常显著的效益。</p><h4 id="4-Python作为胶水语言"><a href="#4-Python作为胶水语言" class="headerlink" title="4) Python作为胶水语言"></a>4) Python作为胶水语言</h4><p>Python 是一种“胶水语言”，顾名思义就是“粘合”的意思 ，Python 在设计初期就面向科研人员，以降低编程难度，提高编程效率为目的。Python 之所以在科学计算领域能够功成名就，这和它能够轻松地集成 C、C++以及 Fortran 代码有不可分割原因。大部分现代计算环境都利用了 Fortran 和 C库来实现线性代数、积分、傅里叶变换等诸多算法。</p><h4 id="5-Python与AI紧密相连"><a href="#5-Python与AI紧密相连" class="headerlink" title="5) Python与AI紧密相连"></a>5) Python与AI紧密相连</h4><p>你可能感觉 人工智能是很神秘的事物，其实它离一个数据分析师并不遥远。现在大部分深度学习框架都优先选择支持 Python 语言，比如当下火热的谷歌深度学习框架Tensorflow，它虽然是C++编写的，但对 Python 语言支持是最好。</p><p><img src="http://c.biancheng.net/uploads/allimg/200807/9-200PG12340Z3.png" alt="img" loading="lazy"><br>图2：Python与人工智能</p><p>Tensorflow 的数据类型与 numpy 的数据类型是等价的，这是因为 Tensorflow 在设计的时候就是参考了 numpy 的数据类型，目的就是使其成为 Python 科学计算系列库的重要部分。所以使用 Python 做数据分析，对于和 AI 人工智能接轨有很好的帮助。这无疑将拓宽你的视野与道路，增加自身的软实力。</p><h1 id="Pandas-概览"><a href="#Pandas-概览" class="headerlink" title="Pandas 概览"></a><a href="https://www.pypandas.cn/docs/getting_started/overview.html#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">Pandas 概览</a></h1><p><strong>Pandas</strong> 是 <a href="https://www.python.org/">Python (opens new window)</a>的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为<strong>最强大、最灵活、可以支持任何语言的开源数据分析工具</strong>。经过多年不懈的努力，Pandas 离这个目标已经越来越近了。</p><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series">Series (opens new window)</a>（一维数据）与 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame (opens new window)</a>（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 用户，DataFrame 提供了比 R 语言 data.frame 更丰富的功能。Pandas 基于 <a href="https://www.numpy.org/">NumPy (opens new window)</a>开发，可以与其它第三方科学计算支持库完美集成。</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 <code>NaN</code>；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松</strong>地转换为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片</strong>、<strong>花式索引</strong>、<strong>子集分解</strong>等操作；</li><li>直观地<strong>合并（merge）</strong>、<strong>连接（join）</strong>数据集；</li><li>灵活地<strong>重塑（reshape）</strong>、<strong>透视（pivot）</strong>数据集；</li><li><strong>轴</strong>支持结构化标签：一个刻度支持多个标签；</li><li>成熟的 IO 工具：读取<strong>文本文件</strong>（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，利用超快的 <strong>HDF5</strong> 格式保存 / 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>这些功能主要是为了解决其它编程语言、科研环境的痛点。处理数据一般分为几个阶段：数据整理与清洗、数据分析与建模、数据可视化与制表，Pandas 是处理数据的理想工具。</p><p>其它说明：</p><ul><li>Pandas 速度<strong>很快</strong>。Pandas 的很多底层算法都用 <a href="https://cython.org/">Cython (opens new window)</a>优化过。然而，为了保持通用性，必然要牺牲一些性能，如果专注某一功能，完全可以开发出比 Pandas 更快的专用工具。</li><li>Pandas 是 <a href="https://www.statsmodels.org/stable/index.html">statsmodels (opens new window)</a>的依赖项，因此，Pandas 也是 Python 中统计计算生态系统的重要组成部分。</li><li>Pandas 已广泛应用于金融领域。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><table><thead><tr><th>维数</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>Series</td><td>带标签的一维同构数组</td></tr><tr><td>2</td><td>DataFrame</td><td>带标签的，大小可变的，二维异构表格</td></tr></tbody></table><h2 id="为什么有多个数据结构？"><a href="#为什么有多个数据结构？" class="headerlink" title="为什么有多个数据结构？"></a>为什么有多个数据结构？</h2><p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p><p>此外，通用 API 函数的默认操作要顾及时间序列与截面数据集的方向。多维数组存储二维或三维数据时，编写函数要注意数据集的方向，这对用户来说是一种负担；如果不考虑 C 或 Fortran 中连续性对性能的影响，一般情况下，不同的轴在程序里其实没有什么区别。Pandas 里，轴的概念主要是为了给数据赋予更直观的语义，即用“更恰当”的方式表示数据集的方向。这样做可以让用户编写数据转换函数时，少费点脑子。</p><p>处理 DataFrame 等表格数据时，<strong>index</strong>（行）或 <strong>columns</strong>（列）比 <strong>axis 0</strong> 和 <strong>axis 1</strong> 更直观。用这种方式迭代 DataFrame 的列，代码更易读易懂：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> col <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>    series <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span>    <span class="token comment"># do something with series</span></code></pre><h2 id="大小可变与数据复制"><a href="#大小可变与数据复制" class="headerlink" title="大小可变与数据复制"></a>大小可变与数据复制</h2><p>Pandas 所有数据结构的值都是可变的，但数据结构的大小并非都是可变的，比如，Series 的长度不可改变，但 DataFrame 里就可以插入列。</p><p>Pandas 里，绝大多数方法都不改变原始的输入数据，而是复制数据，生成新的对象。 一般来说，原始输入数据<strong>不变</strong>更稳妥。</p><h1 id="pandas是什么"><a href="#pandas是什么" class="headerlink" title="pandas是什么"></a>pandas是什么</h1><p>pandas是⼀个开源的、BSD许可的库 为Python编程语⾔提供<code>⾼性能、易于使⽤</code>的数据结构和数据分析⼯具</p><p>列表：使用方便、效率不高</p><p>numpy：存储单一（数值类型）、大大提高效率</p><p>pandas：构建在numpy之上，继承了numpy效率高的优点、自己易于使用的优点（行索引 列索引）</p><p><img src="https://img-blog.csdnimg.cn/20210322211610522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>list ：不连续的</p><p>pandas：内存地址是连续的</p><p><img src="https://img-blog.csdnimg.cn/20210322211649435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="易用"><a href="#易用" class="headerlink" title="易用"></a>易用</h2><p>numpy：二维数组只有数字索引</p><p><img src="https://img-blog.csdnimg.cn/2021032713382850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>pandas：二维数据 还有标签索引支持行列索引</p><p><img src="https://img-blog.csdnimg.cn/20210322211758723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/2021032712404842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="pandas常用方法（点击下载pdf）"><a href="#pandas常用方法（点击下载pdf）" class="headerlink" title="pandas常用方法（点击下载pdf）"></a><a href="https://gitee.com/heart-addiction/pandas/blob/master/A001_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/A001_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B_1.pdf">pandas常用方法（点击下载pdf）</a></h1><p><img src="https://img-blog.csdnimg.cn/20210327132910533.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="pandas-append"><a href="#pandas-append" class="headerlink" title="pandas.append()"></a>pandas.append()</h2><p>上下拼接多个表格</p><p><img src="https://img-blog.csdnimg.cn/2021032713290766.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="pandas-join"><a href="#pandas-join" class="headerlink" title="pandas.join()"></a>pandas.join()</h2><p>左右拼接俩个表格</p><p><img src="https://img-blog.csdnimg.cn/20210327132906806.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="pandas-concat"><a href="#pandas-concat" class="headerlink" title="pandas.concat()"></a>pandas.concat()</h2><p>设置上下（axis=0）或左右（axis=1）拼接多个表格</p><p><img src="https://img-blog.csdnimg.cn/20210327132906184.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="pandas-merge"><a href="#pandas-merge" class="headerlink" title="pandas.merge()"></a>pandas.merge()</h2><p>依照俩个表格相同的元素把俩个表格连接在一起</p><p><img src="https://img-blog.csdnimg.cn/20210327132912870.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="pandas-pivot-table"><a href="#pandas-pivot-table" class="headerlink" title="pandas.pivot_table()"></a>pandas.pivot_table()</h2><p>相当于excel中的透视操作</p><p><img src="https://img-blog.csdnimg.cn/20210327132917298.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="俩种窗口操作"><a href="#俩种窗口操作" class="headerlink" title="俩种窗口操作"></a>俩种窗口操作</h2><p><img src="https://img-blog.csdnimg.cn/2021032713290997.gif" alt="请添加图片描述" loading="lazy"></p><p>第一种是固定窗口滚动操作</p><h3 id="rolling"><a href="#rolling" class="headerlink" title="rolling( )"></a>rolling( )</h3><p><img src="https://img-blog.csdnimg.cn/20210327132904534.gif" alt="请添加图片描述" loading="lazy"></p><p>第二种是扩展窗口操作</p><h3 id="expanding"><a href="#expanding" class="headerlink" title="expanding( )"></a>expanding( )</h3><p><img src="https://img-blog.csdnimg.cn/20210327132906112.gif" alt="请添加图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 数据分析 </category>
          
          <category> pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> pandas </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django八大核心功能-认证 权限 限流 序列化(ModelSerializer) 分页 版本 过滤 排序</title>
      <link href="Django%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/"/>
      <url>Django%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    最近面试有面试官问drf框架的功能，那我们就将这八大核心功能复现一下，回忆回忆。</p><h1 id="DRF框架"><a href="#DRF框架" class="headerlink" title="DRF框架"></a>DRF框架</h1><h3 id="1-DRF框架的-8-个核心功能"><a href="#1-DRF框架的-8-个核心功能" class="headerlink" title="1.DRF框架的 8 个核心功能"></a>1.DRF框架的 8 个核心功能</h3><ul><li>认证  （用户登录校验用户名密码或者token是否合法）</li><li>权限     (根据不同的用户角色，可以操作不同的表)</li><li>限流  （限制接口访问速度）</li><li>序列化  （返回json）</li><li>分页  （把数据分成一页一页）</li><li>版本  （接口版本号，用 v1/v2/v3）</li><li>过滤  （筛选所需要的数据）</li><li>排序  （对数据进行排序）</li></ul><h3 id="2-相关包"><a href="#2-相关包" class="headerlink" title="2.相关包"></a>2.相关包</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.序列化相关'''</span>serializerModelSerializer<span class="token triple-quoted-string string">'''2.DRF视图函数继承'''</span>APIView  （继承View）ModelViewSet （继承APIView<span class="token punctuation">(</span>mixins<span class="token punctuation">)</span>）</code></pre><h2 id="1-1-安装DjangoRestFramework及所对应版本"><a href="#1-1-安装DjangoRestFramework及所对应版本" class="headerlink" title="1.1 安装DjangoRestFramework及所对应版本"></a>1.1 安装DjangoRestFramework及所对应版本</h2><pre class="language-python" data-language="python"><code class="language-python">pip install djangorestframework<span class="token operator">==</span><span class="token number">3.11</span><span class="token number">.1</span>pip install django<span class="token operator">-</span><span class="token builtin">filter</span><span class="token operator">==</span><span class="token number">2.3</span><span class="token number">.0</span> <span class="token comment"># 过滤器</span>pip install markdown  <span class="token comment"># Markdown support for the browsable API.</span></code></pre><h2 id="1-2-在-项目-settings-py中注册并设置所有都可以访问"><a href="#1-2-在-项目-settings-py中注册并设置所有都可以访问" class="headerlink" title="1.2 在 项目/settings.py中注册并设置所有都可以访问"></a>1.2 在 项目/settings.py中注册并设置所有都可以访问</h2><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'django_filters'</span><span class="token punctuation">,</span><span class="token punctuation">]</span>ALLOWED_HOSTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span></code></pre><h2 id="1-3-项目-settings-py配置DRF：-全局配置"><a href="#1-3-项目-settings-py配置DRF：-全局配置" class="headerlink" title="1.3  项目/settings.py配置DRF： 全局配置"></a>1.3  项目/settings.py配置DRF： 全局配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 过滤器</span><span class="token comment"># 1,安装 django-filter</span><span class="token comment"># 2,注册应用</span><span class="token comment"># 3,配置settings, 在view里配置可过滤的字段</span><span class="token comment"># 4,使用 查询字符串携带过滤信息</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 文档报错： AttributeError: ‘AutoSchema’ object has no attribute ‘get_link’</span>    <span class="token comment"># 用下面的设置可以解决</span>    <span class="token string">'DEFAULT_SCHEMA_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.schemas.AutoSchema'</span><span class="token punctuation">,</span>    <span class="token comment"># 默认设置是:</span>    <span class="token comment"># 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',</span>    <span class="token comment"># 异常处理器</span>    <span class="token comment"># 'EXCEPTION_HANDLER': 'user.utils.exception_handler',</span>    <span class="token comment"># Base API policies</span>    <span class="token string">'DEFAULT_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.renderers.BrowsableAPIRenderer'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_PARSER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.parsers.JSONParser'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.parsers.FormParser'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.parsers.MultiPartParser'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 1.认证器（全局）：用户登录校验用户名密码或者token是否合法</span>    <span class="token string">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment"># 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 在 DRF中配置JWT认证</span>        <span class="token comment"># 'rest_framework.authentication.SessionAuthentication', # 使用session时的认证器</span>        <span class="token comment"># 'rest_framework.authentication.BasicAuthentication' # 提交表单时的认证器</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 2.权限配置（全局）： 顺序靠上的严格（根据不同的用户角色，可以操作不同的表）</span>    <span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment"># 'rest_framework.permissions.IsAdminUser', # 管理员可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticated', # 认证用户可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticatedOrReadOnly', # 认证用户可以访问, 否则只能读取</span>        <span class="token comment"># 'rest_framework.permissions.AllowAny', # 所有用户都可以访问</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 3.限流（防爬虫）</span>    <span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.throttling.UserRateThrottle'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 3.1限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'10000/hour'</span><span class="token punctuation">,</span>  <span class="token comment"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3000/day'</span><span class="token punctuation">,</span>  <span class="token comment"># 未认证用户每天能访问3次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_CONTENT_NEGOTIATION_CLASS'</span><span class="token punctuation">:</span>        <span class="token string">'rest_framework.negotiation.DefaultContentNegotiation'</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_METADATA_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.metadata.SimpleMetadata'</span><span class="token punctuation">,</span>    <span class="token string">'DEFAULT_VERSIONING_CLASS'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># 4.分页（全局）：全局分页器, 例如 省市区的数据自定义分页器, 不需要分页</span>    <span class="token string">'DEFAULT_PAGINATION_CLASS'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.pagination.PageNumberPagination'</span><span class="token punctuation">,</span>    <span class="token comment"># 每页返回数量</span>    <span class="token string">'PAGE_SIZE'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment"># 默认 None</span>    <span class="token comment"># 5.过滤器后端</span>    <span class="token string">'DEFAULT_FILTER_BACKENDS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'django_filters.rest_framework.DjangoFilterBackend'</span><span class="token punctuation">,</span>        <span class="token comment"># 'django_filters.rest_framework.backends.DjangoFilterBackend', 包路径有变化</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 5.1过滤排序（全局）：Filtering 过滤排序</span>    <span class="token string">'SEARCH_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'search'</span><span class="token punctuation">,</span>    <span class="token string">'ORDERING_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'ordering'</span><span class="token punctuation">,</span>    <span class="token string">'NUM_PROXIES'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># 6.版本控制：Versioning 接口版本控制</span>    <span class="token string">'DEFAULT_VERSION'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token string">'ALLOWED_VERSIONS'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token string">'VERSION_PARAM'</span><span class="token punctuation">:</span> <span class="token string">'version'</span><span class="token punctuation">,</span>    <span class="token comment"># Authentication 认证</span>    <span class="token comment"># 未认证用户使用的用户类型</span>    <span class="token string">'UNAUTHENTICATED_USER'</span><span class="token punctuation">:</span> <span class="token string">'django.contrib.auth.models.AnonymousUser'</span><span class="token punctuation">,</span>    <span class="token comment"># 未认证用户使用的Token值</span>    <span class="token string">'UNAUTHENTICATED_TOKEN'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># View configuration</span>    <span class="token string">'VIEW_NAME_FUNCTION'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.views.get_view_name'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW_DESCRIPTION_FUNCTION'</span><span class="token punctuation">:</span> <span class="token string">'rest_framework.views.get_view_description'</span><span class="token punctuation">,</span>    <span class="token string">'NON_FIELD_ERRORS_KEY'</span><span class="token punctuation">:</span> <span class="token string">'non_field_errors'</span><span class="token punctuation">,</span>    <span class="token comment"># Testing</span>    <span class="token string">'TEST_REQUEST_RENDERER_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.renderers.MultiPartRenderer'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.renderers.JSONRenderer'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'TEST_REQUEST_DEFAULT_FORMAT'</span><span class="token punctuation">:</span> <span class="token string">'multipart'</span><span class="token punctuation">,</span>    <span class="token comment"># Hyperlink settings</span>    <span class="token string">'URL_FORMAT_OVERRIDE'</span><span class="token punctuation">:</span> <span class="token string">'format'</span><span class="token punctuation">,</span>    <span class="token string">'FORMAT_SUFFIX_KWARG'</span><span class="token punctuation">:</span> <span class="token string">'format'</span><span class="token punctuation">,</span>    <span class="token string">'URL_FIELD_NAME'</span><span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span>    <span class="token comment"># Encoding</span>    <span class="token string">'UNICODE_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'COMPACT_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'STRICT_JSON'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'COERCE_DECIMAL_TO_STRING'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'UPLOADED_FILES_USE_URL'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment"># Browseable API</span>    <span class="token string">'HTML_SELECT_CUTOFF'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token string">'HTML_SELECT_CUTOFF_TEXT'</span><span class="token punctuation">:</span> <span class="token string">"More than &#123;count&#125; items..."</span><span class="token punctuation">,</span>    <span class="token comment"># Schemas</span>    <span class="token string">'SCHEMA_COERCE_PATH_PK'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'SCHEMA_COERCE_METHOD_NAMES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'retrieve'</span><span class="token punctuation">:</span> <span class="token string">'read'</span><span class="token punctuation">,</span>        <span class="token string">'destroy'</span><span class="token punctuation">:</span> <span class="token string">'delete'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h1 id="2-DRF-认证、权限、限流、分页、过滤、序列化"><a href="#2-DRF-认证、权限、限流、分页、过滤、序列化" class="headerlink" title="2.DRF 认证、权限、限流、分页、过滤、序列化"></a>2.DRF 认证、权限、限流、分页、过滤、序列化</h1><h2 id="2-1-app下-urls-py配置路由"><a href="#2-1-app下-urls-py配置路由" class="headerlink" title="2.1  app下/urls.py配置路由"></a>2.1  app下/urls.py配置路由</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span> DefaultRouter<span class="token comment"># 自动生成路由方法, 必须使用视图集</span><span class="token comment"># router = SimpleRouter() # 没有根路由 /user/ 无法识别</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1.有根路由</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r'user'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UserViewSet<span class="token punctuation">)</span>  <span class="token comment"># 2.配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'index/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'api-auth/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'rest_framework.urls'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'rest_framework'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># 认证地址,</span><span class="token punctuation">]</span>urlpatterns <span class="token operator">+=</span> router<span class="token punctuation">.</span>urls  <span class="token comment"># 3.模块地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlpatterns<span class="token punctuation">)</span></code></pre><h2 id="2-2-app下-创建serializers-py序列化"><a href="#2-2-app下-创建serializers-py序列化" class="headerlink" title="2.2 app下/创建serializers.py序列化"></a>2.2 app下/创建serializers.py序列化</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">def</span> <span class="token function">address_validate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment"># data：是用户提交的地址这个字段的数据（河南省 郑州市）</span>    <span class="token comment"># 独立校验器</span>    <span class="token comment"># raise serializers.ValidationError('请填写实际地址') # 有错就抛出异常</span>    <span class="token comment"># 没错就返回数据</span>    <span class="token keyword">return</span> data<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1.独立校验器：重新设定字段, 替换掉模型中的设定, 重新设定地址的长度为5</span>    <span class="token comment"># address_validate是自定义的数据校验函数</span>    address <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> validators<span class="token operator">=</span>    <span class="token punctuation">[</span>address_validate<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 2.单一字段验证（validate_字段名）, 验证地址</span>    <span class="token keyword">def</span> <span class="token function">validate_address</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'测试'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'请填写实际地址'</span><span class="token punctuation">)</span>  <span class="token comment"># 有错就抛出异常</span>        <span class="token keyword">return</span> data  <span class="token comment"># 没错就返回结果</span>    <span class="token keyword">def</span> <span class="token function">validate_phone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 不符合手机号格式</span>        <span class="token comment"># raise serializers.ValidationError('手机号格式不正确')</span>        model <span class="token operator">=</span> self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>Meta<span class="token punctuation">.</span>model        num <span class="token operator">=</span> model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>phone<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'手机号已存在'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data    <span class="token comment"># 3.所有属性验证器</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># attrs：&#123;"username":"zhangsan", "phone":"18538752511", ....&#125;</span>        <span class="token comment"># 所有属性验证器</span>        <span class="token comment"># self.context 中有request和view上下文</span>        <span class="token comment"># self.context['view'].action 可以取到动作</span>        <span class="token comment"># attrs 是需要序列化的数据</span>        <span class="token comment"># raise serializers.ValidationError('xxx错误') # 有问题报错</span>        <span class="token keyword">return</span> attrs  <span class="token comment"># 没问题返回数据</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        <span class="token comment"># fields = ('id', ) # 临时添加字段也需要写在这里</span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment"># 所有字段</span>        <span class="token comment"># exclude = ['id'] # 排除 id 字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 指定字段为 read_only,</span>        <span class="token comment"># 扩展address： extra_kwargs = &#123;&#125; # 局部替换某些字段的设定, 或者新增设定</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"min_length"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 给地址增加 最小长度限制</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token string">'默认测试地址'</span><span class="token punctuation">,</span>  <span class="token comment"># 增加默认值</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UserUnActiveSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># 临时添加字段也需要写在这里</span>        <span class="token comment"># fields = '__all__' # 所有字段</span></code></pre><h3 id="2-3-app下-views-py"><a href="#2-3-app下-views-py" class="headerlink" title="2.3 app下/views.py"></a>2.3 app下/views.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BasicAuthentication<span class="token punctuation">,</span> SessionAuthentication<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> action<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>filters <span class="token keyword">import</span> OrderingFilter<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token punctuation">,</span> IsAdminUser<span class="token punctuation">,</span> IsAuthenticated<span class="token punctuation">,</span> IsAuthenticatedOrReadOnly<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>pagination <span class="token keyword">import</span> PageNumberPagination<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> BasePermission<span class="token punctuation">,</span> SAFE_METHODS<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer<span class="token punctuation">,</span> UserUnActiveSerializer<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 需要认证才能访问的视图</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment"># 分页（局部）：自定义分页器 局部</span><span class="token keyword">class</span> <span class="token class-name">PageNum</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 查询字符串中代表每页返回数据数量的参数名, 默认值: None</span>    page_size_query_param <span class="token operator">=</span> <span class="token string">'page_size'</span>    <span class="token comment"># 查询字符串中代表页码的参数名, 有默认值: page</span>    <span class="token comment"># page_query_param = 'page'</span>    <span class="token comment"># 一页中最多的结果条数</span>    max_page_size <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment"># 自定义权限（局部）</span><span class="token keyword">class</span> <span class="token class-name">MyPermission</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># has_permission 是用户对这个视图有没有 GET POST PUT PATCH DELETE 权限的分别判断</span>    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_perm'</span><span class="token punctuation">)</span>        <span class="token comment"># print(view.kwargs.get("pk"), request.user.id)</span>        <span class="token triple-quoted-string string">"""判断用户对模型有没有访问权"""</span>        <span class="token comment"># 任何用户对使用此权限类的视图都有访问权限</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>            <span class="token comment"># 管理员对用户模型有访问权</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">elif</span> view<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 携带的id和用户的id相同时有访问权</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment"># has_object_permission 是用户过了 has_permission 判断有权限以后，再判断这个用户有没有对一个具体的对象有没有操作权限</span>        <span class="token comment"># 这样设置以后，即使是django admin管理员也只能查询自己user标的信息，不能查询其他用户的单条信息</span>    <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_object_perm'</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">"""获取单个数据时,判断用户对某个数据对象是否有访问权限"""</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer  <span class="token comment"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment"># # 1.认证：自定义认证类, 自定义会覆盖全局配置</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>BasicAuthentication<span class="token punctuation">,</span> SessionAuthentication<span class="token punctuation">)</span>    <span class="token comment"># # 2.权限：自定义权限类</span>    <span class="token comment"># permission_classes = (MyPermission,)</span>    <span class="token comment"># 3.分页：自定义分页器 覆盖全局配置</span>    <span class="token comment"># pagination_class = PageNum</span>    <span class="token comment"># # 4.限流：自定义限流类</span>    <span class="token comment"># throttle_classes = [UserRateThrottle]</span>    <span class="token comment"># # 5.过滤：指定过滤方法类, 排序方法类, 一个或多个</span>    <span class="token comment"># filter_backends = (DjangoFilterBackend, OrderingFilter)  # 同时支持过滤和排序</span>    <span class="token comment"># # 5.1指定排序字段, 不设置, 排序功能不起效</span>    <span class="token comment"># ordering_fields = ('date_joined', 'id')  # ?ordering=-id</span>    <span class="token comment"># # 5.2指定过滤字段, 不设置, 过滤功能不起效</span>    <span class="token comment"># filter_fields = ('username', 'phone', 'is_active')  # ?username = tom &amp; phone = &amp; is_active = true</span>    <span class="token comment"># 根据不同的请求, 获得不同的序列化器</span>    <span class="token comment"># def get_serializer_class(self):</span>    <span class="token comment">#     if self.action == 'unactived':</span>    <span class="token comment">#         return UserUnActiveSerializer</span>    <span class="token comment">#     else:</span>    <span class="token comment">#         return UserSerializer</span>    <span class="token comment">#</span>    <span class="token comment"># @action(methods=['get'], detail=False)</span>    <span class="token comment"># def unactived(self, request, *args, **kwargs):</span>    <span class="token comment">#     # 获取查询集, 过滤出未激活的用户</span>    <span class="token comment">#     qs = self.queryset.filter(is_active=False)</span>    <span class="token comment">#     # 使用序列化器, 序列化查询集, 并且是</span>    <span class="token comment">#     ser = self.get_serializer(qs, many=True)</span>    <span class="token comment">#     return Response(ser.data)</span>    <span class="token comment">#</span>    <span class="token comment"># @action(methods=['get'], detail=False)</span>    <span class="token comment"># def actived(self, request, *args, **kwargs):</span>    <span class="token comment">#     # 获取查询集, 过滤出未激活的用户</span>    <span class="token comment">#     qs = self.queryset.filter(is_active=True)</span>    <span class="token comment">#     # 使用序列化器, 序列化查询集, 并且是</span>    <span class="token comment">#     ser = self.get_serializer(qs, many=True)</span>    <span class="token comment">#     return Response(ser.data)</span></code></pre><h2 id="3-0-测试接口"><a href="#3-0-测试接口" class="headerlink" title="3.0 测试接口"></a>3.0 测试接口</h2><h3 id="3-1-查询接口-浏览器下或者测试工具下"><a href="#3-1-查询接口-浏览器下或者测试工具下" class="headerlink" title="3.1 查询接口   浏览器下或者测试工具下"></a>3.1 查询接口   浏览器下或者测试工具下</h3><pre class="language-none"><code class="language-none">#1.查询所有用户http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200007507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#2.查询id&#x3D;1的用户http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;1&#x2F;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200022859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#3.查询 用户名（tom），激活的用户http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;?username&#x3D;tom&amp;phone&#x3D;&amp;is_active&#x3D;true</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200101417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#4.查询所有用户 用id 反向排序http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;?ordering&#x3D;-id</code></pre><p><img src="https://img-blog.csdnimg.cn/2020102720013172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">#5.查询用户表中第一页，每页显示一条数据http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;user&#x2F;user&#x2F;?page&#x3D;1&amp;page_size&#x3D;1</code></pre><p><img src="https://img-blog.csdnimg.cn/20201027200144444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="3-2-权限认证"><a href="#3-2-权限认证" class="headerlink" title="3.2  权限认证"></a>3.2  权限认证</h3><h5 id="全局权限"><a href="#全局权限" class="headerlink" title="全局权限"></a>全局权限</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">'DEFAULT_PERMISSION_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment"># 'rest_framework.permissions.IsAdminUser', # 管理员可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticated', # 认证用户可以访问</span>        <span class="token comment"># 'rest_framework.permissions.IsAuthenticatedOrReadOnly', # 认证用户可以访问, 否则只能读取</span>        <span class="token comment"># 'rest_framework.permissions.AllowAny', # 所有用户都可以访问</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h5 id="自定义权限-需要登录才能操作"><a href="#自定义权限-需要登录才能操作" class="headerlink" title="自定义权限  需要登录才能操作"></a>自定义权限  需要登录才能操作</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyPermission</span><span class="token punctuation">(</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># has_permission 是用户对这个视图有没有 GET POST PUT PATCH DELETE 权限的分别判断</span><span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_perm'</span><span class="token punctuation">)</span>    <span class="token comment"># print(view.kwargs.get("pk"), request.user.id)</span>    <span class="token triple-quoted-string string">"""判断用户对模型有没有访问权"""</span>    <span class="token comment"># 任何用户对使用此权限类的视图都有访问权限</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>is_superuser<span class="token punctuation">:</span>        <span class="token comment"># 管理员对用户模型有访问权</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">elif</span> view<span class="token punctuation">.</span>kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 携带的id和用户的id相同时有访问权</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># has_object_permission 是用户过了 has_permission 判断有权限以后，再判断这个用户有没有对一个具体的对象有没有操作权限</span>    <span class="token comment"># 这样设置以后，即使是django admin管理员也只能查询自己user标的信息，不能查询其他用户的单条信息</span><span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'has_object_perm'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""获取单个数据时,判断用户对某个数据对象是否有访问权限"""</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="3-3-限流"><a href="#3-3-限流" class="headerlink" title="3.3 限流"></a>3.3 限流</h3><h5 id="settings中配置限流"><a href="#settings中配置限流" class="headerlink" title="settings中配置限流"></a>settings中配置限流</h5><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 3.1限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'10000/hour'</span><span class="token punctuation">,</span>  <span class="token comment"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3000/day'</span><span class="token punctuation">,</span>  <span class="token comment"># 未认证用户每天能访问3次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><h3 id="3-4-序列化"><a href="#3-4-序列化" class="headerlink" title="3.4 序列化"></a>3.4 序列化</h3><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">def</span> <span class="token function">address_validate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment"># data：是用户提交的地址这个字段的数据（河南省 郑州市）</span>    <span class="token comment"># 独立校验器</span>    <span class="token comment"># raise serializers.ValidationError('请填写实际地址') # 有错就抛出异常</span>    <span class="token comment"># 没错就返回数据</span>    <span class="token keyword">return</span> data<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1.独立校验器：重新设定字段, 替换掉模型中的设定, 重新设定地址的长度为5</span>    <span class="token comment"># address_validate是自定义的数据校验函数</span>    address <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> validators<span class="token operator">=</span>    <span class="token punctuation">[</span>address_validate<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 2.单一字段验证（validate_字段名）, 验证地址</span>    <span class="token keyword">def</span> <span class="token function">validate_address</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'测试'</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'请填写实际地址'</span><span class="token punctuation">)</span>  <span class="token comment"># 有错就抛出异常</span>        <span class="token keyword">return</span> data  <span class="token comment"># 没错就返回结果</span>    <span class="token keyword">def</span> <span class="token function">validate_phone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 不符合手机号格式</span>        <span class="token comment"># raise serializers.ValidationError('手机号格式不正确')</span>        model <span class="token operator">=</span> self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>Meta<span class="token punctuation">.</span>model        num <span class="token operator">=</span> model<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>phone<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">'手机号已存在'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data    <span class="token comment"># 3.所有属性验证器</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># attrs：&#123;"username":"zhangsan", "phone":"18538752511", ....&#125;</span>        <span class="token comment"># 所有属性验证器</span>        <span class="token comment"># self.context 中有request和view上下文</span>        <span class="token comment"># self.context['view'].action 可以取到动作</span>        <span class="token comment"># attrs 是需要序列化的数据</span>        <span class="token comment"># raise serializers.ValidationError('xxx错误') # 有问题报错</span>        <span class="token keyword">return</span> attrs  <span class="token comment"># 没问题返回数据</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        <span class="token comment"># fields = ('id', ) # 临时添加字段也需要写在这里</span>        fields <span class="token operator">=</span> <span class="token string">'__all__'</span>  <span class="token comment"># 所有字段</span>        <span class="token comment"># exclude = ['id'] # 排除 id 字段</span>        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 指定字段为 read_only,</span>        <span class="token comment"># 扩展address： extra_kwargs = &#123;&#125; # 局部替换某些字段的设定, 或者新增设定</span>        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"min_length"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 给地址增加 最小长度限制</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token string">'默认测试地址'</span><span class="token punctuation">,</span>  <span class="token comment"># 增加默认值</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UserUnActiveSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> User        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># 临时添加字段也需要写在这里</span>        <span class="token comment"># fields = '__all__' # 所有字段</span></code></pre><h3 id="3-5-自定义分页"><a href="#3-5-自定义分页" class="headerlink" title="3.5 自定义分页"></a>3.5 自定义分页</h3><h5 id="自定义分页"><a href="#自定义分页" class="headerlink" title="自定义分页"></a>自定义分页</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 分页（局部）：自定义分页器 局部</span><span class="token keyword">class</span> <span class="token class-name">PageNum</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 查询字符串中代表每页返回数据数量的参数名, 默认值: None</span>    page_size_query_param <span class="token operator">=</span> <span class="token string">'page_size'</span>    <span class="token comment"># 查询字符串中代表页码的参数名, 有默认值: page</span>    <span class="token comment"># page_query_param = 'page'</span>    <span class="token comment"># 一页中最多的结果条数</span>    max_page_size <span class="token operator">=</span> <span class="token number">2</span></code></pre><h6 id="在视图函数中调用"><a href="#在视图函数中调用" class="headerlink" title="在视图函数中调用"></a>在视图函数中调用</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>pagination_class <span class="token operator">=</span> PageNum</code></pre><h3 id="3-6-过滤和排序"><a href="#3-6-过滤和排序" class="headerlink" title="3.6 过滤和排序"></a>3.6 过滤和排序</h3><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer  <span class="token comment"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment"># 过滤：指定过滤方法类, 排序方法类, 一个或多个</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> OrderingFilter<span class="token punctuation">)</span>  <span class="token comment"># 同时支持过滤和排序</span>    <span class="token comment"># 指定排序字段, 不设置, 排序功能不起效</span>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'date_joined'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment"># ?ordering=-id</span>    <span class="token comment"># 指定过滤字段, 不设置, 过滤功能不起效</span>    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># ?username = tom &amp; phone = &amp; is_active = true</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>pagination_class <span class="token operator">=</span> PageNum</code></pre><h3 id="3-6-过滤和排序-1"><a href="#3-6-过滤和排序-1" class="headerlink" title="3.6 过滤和排序"></a>3.6 过滤和排序</h3><p>​    </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成产品的增删改查    """</span>    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> UserSerializer  <span class="token comment"># 优先使用 get_serializer_class 返回的序列化器</span>    <span class="token comment"># 过滤：指定过滤方法类, 排序方法类, 一个或多个</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> OrderingFilter<span class="token punctuation">)</span>  <span class="token comment"># 同时支持过滤和排序</span>    <span class="token comment"># 指定排序字段, 不设置, 排序功能不起效</span>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'date_joined'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment"># ?ordering=-id</span>    <span class="token comment"># 指定过滤字段, 不设置, 过滤功能不起效</span>    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">,</span> <span class="token string">'is_active'</span><span class="token punctuation">)</span>  <span class="token comment"># ?username = tom &amp; phone = &amp; is_active = true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> drf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Kubernetes(k8s)搭建Gunicorn+Django/Flask高可用Web集群</title>
      <link href="k8s%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1/"/>
      <url>k8s%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  2021年，君不言容器技术则已，欲言容器则必称Docker，毫无疑问，它是当今最流行的容器技术之一，但是当我们面对海量的镜像与容器时，怎样快速精准的对海量容器进行管理和编排就又成了新的课题，此时，由Google开源的Kubernetes(读音[kubə’netis]，业界也有称其k8s的，但k8s其实就是文盲版的Kubernetes，只是因为k和s之间有8个字母)就应时而生了，它是一个开源的用于多个主机虚拟成一个云平台后进行容器资源管理和应用编排引擎，致力于让部署容器化应用简单并且高效，提供了应用的全生命周期管理，如应用部署，规划，更新，维护等机制。本次我们尝试在Win10系统下，利用Kubernetes部署Gunicorn+Flask高可用Web集群项目。</p><h1 id="安装Docker的俩种方式"><a href="#安装Docker的俩种方式" class="headerlink" title="安装Docker的俩种方式"></a>安装Docker的俩种方式</h1><h2 id="一、-DockerDesktop（推荐）不需要开启Hyper-v可以和虚拟机兼容的"><a href="#一、-DockerDesktop（推荐）不需要开启Hyper-v可以和虚拟机兼容的" class="headerlink" title="一、 DockerDesktop（推荐）不需要开启Hyper-v可以和虚拟机兼容的"></a>一、 DockerDesktop（推荐）<strong>不需要开启Hyper-v可以和虚拟机兼容的</strong></h2><p><a href="https://www.docker.com/products/docker-desktop">[点击下载安装包]</a></p><p>最新版系统（百度问客服自行解决）</p><p><a href="https://download.csdn.net/download/weixin_45954124/15402674">所需文件</a></p><p><img src="https://img-blog.csdnimg.cn/20210221184356943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">安装WSL2</a></h2><h3 id="步骤-1-启用适用于-Linux-的-Windows-子系统"><a href="#步骤-1-启用适用于-Linux-的-Windows-子系统" class="headerlink" title="步骤 1 - 启用适用于 Linux 的 Windows 子系统"></a>步骤 1 - 启用适用于 Linux 的 Windows 子系统</h3><p>需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。</p><p>以管理员身份打开 PowerShell 并运行：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p>建议现在转到步骤 #2，更新到 WSL 2，但如果只想安装 WSL 1，现在可以重新启动计算机，然后继续执行<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-6---install-your-linux-distribution-of-choice">步骤 6 - 安装所选的 Linux 发行版</a>。 若要更新到 WSL 2，请等待重新启动计算机，然后继续执行下一步。</p><h3 id="步骤-2-检查运行-WSL-2-的要求"><a href="#步骤-2-检查运行-WSL-2-的要求" class="headerlink" title="步骤 2 - 检查运行 WSL 2 的要求"></a>步骤 2 - 检查运行 WSL 2 的要求</h3><p>若要更新到 WSL 2，需要运行 Windows 10。</p><ul><li>对于 x64 系统：<strong>版本 1903</strong> 或更高版本，采用 <strong>内部版本 18362</strong> 或更高版本。</li><li>对于 ARM64 系统：<strong>版本 2004</strong> 或更高版本，采用 <strong>内部版本 19041</strong> 或更高版本。</li><li>低于 18362 的版本不支持 WSL 2。 使用 <a href="https://www.microsoft.com/software-download/windows10">Windows Update 助手</a>更新 Windows 版本。</li></ul><p>若要检查 Windows 版本及内部版本号，选择 Windows 徽标键 + R，然后键入“winver”，选择“确定”。 （或者在 Windows 命令提示符下输入 <code>ver</code> 命令）。 更新到“设置”菜单中的<a href="ms-settings:windowsupdate">最新 Windows 版本</a>。</p><p> 备注</p><p>如果运行的是 Windows 10 版本1903 或 1909，请在 Windows 菜单中打开“设置”，导航到“更新和安全性”，然后选择“检查更新”。 内部版本号必须是 18362.1049+ 或 18363.1049+，次要内部版本号需要高于 .1049。 阅读详细信息：<a href="https://devblogs.microsoft.com/commandline/wsl-2-support-is-coming-to-windows-10-versions-1903-and-1909/">WSL 2 即将支持 Windows 10 版本 1903 和 1909</a>。 请参阅<a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#im-on-windows-10-version-1903-and-i-still-do-not-see-options-for-wsl-2">疑难解答说明</a>。</p><h3 id="步骤-3-启用虚拟机功能"><a href="#步骤-3-启用虚拟机功能" class="headerlink" title="步骤 3 - 启用虚拟机功能"></a>步骤 3 - 启用虚拟机功能</h3><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要<a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting#error-0x80370102-the-virtual-machine-could-not-be-started-because-a-required-feature-is-not-installed">虚拟化功能</a>才能使用此功能。</p><p>以管理员身份打开 PowerShell 并运行：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart</code></pre><p><strong>重新启动</strong> 计算机，以完成 WSL 安装并更新到 WSL 2。</p><h3 id="步骤-4-下载-Linux-内核更新包"><a href="#步骤-4-下载-Linux-内核更新包" class="headerlink" title="步骤 4 - 下载 Linux 内核更新包"></a>步骤 4 - 下载 Linux 内核更新包</h3><ol><li><p>下载最新包：</p><ul><li><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></p><p>备注</p></li></ul><p>如果使用的是 ARM64 计算机，请下载 <a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi">ARM64 包</a>。 如果不确定自己计算机的类型，请打开命令提示符或 PowerShell，并输入：<code>systeminfo | find &quot;System Type&quot;</code>。</p></li><li><p>运行上一步中下载的更新包。 （双击以运行 - 系统将提示你提供提升的权限，选择“是”以批准此安装。）</p></li></ol><p>安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。 （如果希望将新的 Linux 安装设置为 WSL 1，请跳过此步骤。）</p><p> 备注</p><p>有关详细信息，请参阅 <a href="https://aka.ms/cliblog">Windows 命令行博客</a>上的文章<a href="https://devblogs.microsoft.com/commandline/wsl2-will-be-generally-available-in-windows-10-version-2004">对更新 WSL2 Linux 内核的更改</a>。</p><h3 id="步骤-5-将-WSL-2-设置为默认版本"><a href="#步骤-5-将-WSL-2-设置为默认版本" class="headerlink" title="步骤 5 - 将 WSL 2 设置为默认版本"></a>步骤 5 - 将 WSL 2 设置为默认版本</h3><p>打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2</code></pre><h3 id="步骤-6-安装所选的-Linux-分发"><a href="#步骤-6-安装所选的-Linux-分发" class="headerlink" title="步骤 6 - 安装所选的 Linux 分发"></a>步骤 6 - 安装所选的 Linux 分发</h3><ol><li><p>打开 <a href="https://aka.ms/wslstore">Microsoft Store</a>，并选择你偏好的 Linux 分发版。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/store.png" alt="Microsoft Store 中的 Linux 分发版的视图" loading="lazy"></p><p>单击以下链接会打开每个分发版的 Microsoft Store 页面：</p><ul><li><a href="https://www.microsoft.com/store/apps/9pjn388hp8c9">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9n6svws3rx71">Ubuntu 20.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9NJFZK00FGKV">openSUSE Leap 15.1</a></li><li><a href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1">SUSE Linux Enterprise Server 12 SP5</a></li><li><a href="https://www.microsoft.com/store/apps/9PN498VPMF3Z">SUSE Linux Enterprise Server 15 SP1</a></li><li><a href="https://www.microsoft.com/store/apps/9PKR34TNCV07">Kali Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9MSVKQC78PK6">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc">Fedora Remix for WSL</a></li><li><a href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P">Pengwin</a></li><li><a href="https://www.microsoft.com/store/apps/9N8LP0X93VCP">Pengwin Enterprise</a></li><li><a href="https://www.microsoft.com/store/apps/9p804crf0395">Alpine WSL</a></li></ul></li><li><p>在分发版的页面中，选择“获取”。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntustore.png" alt="Microsoft Store 中的 Linux 分发版" loading="lazy"></p></li></ol><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 未来的所有启动时间应不到一秒。</p><p>然后，需要<a href="https://docs.microsoft.com/zh-cn/windows/wsl/user-support">为新的 Linux 分发版创建用户帐户和密码</a>。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntuinstall.png" alt="Windows 控制台中的 Ubuntu 解包" loading="lazy"></p><p><strong>祝贺你！现已成功安装并设置了与 Windows 操作系统完全集成的 Linux 分发！</strong></p><h3 id="安装-Windows-终端（可选）"><a href="#安装-Windows-终端（可选）" class="headerlink" title="安装 Windows 终端（可选）"></a>安装 Windows 终端（可选）</h3><p>Windows 终端可启用多个选项卡（在多个 Linux 命令行、Windows 命令提示符、PowerShell 和 Azure CLI 等之间快速切换）、创建键绑定（用于打开或关闭选项卡、复制粘贴等的快捷方式键）、使用搜索功能，以及使用自定义主题（配色方案、字体样式和大小、背景图像/模糊/透明度）。 <a href="https://docs.microsoft.com/zh-cn/windows/terminal">了解详细信息。</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows/terminal/get-started">安装 Windows 终端</a>。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/terminal.png" alt="Windows 终端" loading="lazy"></p><h3 id="将分发版版本设置为-WSL-1-或-WSL-2"><a href="#将分发版版本设置为-WSL-1-或-WSL-2" class="headerlink" title="将分发版版本设置为 WSL 1 或 WSL 2"></a>将分发版版本设置为 WSL 1 或 WSL 2</h3><p>可打开 PowerShell 命令行并输入以下命令（仅在 <a href="ms-settings:windowsupdate">Windows 内部版本 18362 或更高版本</a>中可用），检查分配给每个已安装的 Linux 分发版的 WSL 版本：<code>wsl -l -v</code></p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>list <span class="token operator">--</span>verbose</code></pre><p>若要将分发版设置为受某一 WSL 版本支持，请运行：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-version</span> &lt;distribution name> &lt;versionNumber></code></pre><p>请确保将 <code>&lt;distribution name&gt;</code> 替换为你的分发版的实际名称，并将 <code>&lt;versionNumber&gt;</code> 替换为数字“1”或“2”。 可以随时更改回 WSL 1，方法是运行与上面相同的命令，但将“2”替换为“1”。</p><p> 备注</p><p>从 WSL 1 更新到 WSL 2 可能需要几分钟才能完成，具体取决于目标分发版的大小。 如果从 Windows 10 周年更新或创意者更新运行 WSL 1 的旧（历史）安装，可能会遇到更新错误。 按照这些说明<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-legacy#uninstallingremoving-the-legacy-distro">卸载并删除任何旧分发</a>。</p><p>如果 <code>wsl --set-default-version</code> 结果为无效命令，请输入 <code>wsl --help</code>。 如果 <code>--set-default-version</code> 未列出，则表示你的 OS 不支持它，你需要更新到版本 1903（内部版本 18362）或更高版本。</p><p>运行命令后如果看到此消息：<code>WSL 2 requires an update to its kernel component. For information please visit https://aka.ms/wsl2kernel</code>。 仍需要安装 MSI Linux 内核更新包。</p><p>此外，如果要使 WSL 2 成为你的默认体系结构，可以通过此命令执行该操作：</p><p>PowerShell复制</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2</code></pre><p>这会将安装的任何新分发版的版本设置为 WSL 2。</p><h2 id="安装完成后-这时我们开启虚拟机发现是可以兼容的"><a href="#安装完成后-这时我们开启虚拟机发现是可以兼容的" class="headerlink" title="安装完成后  这时我们开启虚拟机发现是可以兼容的"></a>安装完成后  这时我们开启虚拟机发现是可以兼容的</h2><p><img src="https://img-blog.csdnimg.cn/20210221151008191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="二、普通安装"><a href="#二、普通安装" class="headerlink" title="二、普通安装"></a>二、普通安装</h1><p>这里我们使用的就是Docker官方最新版3.1.0，内部集成的Kubernetes版本是1.19.3，在安装之前有两点要说明下，如果是Windows用户，需要确保系统版本为专业版：</p><p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20210204110237_52059.png" alt="img" loading="lazy"></p><p>  第二，在专业版的基础上，开启系统的Hyper-v虚拟化功能：</p><p><img src="https://v3u.cn/v3u/Public/js/editor/attached/20210204110211_69757.png" alt="img" loading="lazy"></p><p>  双击安装包进行安装，默认安装在C盘目录，成功后，启动Docker-desktop，一般情况下，Docker很容易启动成功，</p><h1 id="三、安装Kubernetes"><a href="#三、安装Kubernetes" class="headerlink" title="三、安装Kubernetes"></a>三、安装<a href="https://www.kubernetes.org.cn/docs"><strong>Kubernetes</strong></a></h1><p>但是Kubernetes往往会卡在启动界面，这是因为一些学术问题导致无法下载Kubernetes的依赖镜像，此时我们需要另辟蹊径，采用一些开源的三方库迂回帮我们下载这些镜像，这里推荐这个开源项目：<a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">https://github.com/AliyunContainerService/k8s-for-docker-desktop</a></p><p><a href="https://download.csdn.net/download/weixin_45954124/15401699?spm=1001.2014.3001.5501">最新版下载戳我</a></p><p>  输入命令拉取项目:</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;AliyunContainerService&#x2F;k8s-for-docker-desktop.git</code></pre><p>  进入项目的目录内，然后检查自己的Kubernetes版本号，该项目默认拉取的就是1.19.3的依赖镜像，如果您安装的Kubernetes是老版本，需要自行切换版本进行拉取操作：</p><blockquote><p>如Kubernetes版本为 v1.18.8, 请使用下面命令切换 v1.18.8 分支 git checkout v1.18.8<br>如Kubernetes版本为 v1.18.6, 请使用下面命令切换 v1.18.6 分支 git checkout v1.18.6<br>如Kubernetes版本为 v1.18.3, 请使用下面命令切换 v1.18.3 分支 git checkout v1.18.3<br>如Kubernetes版本为 v1.16.5, 请使用下面命令切换 v1.16.5 分支 git checkout v1.16.5<br>如Kubernetes版本为 v1.15.5, 请使用下面命令切换 v1.15.5 分支 git checkout v1.15.5<br>如Kubernetes版本为 v1.15.4, 请使用下面命令切换 v1.15.4 分支 git checkout v1.15.4<br>如Kubernetes版本为 v1.14.8, 请使用下面命令切换 v1.14.8 分支 git checkout v1.14.8<br>如Kubernetes版本为 v1.14.7, 请使用下面命令切换 v1.14.7 分支 git checkout v1.14.7<br>如Kubernetes版本为 v1.14.6, 请使用下面命令切换 v1.14.6 分支 git checkout v1.14.6<br>如Kubernetes版本为 v1.14.3, 请使用下面命令切换 v1.14.3 分支 git checkout v1.14.3<br>如Kubernetes版本为 v1.14.1, 请使用下面命令切换 v1.14.1 分支 git checkout v1.14.1<br>如Kubernetes版本为 v1.13.0, 请使用下面命令切换 v1.13.0 分支 git checkout v1.13.0<br>如Kubernetes版本为 v1.10.11, 请使用下面命令切换 v1.10.11 分支 git checkout v1.10.11</p></blockquote><p>下载完成进入k8s-for-docker-desktop.git执行</p><pre class="language-none"><code class="language-none">load_images.sh</code></pre><p>  执行后发现代理拉取Kubernetes依赖镜像：</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop\k8s-for-docker-desktop&gt; load_images.sh执行策略更改执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): yPS C:\Users\wyx&gt; .\load_images.ps1k8s.gcr.io&#x2F;pause:3.2&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.23.2: Pulling from google_containers&#x2F;pauseDigest: sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814fStatus: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814fk8s.gcr.io&#x2F;kube-controller-manager:v1.19.3&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3v1.19.3: Pulling from google_containers&#x2F;kube-controller-managerDigest: sha256:1ad35b623b9123c6aab99306ba5427e2829b36b378b9b80a6e988713ac5bffd4Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager:v1.19.3Untagged: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-controller-manager@sha256:1ad35b623b9123c6aab99306ba5427e2829b36b378b9b80a6e988713ac5bffd4</code></pre><p>  拉取结束后，执行命令查看镜像列表：</p><pre class="language-none"><code class="language-none">docker images</code></pre><p>  可以看到，针对Kubernetes1.19.3的基础镜像列表：</p><pre class="language-none"><code class="language-none">C:\Users\wyx&gt;docker imagesREPOSITORY                                                       TAG                                                     IMAGE ID       CREATED         SIZEdocker&#x2F;desktop-kubernetes                                        kubernetes-v1.19.3-cni-v0.8.5-critools-v1.17.0-debian   bb2106081d17   2 months ago    285MBk8s.gcr.io&#x2F;kube-proxy                                            v1.19.3                                                 cdef7632a242   4 months ago    118MBk8s.gcr.io&#x2F;kube-scheduler                                        v1.19.3                                                 aaefbfa906bd   4 months ago    45.7MBk8s.gcr.io&#x2F;kube-apiserver                                        v1.19.3                                                 a301be0cd44b   4 months ago    119MBk8s.gcr.io&#x2F;kube-controller-manager                               v1.19.3                                                 9b60aca1d818   4 months ago    111MBk8s.gcr.io&#x2F;etcd                                                  3.4.13-0                                                0369cf4303ff   5 months ago    253MBk8s.gcr.io&#x2F;coredns                                               1.7.0                                                   bfe3a36ebd25   8 months ago    45.2MBk8s.gcr.io&#x2F;pause                                                 3.2                                                     80d28bedfe5d   12 months ago   683kB</code></pre><p>​    <img src="https://img-blog.csdnimg.cn/20210221152623172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>Windows用户不需额外操作，直接重启Docker-desktop，并且点击开启Kubernetes服务：</p><p>  随后，在命令行中键入命令:</p><pre class="language-none"><code class="language-none">kubectl version</code></pre><p>  如果能返回版本号说明安装和配置成功：</p><pre class="language-none"><code class="language-none">C:\Users\wyx&gt;kubectl versionClient Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;19&quot;, GitVersion:&quot;v1.19.3&quot;, GitCommit:&quot;1e11e4a2108024935ecfcb2912226cedeafd99df&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-14T12:50:19Z&quot;, GoVersion:&quot;go1.15.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;windows&#x2F;amd64&quot;&#125;Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;19&quot;, GitVersion:&quot;v1.19.3&quot;, GitCommit:&quot;1e11e4a2108024935ecfcb2912226cedeafd99df&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-14T12:41:49Z&quot;, GoVersion:&quot;go1.15.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</code></pre><p>  接下来，我们简单的部署一下Kubernetes容器，看看和Docker部署有何不同，先来看看Docker传统的部署方式，假设部署一台redis应用，首先拉取镜像：</p><pre class="language-none"><code class="language-none">docker pull redis</code></pre><p>  启动容器：</p><pre class="language-none"><code class="language-none">docker run -p 6380:6379 --name redis redis</code></pre><p>  使用redis客户端进行链接：</p><pre class="language-none"><code class="language-none">redis-cli -p 6380</code></pre><p>  返回数据库链接状态：</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; redis-cli -p 6380127.0.0.1:6380&gt; pingPONG</code></pre><p>  没有任何问题，因为Docker直接操作的对象就是镜像和容器，而Kubernetes是基于Deployment来对集群的Pod和rs服务进行管理，每一个Deployment 都对应集群中的一次部署，所以Deployment是基本的 Kubernetes对象。</p><p>  首先建立Deployment对象：</p><pre class="language-none"><code class="language-none">kubectl create deployment --image&#x3D;redis redis</code></pre><p>  这里镜像还是使用刚才拉取的redis镜像，deployment别名设置为redis:</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl create deployment --image&#x3D;redis redisdeployment.apps&#x2F;redis created</code></pre><p>  创建成功后，启动rs服务：</p><pre class="language-none"><code class="language-none">kubectl expose deployment redis --port&#x3D;6379 --name&#x3D;redis-server</code></pre><p>  这里的端口号是pod中隔离容器的端口，而非主节点端口：</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl expose deployment redis --port&#x3D;6379 --name&#x3D;redis-serverservice&#x2F;redis-server exposed</code></pre><p>  随后获取启动的pod列表：</p><pre class="language-none"><code class="language-none">kubectl get pods</code></pre><p>  我们知道pod是集群执行的最小单位，这里使用get pods来查看运行的pod：</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl get podsNAME                     READY   STATUS    RESTARTS   AGEredis-6749d7bd65-l8gnw   1&#x2F;1     Running   0          64s</code></pre><p>  可以看到已经运行成功，最后需要将pod端口和主节点端口进行端口映射操作：</p><pre class="language-none"><code class="language-none">kubectl port-forward redis-6749d7bd65-l8gnw 6380:6379</code></pre><p>  这里的参数就是pod的name:</p><pre class="language-none"><code class="language-none">PS C:\Users\wyx&gt; kubectl port-forward redis-6749d7bd65-l8gnw 6380:6379             Forwarding from 127.0.0.1:6380 -&gt; 6379Forwarding from [::1]:6380 -&gt; 6379Handling connection for 6380Handling connection for 6380</code></pre><p>  随后使用redis客户端进行链接：</p><pre class="language-none"><code class="language-none">PS C:\Users\Administrator&gt; redis-cli -p 6380127.0.0.1:6380&gt; pingPONG</code></pre><p>  这里就部署成功了，虽然流程上要比Docker直接部署要略微繁复一些，但是Kubernetes自带良好的伸缩和扩展以及高可用特性，一旦pod僵死或者宕机，可以自动生成新的pod的来实现高可用。</p><p><img src="https://img-blog.csdnimg.cn/20210221141151400.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>  接下来尝试一些进阶操作，部署Gunicorn+Flask的Web应用，还记得之前的这篇文章：<a href="https://v3u.cn/a_id_165">利用DockerHub在Centos7.7环境下部署Nginx反向代理Gunicorn+Flask独立架构</a> 吗？里面详细阐述了如何使用Dockerfile打包镜像，这里我们拉取已经打包好的flask+gunicorn镜像：</p><h1 id="四、Django"><a href="#四、Django" class="headerlink" title="四、Django"></a>四、Django</h1><pre class="language-none"><code class="language-none">docker pull 515250339&#x2F;mydjango</code></pre><p>  接着建立基于deployment的部署配置文件：deployment.yaml</p><pre class="language-none"><code class="language-none">apiVersion: v1kind: Servicemetadata:  name: mydjangospec:  selector:    app: mydjango  ports:  - protocol: &quot;TCP&quot;    port: 8000    targetPort: 8000  type: LoadBalancer---apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: mydjangospec:  selector:    matchLabels:      app: mydjango  replicas: 4  template:    metadata:      labels:        app: mydjango    spec:      containers:      - name: mydjango        image: 515250339&#x2F;mydjango        imagePullPolicy: Never        ports:        - containerPort: 8000</code></pre><p>  这个配置文件的含义是：将本地的myfalsk镜像作为Deployment基础镜像部署，集群运行四个pod来维持生产环境的服务保证，运行协议当然是TCP，主节点端口号和pod端口保持一致都是5000</p><p>  然后执行命令启动服务：</p><pre class="language-none"><code class="language-none">kubectl apply -f deployment.yaml</code></pre><p>  查看服务状态：</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl get podNAME                        READY   STATUS    RESTARTS   AGEmydjango-7bd66b79c9-l72t7   1&#x2F;1     Running   0          16smydjango-7bd66b79c9-lnv78   1&#x2F;1     Running   0          16smydjango-7bd66b79c9-trf9f   1&#x2F;1     Running   0          16smydjango-7bd66b79c9-wndd6   1&#x2F;1     Running   0          16s</code></pre><p>  可以看到四台pod同时运行，访问网址:<a href="http://localhost:8000/">http://localhost:8000</a></p><p>  没有问题，即使我们手动kill一台pod:</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl delete pod mydjango-7bd66b79c9-l72t7pod &quot;mydjango-7bd66b79c9-l72t7&quot; deleted</code></pre><p><img src="https://img-blog.csdnimg.cn/20210221183335183.gif" alt="在这里插入图片描述" loading="lazy"></p><h1 id="五、Flask"><a href="#五、Flask" class="headerlink" title="五、Flask"></a>五、Flask</h1><p>同理flask也是一样的流程</p><pre class="language-none"><code class="language-none">docker pull zcxey2911&#x2F;myflask</code></pre><p>  接着建立基于deployment的部署配置文件：deployment.yaml</p><pre class="language-none"><code class="language-none">apiVersion: v1kind: Servicemetadata:  name: myflaskspec:  selector:    app: myflask  ports:  - protocol: &quot;TCP&quot;    port: 5000    targetPort: 5000  type: LoadBalancer---apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: myflaskspec:  selector:    matchLabels:      app: myflask  replicas: 4  template:    metadata:      labels:        app: myflask    spec:      containers:      - name: myflask        image: zcxey2911&#x2F;myflask        imagePullPolicy: Never        ports:        - containerPort: 5000</code></pre><p>  这个配置文件的含义是：将本地的myfalsk镜像作为Deployment基础镜像部署，集群运行四个pod来维持生产环境的服务保证，运行协议当然是TCP，主节点端口号和pod端口保持一致都是5000</p><p>  然后执行命令启动服务：</p><pre class="language-none"><code class="language-none">kubectl apply -f deployment.yaml</code></pre><p>  查看服务状态：</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl get podsNAME                      READY   STATUS    RESTARTS   AGEmyflask-dbcbcf9bf-6chj2   1&#x2F;1     Running   0          87smyflask-dbcbcf9bf-9qrzt   1&#x2F;1     Running   0          5m21smyflask-dbcbcf9bf-f4nqk   1&#x2F;1     Running   0          5m21smyflask-dbcbcf9bf-pbp6m   1&#x2F;1     Running   0          5m21sredis-6749d7bd65-r5r8g    1&#x2F;1     Running   0          4h25m</code></pre><p>  可以看到四台pod同时运行，访问网址:<a href="http://localhost:5000/">http://localhost:5000</a></p><p>  没有问题，即使我们手动kill一台pod:</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt; kubectl delete pod myflask-dbcbcf9bf-667rfpod &quot;myflask-dbcbcf9bf-667rf&quot; deleted</code></pre><p><img src="https://img-blog.csdnimg.cn/20210221183334851.gif" alt="在这里插入图片描述" loading="lazy"></p><p>  可以看到集群立刻又会重新生成一个pod来维持服务稳定，这就是Docker原生容器所不具备的高可用特性。</p><p>关闭服务</p><pre class="language-none"><code class="language-none">kubectl delete -f deployment.yaml</code></pre><p>可以看到服务已经关闭</p><pre class="language-none"><code class="language-none">C:\Users\wyx\Desktop&gt;kubectl delete -f deployment.yamlservice &quot;myflask&quot; deleteddeployment.apps &quot;myflask&quot; deletedC:\Users\wyx\Desktop&gt;kubectl get podNAME                     READY   STATUS    RESTARTS   AGE</code></pre><p>  结语：未来已来，将至已至，在21世纪的第二个十年里，阿里、字节跳动、腾讯、百度等中国互联网行业巨擘们，都在加紧深耕容器领域，而Kubernetes也是这些大厂未来的战略核心。有了Kubernetes，我们就可以将整个大规模的服务器对计算资源抽象化通过一个个容器进行自动化且细致化管理，将最终的应用服务交还给用户，而用户则并不需要关心容器本身。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Kubernetes(k8s) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes(k8s) </tag>
            
            <tag> Win10 </tag>
            
            <tag> Gunicorn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10环境下使用Docker容器式部署前后端分离项目Django+Vue.js</title>
      <link href="Win10%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AEDjango-Vue-js/"/>
      <url>Win10%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Docker%E5%AE%B9%E5%99%A8%E5%BC%8F%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AEDjango-Vue-js/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着现代化产品研发的不断推进，我们会发现，几乎每个产品线都会包含功能各异的服务，而且服务与服务之间存在也会存在着错综复杂的依赖和被依赖关系，这就会带来一个世界性难题，项目部署的时候需要运维来手动配制服务之间通信的协议和地址，稍有不慎就会导致服务异常，同时如果服务器因为坏道或者其他原因导致更换物理机，重新部署新环境的成本也会非常之高。因此，我们就会寄希望于Docker这种的容器技术可以让我们构建产品所需要的所有的服务能够迅速快捷的重新部署，并且可以根据需求做横向扩展，且能够保证稳定的容灾性，在出现问题的时候可以利用守护进程自动重启或者启动容灾备份。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>  本次我们将在Win10环境下利用Docker容器技术来对前后端分离项目Django+Vue.js进行打包，分别定制化对应的项目镜像，应对快速部署以及高扩展的需求。</p><p>  首先当然是安装Docker，可以参照这篇视频攻略：<a href="https://www.bilibili.com/video/BV1pE411x72w/">win10安装配置Docker并更换国内源</a>。</p><p>  随后在宿主机安装gunicorn，容器内我们用异步的方式来启动Django</p><pre class="language-python" data-language="python"><code class="language-python">pip3 isntall gunicorn gevent</code></pre><p>  Django项目配置settings.py对应的应用：</p><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'myapp.apps.MyappConfig'</span><span class="token punctuation">,</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span>    <span class="token string">'corsheaders'</span><span class="token punctuation">,</span>    <span class="token string">'dwebsocket'</span><span class="token punctuation">,</span>    <span class="token string">'gunicorn'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>  然后在Django项目的根目录编写gunicorn的配置文件：gunicorn.conf.py</p><p><img src="https://img-blog.csdnimg.cn/20210219172543678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessingbind <span class="token operator">=</span> <span class="token string">"0.0.0.0:8000"</span>   <span class="token comment">#绑定的ip与端口workers = 1                #进程数</span></code></pre><p>  这里注意一点，ip必须是0.0.0.0，不要写成127.0.0.1,否则外部环境会访问不到容器内的服务，接下来在项目的根目录编写好依赖列表：requirements.txt</p><pre class="language-none"><code class="language-none">pip freeze &gt; requirements.txt</code></pre><p>  这里需要注意的是，某些依赖的库最好用==标注出小版本，因为一会在容器内通过pip安装的时候，系统有可能会自动帮你安装最新版导致一些依赖报错。</p><p>  下面就是老套路，在根目录编写Dockerfile文件：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM python:3.7.4WORKDIR &#x2F;Project&#x2F;mydjangoCOPY requirements.txt .&#x2F;RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simpleCOPY . .ENV LANG C.UTF-8CMD [&quot;gunicorn&quot;, &quot;mydjango.wsgi:application&quot;,&quot;-c&quot;,&quot;.&#x2F;gunicorn.conf.py&quot;]</code></pre><p>  本次的基础镜像我们选择3.7，毕竟2020年了，与时俱进还是很必要的。</p><p>  ok，万事俱备，运行命令对项目进行打包：</p><p>这里注意一点就是要进入到项目的目录下执行</p><pre class="language-none"><code class="language-none">docker build -t mydjango .</code></pre><pre class="language-none"><code class="language-none">mydjango&gt;docker build -t mydjango .[+] Building 3.9s (10&#x2F;10) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                  0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 297B                                                                  0.0s &#x3D;&gt; [internal] load .dockerignore                                                                     0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                       0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;python:3.7.4                                       1.4s &#x3D;&gt; [1&#x2F;5] FROM docker.io&#x2F;library&#x2F;python:3.7.4@sha256:fc0a398e1987fb1e58909053c11630e06adb3df265fe693  0.0s &#x3D;&gt; [internal] load build context                                                                     2.0s &#x3D;&gt; &#x3D;&gt; transferring context: 37.00kB                                                                  2.0s &#x3D;&gt; CACHED [2&#x2F;5] WORKDIR &#x2F;Project&#x2F;mydjango                                                            0.0s &#x3D;&gt; CACHED [3&#x2F;5] COPY requirements.txt .&#x2F;                                                             0.0s &#x3D;&gt; CACHED [4&#x2F;5] RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple      0.0s &#x3D;&gt; [5&#x2F;5] COPY . .                                                                                    0.1s &#x3D;&gt; exporting to image                                                                                0.2s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                               0.1s &#x3D;&gt; &#x3D;&gt; writing image sha256:8b36bba5eff3adf2dc6555e7b5999978499bd732ede250725952741283adbcec          0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;mydjango                                                           0.0s</code></pre><p><img src="https://img-blog.csdnimg.cn/20210219181000151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  这里我的项目目录是mydjango。</p><p>  第一次打包编译的时候，可能时间会长一点，耐心等一会就可以了，如果中途遇到网络错误导致的失败，反复执行打包命令即可，此时运行命令：</p><pre class="language-none"><code class="language-none">docker images</code></pre><p>  可以看到编译好的镜像大概有1g左右：</p><p><img src="https://img-blog.csdnimg.cn/2021021918133144.png" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-none"><code class="language-none">docker imagesREPOSITORY                       TAG       IMAGE ID       CREATED          SIZEmydjango                         latest    8b36bba5eff3   12 seconds ago   1.38GB</code></pre><p>  随后启动镜像服务：</p><pre class="language-none"><code class="language-none">docker run -it --rm -p 8001:8000 mydjango</code></pre><p>  这里我们用端口映射技术将宿主机的5000端口映射到容器内的8000端口，访问Django服务，http://容器ip:8001</p><p><img src="https://img-blog.csdnimg.cn/20210219173026704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  后端搞定，接下来轮到我们的前端服务vue.js了，首先打开vue项目的打包配置文件config/index.js:</p><p><img src="https://img-blog.csdnimg.cn/202102191817105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-js" data-language="js"><code class="language-js">build<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Template for index.html</span>    index<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// Paths</span>    assetsRoot<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    assetsSubDirectory<span class="token operator">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>    assetsPublicPath<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token comment">/**     * Source Maps     */</span>    productionSourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// https://webpack.js.org/configuration/devtool/#production</span>    devtool<span class="token operator">:</span> <span class="token string">'#source-map'</span><span class="token punctuation">,</span>    <span class="token comment">// Gzip off by default as many popular static hosts such as</span>    <span class="token comment">// Surge or Netlify already gzip all static assets for you.</span>    <span class="token comment">// Before setting to `true`, make sure to:</span>    <span class="token comment">// npm install --save-dev compression-webpack-plugin</span>    productionGzip<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    productionGzipExtensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// Run the build command with an extra argument to</span>    <span class="token comment">// View the bundle analyzer report after build finishes:</span>    <span class="token comment">// `npm run build --report`</span>    <span class="token comment">// Set to `true` or `false` to always turn it on or off</span>    bundleAnalyzerReport<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_report  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  将打包目录改成相对路径，同时注意路由的配置，如果曾经修改为history模式记得改回hash：</p><pre class="language-none"><code class="language-none">export default new Router(&#123;  routes:routes,  &#x2F;&#x2F;mode:&#39;history&#39;   &#x2F;*hash*&#x2F;&#125;)</code></pre><p>  准备工作完毕，在vue的项目根目录下编写Dockerfile：</p><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM node:lts-alpine# install simple http server for serving static contentRUN npm install -g http-server# make the &#39;app&#39; folder the current working directoryWORKDIR &#x2F;app# copy both &#39;package.json&#39; and &#39;package-lock.json&#39; (if available)COPY package*.json .&#x2F;# install project dependenciesRUN npm install# copy project files and folders to the current working directory (i.e. &#39;app&#39; folder)COPY . .# build app for production with minificationRUN npm run buildEXPOSE 8080CMD [ &quot;http-server&quot;, &quot;dist&quot; ]</code></pre><p><img src="https://img-blog.csdnimg.cn/20210219181754305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">  这里我们选择体积更小的alpine镜像。</p><p>  随后进入项目的根目录，执行打包命令：</p><pre class="language-none"><code class="language-none">docker build -t myvue .</code></pre><p>  这里我的前端目录是myvue</p><pre class="language-none"><code class="language-none">vue&gt;docker build -t myvue .[+] Building 96.6s (12&#x2F;12) FINISHED &#x3D;&gt; [internal] load build definition from Dockerfile                                                                                                                                   0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 556B                                                                                                                                                   0.0s &#x3D;&gt; [internal] load .dockerignore                                                                                                                                                      0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                                                                                                                        0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;node:lts-alpine                                                                                                                     1.0s &#x3D;&gt; [internal] load build context                                                                                                                                                     77.9s &#x3D;&gt; &#x3D;&gt; transferring context: 143.82MB                                                                                                                                                 77.8s &#x3D;&gt; [1&#x2F;7] FROM docker.io&#x2F;library&#x2F;node:lts-alpine@sha256:5edad160011cc8cfb69d990e9ae1cb2681c0f280178241d58eba05b5bfc34047                                                               0.0s &#x3D;&gt; CACHED [2&#x2F;7] RUN npm install -g http-server                                                                                                                                        0.0s &#x3D;&gt; CACHED [3&#x2F;7] WORKDIR &#x2F;app                                                                                                                                                          0.0s &#x3D;&gt; CACHED [4&#x2F;7] COPY package*.json .&#x2F;                                                                                                                                                 0.0s &#x3D;&gt; CACHED [5&#x2F;7] RUN npm install                                                                                                                                                       0.0s &#x3D;&gt; [6&#x2F;7] COPY . .                                                                                                                                                                     3.1s &#x3D;&gt; [7&#x2F;7] RUN npm run build                                                                                                                                                           11.4s &#x3D;&gt; exporting to image                                                                                                                                                                 2.9s &#x3D;&gt; &#x3D;&gt; exporting layers                                                                                                                                                                2.9s &#x3D;&gt; &#x3D;&gt; writing image sha256:8c6f24ce961e0cbde79193382db0de61c96f00d37cac01336ee937e9c9cf25a3                                                                                           0.0s &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;myvue                                                                                                                                               0.0s</code></pre><p>  系统会自动根据脚本进行安装依赖，第一次也需要等待一段时间。</p><p>  打包完成后，执行：</p><pre class="language-none"><code class="language-none">docker images</code></pre><p>  可以看到前端镜像的体积要小一点：</p><pre class="language-none"><code class="language-none">docker imagesREPOSITORY                       TAG       IMAGE ID       CREATED             SIZEmyvue                            latest    8c6f24ce961e   45 seconds ago      446MB</code></pre><p>  运行前端服务：</p><pre class="language-none"><code class="language-none">docker run -it --rm -p 8081:8080 myvue</code></pre><p>  同样使用端口映射，这次宿主机使用8081，当然了，如果需要可以根据喜好进行修改。</p><p>  访问Vue.js服务，http://容器ip:8081</p><p><img src="https://img-blog.csdnimg.cn/20210219173037381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  至此，通过Docker的容器技术，我们就将前后端两大服务都分别部署好了，过程并不复杂，但是意义却是里程碑式的，携此两大镜像，左牵Django，右擎Vue.js，如果哪天需要横向扩容，只需短短几分钟，我们就可以在新服务器上做到“拎包入住”，灵活方便。</p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
          <category> docker项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
            <tag> docker项目部署 </tag>
            
            <tag> win10项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django结合vue实现三方钉钉群机器人验证码</title>
      <link href="%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="django-vue实现钉钉群机器人验证码"><a href="#django-vue实现钉钉群机器人验证码" class="headerlink" title="django+vue实现钉钉群机器人验证码"></a>django+vue实现钉钉群机器人验证码</h1><pre><code>又是忙碌的一天，今天给大家带来的教程是使用**钉钉群机器人发送随机验证码**，</code></pre><p>在vue中输入然后在后端进行判断并返回相应的返回值，首先我们去看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><p>然后开始操作<br>我们需要django+vue跨域  <a href="https://blog.csdn.net/weixin_45954124/article/details/109367680">点击查看</a></p><h2 id="一、创建钉钉群机器人"><a href="#一、创建钉钉群机器人" class="headerlink" title="一、创建钉钉群机器人"></a>一、创建钉钉群机器人</h2><p>首先明确一点，钉钉自定义机器人早就不支持在手机端创建了，所以打开你的pc端或者mac端的钉钉客户端，在需要机器人的聊天群界面，点击智能群助手</p><p><img src="https://img-blog.csdnimg.cn/20201216200147346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200145997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20201216200144171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200144155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216200143887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>需要注意</strong>的是，在安全设置一栏里，我们选择加签的方式来验证，在此说明一下，钉钉机器人的安全策略有三种，第一种是使用关键字，就是说你推送的消息里必须包含你创建机器人时定义的关键字，如果不包含就推送不了消息，第二种就是使用加密签名，第三种是定义几个ip源，非这些源的请求会被拒绝，综合来看还是第二种又安全又灵活。<br><img src="https://img-blog.csdnimg.cn/20201216200141694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>  创建成功后，系统会分配给你一个webhook地址，这个地址需要保存一下，地址中有唯一的accesstoken</p><p><img src="https://img-blog.csdnimg.cn/20201216200144351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>  ok，那么怎么利用这个地址让你的机器人推送消息呢？查看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p><h2 id="二、测试发送信息"><a href="#二、测试发送信息" class="headerlink" title="二、测试发送信息"></a>二、测试发送信息</h2><p>发现文档居然还是python2.0的版本，好吧，我们自己来翻译成3.0</p><ul><li><h3 id="在项目下新建包utils-dindin-py"><a href="#在项目下新建包utils-dindin-py" class="headerlink" title="在项目下新建包utils/dindin.py"></a>在项目下新建包utils/dindin.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> base64<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> requests<span class="token punctuation">,</span> json  <span class="token comment"># 导入依赖库</span><span class="token comment"># https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38</span>timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#这里的secret是我们cp备份的</span>secret <span class="token operator">=</span> <span class="token string">'SECc96a44d409036efafe8645c659a551e3ad3ad15bdfd8a408b6254927a2d0d1ca'</span>secret_enc <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>string_to_sign <span class="token operator">=</span> <span class="token string">'&#123;&#125;\n&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>string_to_sign_enc <span class="token operator">=</span> string_to_sign<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>hmac_code <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secret_enc<span class="token punctuation">,</span> string_to_sign_enc<span class="token punctuation">,</span> digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>hmac_code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span>  <span class="token comment"># eu4Q16kFubncXuZprXxwRuvDx3Yh/roFWEPn0T5MRPo%3D</span><span class="token comment"># print(timestamp)</span><span class="token comment"># print(sign)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 定义数据类型</span><span class="token comment">#这里webhook是我们创建成功后 webhook地址</span>webhook <span class="token operator">=</span> <span class="token string">'https://oapi.dingtalk.com/robot/send?access_token=e2e7db9c547beff2f8f93ee06fec87c1a354594045d49fbf30669d7e05b23c38&amp;timestamp='</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;sign="</span> <span class="token operator">+</span> sign<span class="token comment"># 定义要发送的数据</span><span class="token comment"># "at": &#123;"atMobiles": "['"+ mobile + "']"</span><span class="token keyword">def</span> <span class="token function">dindin_post</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"content"</span><span class="token punctuation">:</span> text<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 发送post请求</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>dindin_post<span class="token punctuation">(</span><span class="token number">134235</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>测试发送成功</strong><br><img src="https://img-blog.csdnimg.cn/20201216200344887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li></ul><h2 id="三、创建user（app）"><a href="#三、创建user（app）" class="headerlink" title="三、创建user（app）"></a>三、创建user（app）</h2><ol><li><h3 id="user-models-py"><a href="#user-models-py" class="headerlink" title="user/models.py"></a>user/models.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username</code></pre></li><li><h3 id="我们这里重写了django自带的用户表，所以要在settings中重新定义"><a href="#我们这里重写了django自带的用户表，所以要在settings中重新定义" class="headerlink" title="我们这里重写了django自带的用户表，所以要在settings中重新定义"></a>我们这里重写了django自带的用户表，所以要在settings中重新定义</h3><pre class="language-python" data-language="python"><code class="language-python">AUTH_USER_MODEL <span class="token operator">=</span> <span class="token string">'user.User'</span></code></pre></li><li><h3 id="user-views-py"><a href="#user-views-py" class="headerlink" title="user/views.py"></a>user/views.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token comment">#</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> utils<span class="token punctuation">.</span>dindin <span class="token keyword">import</span> dindin_post<span class="token keyword">import</span> random<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny<span class="token keyword">import</span> jwt<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token comment"># 注册</span><span class="token keyword">class</span> <span class="token class-name">RegisterAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 存储数据</span>            User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>make_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user.view--16"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 登录</span><span class="token keyword">class</span> <span class="token class-name">LoginAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取信息</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 判断密码</span>        <span class="token keyword">if</span> user_obj<span class="token punctuation">:</span>            <span class="token keyword">if</span> check_password<span class="token punctuation">(</span>password<span class="token punctuation">,</span> user_obj<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># jwt加密</span>                encode_jwt <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"uid"</span><span class="token punctuation">:</span> user_obj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>encode_jwt<span class="token punctuation">)</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">:</span> encode_jwt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 发送验证码</span><span class="token keyword">class</span> <span class="token class-name">VerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 生成随机验证码6位</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>        <span class="token comment"># 存储到session</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span> <span class="token operator">=</span> code  <span class="token comment"># 存储的也是 key-value 键值对</span>        request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>set_expiry<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>  <span class="token comment"># 设置 session 存活期 单位是秒</span>        <span class="token comment"># 调用钉钉接口 发送验证码</span>        dindin_post<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 校验验证码</span><span class="token keyword">class</span> <span class="token class-name">IsVerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        verification <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"verification"</span><span class="token punctuation">)</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> verification <span class="token operator">==</span> code<span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><h3 id="配置子路由user-urls-py"><a href="#配置子路由user-urls-py" class="headerlink" title="配置子路由user/urls.py"></a>配置子路由user/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>staticfiles<span class="token punctuation">.</span>urls <span class="token keyword">import</span> staticfiles_urlpatterns<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> SimpleRouter<span class="token punctuation">,</span> DefaultRouter<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token punctuation">,</span> refresh_jwt_token<span class="token comment"># ... the rest of your URLconf goes here ...</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 定义超链接路由</span>    <span class="token comment"># re_path('^static/upload/(?P&lt;path>.*)$',serve,&#123;'document_root':'/static/upload/'&#125;),</span>    path<span class="token punctuation">(</span><span class="token string">'register/'</span><span class="token punctuation">,</span> RegisterAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 注册</span>    path<span class="token punctuation">(</span><span class="token string">'mylogin/'</span><span class="token punctuation">,</span> LoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 登录自定义token</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_url/'</span><span class="token punctuation">,</span> DingDingAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 钉钉三方登录路由</span>    path<span class="token punctuation">(</span><span class="token string">'dindin_back/'</span><span class="token punctuation">,</span> DingBackApiView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 三方登录回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'verification/'</span><span class="token punctuation">,</span> VerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 发送验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'isverification/'</span><span class="token punctuation">,</span> IsVerificationAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 判断验证码接口</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 全局token，登录视图 使用djangorestframework-jwt==1.11.0</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="配置主路由django-urls-py"><a href="#配置主路由django-urls-py" class="headerlink" title="配置主路由django/urls.py"></a>配置主路由django/urls.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> re_path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'user/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'user.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="三、前端vue构建登录注册页面"><a href="#三、前端vue构建登录注册页面" class="headerlink" title="三、前端vue构建登录注册页面"></a>三、前端vue构建登录注册页面</h2><p><img src="https://img-blog.csdnimg.cn/20201216201121216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20201216201924820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><ol><li><h3 id="src-http-apis-js"><a href="#src-http-apis-js" class="headerlink" title="src/http/apis.js"></a>src/http/apis.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/* eslint-disable */</span><span class="token comment">// 用户登录</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>get<span class="token punctuation">,</span> post<span class="token punctuation">,</span> put<span class="token punctuation">,</span> del<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./index'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRegister</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/register/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/verification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getisVerification</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/isverification/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/login/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postDinDin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/dindin_url/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre></li><li><h3 id="注册页面src-components-register-vue"><a href="#注册页面src-components-register-vue" class="headerlink" title="注册页面src/components/register.vue"></a>注册页面src/components/register.vue</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>用户注册<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"用户名"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input ref<span class="token operator">=</span><span class="token string">"userNameInput"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"Basic usage"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon slot<span class="token operator">=</span><span class="token string">"prefix"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tooltip slot<span class="token operator">=</span><span class="token string">"suffix"</span> title<span class="token operator">=</span><span class="token string">"Extra information"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"info-circle"</span> style<span class="token operator">=</span><span class="token string">"color: rgba(0,0,0,.45)"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tooltip<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"密码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input prefix<span class="token operator">=</span><span class="token string">"*"</span> suffix<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"buttonlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>postRegister<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token comment">//表单样式</span>      formlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//标签</span>        labelCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//文本框</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//按钮样式</span>      buttonlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//按钮</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            offset<span class="token operator">:</span> <span class="token number">0</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//自定义方法</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        username<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>        password<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postRegister</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><h3 id="登录页面src-components-login-vue"><a href="#登录页面src-components-login-vue" class="headerlink" title="登录页面src/components/login.vue"></a>登录页面src/components/login.vue</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"用户名"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input ref<span class="token operator">=</span><span class="token string">"userNameInput"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"Basic usage"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon slot<span class="token operator">=</span><span class="token string">"prefix"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tooltip slot<span class="token operator">=</span><span class="token string">"suffix"</span> title<span class="token operator">=</span><span class="token string">"Extra information"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"info-circle"</span> style<span class="token operator">=</span><span class="token string">"color: rgba(0,0,0,.45)"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tooltip<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"密码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input prefix<span class="token operator">=</span><span class="token string">"*"</span> suffix<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"验证码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"verification"</span> @blur<span class="token operator">=</span><span class="token string">"isVerification"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isverification"</span><span class="token operator">></span>验证码错误<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"clickVerification"</span><span class="token operator">></span>点击发送验证码<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"buttonlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>img style<span class="token operator">=</span><span class="token string">"margin-left:20px;cursor:pointer;"</span> @click<span class="token operator">=</span><span class="token string">"dingding"</span> src<span class="token operator">=</span><span class="token string">"http://localhost:8000/static/dingding.png"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getisVerification<span class="token punctuation">,</span> getVerification<span class="token punctuation">,</span> postDinDin<span class="token punctuation">,</span> postLogin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      selected<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      startdate<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      dinDinUrl<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      verification<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      isverification<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment">//表单样式</span>      formlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//标签</span>        labelCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//文本框</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//按钮样式</span>      buttonlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//按钮</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            offset<span class="token operator">:</span> <span class="token number">0</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//自定义方法</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断验证码</span>    <span class="token function">isVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getisVerification</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>verification<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>verification<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//发送钉钉验证码</span>    <span class="token function">clickVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//钉钉登录</span>    <span class="token function-variable function">dingding</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">postDinDin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dinDinUrl <span class="token operator">=</span> res<span class="token punctuation">.</span>dindin_url        <span class="token comment">//打开新窗口跳转到此地址</span>        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>dindin_url<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// let just = true;</span>      <span class="token comment">// just = this.isVerification() &amp; just;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          username<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>          password<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//登录</span>        <span class="token function">postLogin</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>token<span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>username<span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>id<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> register <span class="token keyword">from</span> <span class="token string">'@/components/register'</span><span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">'@/components/login'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">var</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'register'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>register        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>          name<span class="token operator">:</span><span class="token string">'login'</span><span class="token punctuation">,</span>          component<span class="token operator">:</span>login        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span>routes<span class="token punctuation">,</span>  mode<span class="token operator">:</span><span class="token string">'history'</span>   <span class="token comment">/*hash*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django结合haystack搜索框架使用Docker+ES实现秒级索引</title>
      <link href="django%E7%BB%93%E5%90%88haystack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E7%A7%92%E7%BA%A7%E7%B4%A2%E5%BC%95/"/>
      <url>django%E7%BB%93%E5%90%88haystack%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AE%9E%E7%8E%B0%E7%A7%92%E7%BA%A7%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-python" data-language="python"><code class="language-python">pip install drf<span class="token operator">-</span>haystack <span class="token comment"># django的开源 搜索框架（python语音写的，搜索框架可以使用其他</span>语音的搜索引擎）pip install whoosh <span class="token comment"># 搜索引擎（python语音写的）</span>pip install jieba <span class="token comment"># 中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持</span>不是太好</code></pre><h2 id="什么是haystack？"><a href="#什么是haystack？" class="headerlink" title="什么是haystack？"></a>什么是haystack？</h2><ul><li>haystack是django的开源搜索框架，该框架支持 Solr,Elasticsearch,Whoosh, Xapian 搜索引 擎，不用更改代码，直接切换引擎，减少代码量。</li><li>搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小 巧，配置比较简单，当然性能自然略低。</li><li>中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换 whoosh的分词组件。</li></ul><h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><h3 id="syl-settings-py-全文检索配置"><a href="#syl-settings-py-全文检索配置" class="headerlink" title="syl/settings.py 全文检索配置"></a>syl/settings.py 全文检索配置</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.注册app '''</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'haystack'</span><span class="token punctuation">,</span> <span class="token comment"># haystack要放在应用的上面</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.模板路径 '''</span>TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'DIRS'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'templates'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''3.全文检索配置'''</span>HAYSTACK_SEARCH_RESULTS_PER_PAGE <span class="token operator">=</span> <span class="token number">15</span>  <span class="token comment"># 搜索出多条数据时需要分页</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'course.whoosh_cn_backend.MyWhooshEngine'</span><span class="token punctuation">,</span>        <span class="token string">'PATH'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'whoosh_index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 指定倒排索引存放位置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># ES引擎</span><span class="token comment"># settings.py 修改haystack配置</span><span class="token comment"># ES引擎</span><span class="token comment"># HAYSTACK_CONNECTIONS = &#123;</span><span class="token comment">#     'default': &#123;</span><span class="token comment">#         'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',</span><span class="token comment">#         'URL': 'http://127.0.0.1:9200/',  # Elasticsearch服务器ip地址，端口号固定为9200</span><span class="token comment">#         'INDEX_NAME': 'syl',  # Elasticsearch建立的反向索引库的名称</span><span class="token comment">#     &#125;,</span><span class="token comment"># &#125;</span><span class="token comment"># 添加此项，当数据库改变时，会自动更新索引，非常方便</span>HAYSTACK_SIGNAL_PROCESSOR <span class="token operator">=</span> <span class="token string">'haystack.signals.RealtimeSignalProcessor'</span></code></pre><h3 id="在子应用下创建索引文件"><a href="#在子应用下创建索引文件" class="headerlink" title="在子应用下创建索引文件"></a>在子应用下创建索引文件</h3><p>apps/course/search_indexes.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token comment"># apps/course/search_indexes.py</span><span class="token comment"># 文件名必须是 search_indexes.py</span><span class="token keyword">from</span> haystack <span class="token keyword">import</span> indexes<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Course<span class="token comment"># 修改此处，类名为模型类的名称+Index，比如模型类为GoodsInfo,则这里类名为GoodsInfoIndex(其实可以随便写)</span><span class="token keyword">class</span> <span class="token class-name">CourseIndex</span><span class="token punctuation">(</span>indexes<span class="token punctuation">.</span>SearchIndex<span class="token punctuation">,</span> indexes<span class="token punctuation">.</span>Indexable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Course索引类    """</span>    <span class="token comment"># text为索引字段</span>    <span class="token comment"># document = True，这代表haystack和搜索引擎将使用此字段的内容作为索引进行检索</span>    <span class="token comment"># use_template=True 指定根据表中的那些字段建立索引文件的说明放在一个文件中</span>    text <span class="token operator">=</span> indexes<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>document<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> use_template<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 对那张表进行查询</span>    <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 重载get_model方法，必须要有</span>        <span class="token triple-quoted-string string">"""返回建立索引的模型类"""</span>        <span class="token keyword">return</span> Course <span class="token comment"># 返回这个model</span>    <span class="token comment"># 建立索引的数据</span>    <span class="token keyword">def</span> <span class="token function">index_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> using<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回要建立索引的数据查询集"""</span>        <span class="token comment"># 这个方法返回什么内容，最终就会对那些方法建立索引，这里是对所有字段建立索引</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="指定索引模板文件"><a href="#指定索引模板文件" class="headerlink" title="指定索引模板文件"></a>指定索引模板文件</h3><pre class="language-python" data-language="python"><code class="language-python">templates<span class="token operator">/</span>search<span class="token operator">/</span>indexes<span class="token operator">/</span>course<span class="token operator">/</span>course_text<span class="token punctuation">.</span>txt</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建文件路径命名必须这个规范：templates/search/indexes/应用名称/模型类名称</span>_text<span class="token punctuation">.</span>txt</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token builtin">object</span><span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token builtin">object</span><span class="token punctuation">.</span>desc<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="apps-course-whoosh-cn-backend-py"><a href="#apps-course-whoosh-cn-backend-py" class="headerlink" title="apps/course/whoosh_cn_backend.py"></a>apps/course/whoosh_cn_backend.py</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token comment"># 更换 text 字段的 分析方式, 变为jieba分词中的中文分析器</span><span class="token keyword">from</span> haystack<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>whoosh_backend <span class="token keyword">import</span> WhooshEngine<span class="token punctuation">,</span> WhooshSearchBackend<span class="token keyword">from</span> whoosh<span class="token punctuation">.</span>fields <span class="token keyword">import</span> TEXT<span class="token keyword">from</span> jieba<span class="token punctuation">.</span>analyse <span class="token keyword">import</span> ChineseAnalyzer<span class="token keyword">class</span> <span class="token class-name">MyWhooshSearchBackend</span><span class="token punctuation">(</span>WhooshSearchBackend<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">build_schema</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>content_field_name<span class="token punctuation">,</span> schema<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>build_schema<span class="token punctuation">(</span>fields<span class="token punctuation">)</span>        <span class="token comment"># 指定whoosh使用jieba进行分词</span>        schema<span class="token punctuation">.</span>_fields<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> TEXT<span class="token punctuation">(</span>stored<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                      analyzer<span class="token operator">=</span>ChineseAnalyzer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      field_boost<span class="token operator">=</span>fields<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>boost<span class="token punctuation">,</span>                                      sortable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>content_field_name<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyWhooshEngine</span><span class="token punctuation">(</span>WhooshEngine<span class="token punctuation">)</span><span class="token punctuation">:</span>    backend <span class="token operator">=</span> MyWhooshSearchBackend</code></pre><h3 id="课程全文检索接口视图函数"><a href="#课程全文检索接口视图函数" class="headerlink" title="课程全文检索接口视图函数"></a>课程全文检索接口视图函数</h3><p>course/views.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> syl <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> InvalidPage<span class="token punctuation">,</span> Paginator<span class="token keyword">from</span> haystack<span class="token punctuation">.</span>forms <span class="token keyword">import</span> ModelSearchForm<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token punctuation">,</span>HttpResponse<span class="token comment"># 如果settings.py中配置就是用settings中配置的，否则就每页15条</span>RESULTS_PER_PAGE <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token string">'HAYSTACK_SEARCH_RESULTS_PER_PAGE'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">course_index_search</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1.获取前端传过来的关键字（查询数据）</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 第几页</span>    page_size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'page_size'</span><span class="token punctuation">,</span> RESULTS_PER_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 每页多少条</span>    <span class="token comment"># 2.获取查询条件，进行查询</span>    <span class="token keyword">if</span> query<span class="token punctuation">:</span>        form <span class="token operator">=</span> ModelSearchForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">,</span> load_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 将查询条件传递给查询对 象</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> form<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询出来的最终数据</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'No file found！'</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 3.对结果集进行分页</span>    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>results<span class="token punctuation">,</span> page_size<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>  <span class="token comment"># 从分好的页中拿第几页</span>    <span class="token keyword">except</span> InvalidPage<span class="token punctuation">:</span>  <span class="token comment"># 如果分页出错</span>        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'No file found！'</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 4.把查询的分页结果集对象转换成json格式</span>    jsondata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> result <span class="token keyword">in</span> page<span class="token punctuation">.</span>object_list<span class="token punctuation">:</span>  <span class="token comment"># 分页后的课程查询结果</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>            <span class="token string">'desc'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>desc<span class="token punctuation">,</span>            <span class="token string">'img'</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">'://'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">]</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>img<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            <span class="token comment"># 'follower': result.object.follower,</span>            <span class="token string">'learner'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>learner<span class="token punctuation">,</span>            <span class="token string">'status'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>            <span class="token string">'course_type'</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>course_type<span class="token punctuation">.</span><span class="token builtin">id</span>        <span class="token punctuation">&#125;</span>        jsondata<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'Search successfully！'</span><span class="token punctuation">,</span>        <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> page<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token string">"results"</span><span class="token punctuation">:</span> jsondata<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># return JsonResponse(result)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>result<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="syl-urls-py-添加路由"><a href="#syl-urls-py-添加路由" class="headerlink" title="syl/urls.py 添加路由"></a>syl/urls.py 添加路由</h3><pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'search/'</span><span class="token punctuation">,</span> course_index_search<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="命令构建倒排索引"><a href="#命令构建倒排索引" class="headerlink" title="命令构建倒排索引"></a>命令构建倒排索引</h3><pre class="language-python" data-language="python"><code class="language-python">python manage<span class="token punctuation">.</span>py rebuild_index</code></pre><h3 id="测试课程全文检索"><a href="#测试课程全文检索" class="headerlink" title="测试课程全文检索"></a>测试课程全文检索</h3><p>测试接口</p><pre class="language-python" data-language="python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span><span class="token punctuation">:</span><span class="token number">8888</span><span class="token operator">/</span>search<span class="token operator">/</span>?q<span class="token operator">=</span>测试<span class="token operator">&amp;</span>page<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>page_size<span class="token operator">=</span><span class="token number">1</span></code></pre><p>测试结果</p><p><img src="https://img-blog.csdnimg.cn/20201120190227302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">返回结果<span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Search successfully！"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"results"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"Linux入门课程"</span><span class="token punctuation">,</span><span class="token string">"desc"</span><span class="token punctuation">:</span> "要在实验楼愉快地学习，先要熟练地使用 Linux，本实验介绍 Linux 基本操作，shell 环境下的常用命令。"<span class="token punctuation">,</span><span class="token string">"img"</span><span class="token punctuation">:</span> <span class="token string">"http://192.168.56.100:8888/media/course/linux.jpg"</span><span class="token punctuation">,</span><span class="token string">"learner"</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"course_type"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h1 id="docker安装ES"><a href="#docker安装ES" class="headerlink" title="docker安装ES"></a>docker安装ES</h1><ul><li><code>1.拉取docker镜像</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 从仓库拉取镜像</span>sudo docker image pull delron<span class="token operator">/</span>elasticsearch<span class="token operator">-</span>ik<span class="token punctuation">:</span><span class="token number">2.4</span><span class="token number">.6</span><span class="token operator">-</span><span class="token number">1.0</span></code></pre><ul><li><code>2.使用docker安装ES</code></li></ul><pre class="language-python" data-language="python"><code class="language-python">docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">9200</span><span class="token punctuation">:</span><span class="token number">9200</span> <span class="token operator">-</span>p <span class="token number">9300</span><span class="token punctuation">:</span><span class="token number">9300</span> <span class="token operator">-</span><span class="token operator">-</span>name elasticsearch delron<span class="token operator">/</span>elasticsearch<span class="token operator">-</span>ik<span class="token punctuation">:</span><span class="token number">2.4</span><span class="token number">.6</span><span class="token operator">-</span><span class="token number">1.0</span></code></pre><ul><li><code>3.在页面中测试</code></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">http<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">192.168.56.100:9200</span><span class="token regex-delimiter">/</span></span>报错安装  pip install elasticsearch</code></pre><h1 id="2-使用ES替代whoosh全文检索"><a href="#2-使用ES替代whoosh全文检索" class="headerlink" title="2.使用ES替代whoosh全文检索"></a>2.使用ES替代whoosh全文检索</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># settings.py  修改haystack配置</span><span class="token comment"># ES引擎</span>HAYSTACK_CONNECTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'</span><span class="token punctuation">,</span>        <span class="token string">'URL'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:9200/'</span><span class="token punctuation">,</span>        <span class="token comment"># Elasticsearch服务器ip地址，端口号固定为9200</span>        <span class="token string">'INDEX_NAME'</span><span class="token punctuation">:</span> <span class="token string">'syl'</span><span class="token punctuation">,</span>                    <span class="token comment"># Elasticsearch建立的反向索引库的名称</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这时我们会有问题，就是我们在手动更新索引之后数据是无法进行同步的。这时我们就可以使用django-celery-haystack来解决此问题</p><h1 id="Haystack保持新鲜索引"><a href="#Haystack保持新鲜索引" class="headerlink" title="Haystack保持新鲜索引"></a><a href="https://django-haystack.readthedocs.io/en/master/other_apps.html">Haystack保持新鲜索引</a></h1><h2 id="Sub-Apps"><a href="#Sub-Apps" class="headerlink" title="Sub Apps"></a>Sub Apps</h2><p>These are apps that build on top of the infrastructure provided by Haystack. Useful for essentially extending what Haystack can do.</p><h2 id="queued-search"><a href="#queued-search" class="headerlink" title="queued_search"></a>queued_search</h2><p><a href="http://github.com/toastdriven/queued_search">http://github.com/toastdriven/queued_search</a> (2.X compatible)</p><p>Provides a queue-based setup as an alternative to <code>RealtimeSignalProcessor</code> or constantly running the <code>update_index</code> command. Useful for high-load, short update time situations.</p><h2 id="celery-haystack"><a href="#celery-haystack" class="headerlink" title="celery-haystack"></a>celery-haystack</h2><p><a href="https://github.com/jezdez/celery-haystack">https://github.com/jezdez/celery-haystack</a> (1.X and 2.X compatible)</p><p>Also provides a queue-based setup, this time centered around Celery. Useful for keeping the index fresh per model instance or with the included task to call the <code>update_index</code> management command instead.</p><h2 id="haystack-rqueue"><a href="#haystack-rqueue" class="headerlink" title="haystack-rqueue"></a>haystack-rqueue</h2><p><a href="https://github.com/mandx/haystack-rqueue">https://github.com/mandx/haystack-rqueue</a> (2.X compatible)</p><p>Also provides a queue-based setup, this time centered around RQ. Useful for keeping the index fresh using <code>./manage.py rqworker</code>.</p><h2 id="django-celery-haystack（推荐）"><a href="#django-celery-haystack（推荐）" class="headerlink" title="django-celery-haystack（推荐）"></a>django-celery-haystack（推荐）</h2><p><a href="https://github.com/mixcloud/django-celery-haystack-SearchIndex">https://github.com/mixcloud/django-celery-haystack-SearchIndex</a></p><p>Another queue-based setup, also around Celery. Useful for keeping the index fresh.</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django </category>
          
          <category> haystack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> haystack </tag>
            
            <tag> Docker </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>Python设计模式 设计模式的定义:为了解决面向对象系统中重要和重复的设计封装在一起的一种代码实现框架,可以使得代码更加易于扩展和调用</p><p>四个基本要素:模式名称,问题,解决方案,效果</p><p>六大原则:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>开闭原则<span class="token punctuation">:</span>一个软件实体<span class="token punctuation">,</span>如类<span class="token punctuation">,</span>模块和函数应该对扩展开发<span class="token punctuation">,</span>对修改关闭<span class="token punctuation">.</span>既软件实体应尽量在不修改原有代码的情况下进行扩展<span class="token punctuation">.</span> <span class="token number">2</span><span class="token punctuation">.</span>里氏替换原则<span class="token punctuation">:</span>所有引用父类的方法必须能透明的使用其子类的对象<span class="token number">3</span><span class="token punctuation">.</span>依赖倒置原则<span class="token punctuation">:</span>高层模块不应该依赖底层模块<span class="token punctuation">,</span>二者都应该依赖其抽象<span class="token punctuation">,</span>抽象不应该依赖于细节<span class="token punctuation">,</span>细节应该依赖抽象<span class="token punctuation">,</span>换而言之<span class="token punctuation">,</span>要针对接口编程而不是针对实现编程<span class="token number">4</span><span class="token punctuation">.</span>接口隔离原则<span class="token punctuation">:</span>使用多个专门的接口<span class="token punctuation">,</span>而不是使用单一的总接口<span class="token punctuation">,</span>即客户端不应该依赖那些并不需要的接口<span class="token number">5</span><span class="token punctuation">.</span>迪米特法则<span class="token punctuation">:</span>一个软件实体应该尽可能的少与其他实体相互作用<span class="token number">6</span><span class="token punctuation">.</span>单一直责原则<span class="token punctuation">:</span>不要存在多个导致类变更的原因<span class="token punctuation">.</span>即一个类只负责一项职责</code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>定义:一种特殊的类,声明了若干方法,要求继承该接口的类必须实现这种方法</p><p>作用:限制继承接口的类的方法的名称及调用方式,隐藏了类的内部实现</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token comment">#定义抽象方法的关键字</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># @abstractmethod</span>    <span class="token comment"># def pay(self,money):</span>    <span class="token comment">#     raise NotImplementedError</span><span class="token keyword">class</span> <span class="token class-name">AiliPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#子类继承接口,必须实现接口中定义的抽象方法,否则不能实例化对象</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用支付宝支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ApplePay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用苹果支付支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span></code></pre><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>定义:保证一个类只有一个实例,并提供一个访问它的全局访问点</p><p>适用场景:当一个类只能有一个实例而客户可以从一个众所周知的访问点访问它时</p><p>优点:对唯一实例的受控访问,相当于全局变量,但是又可以防止此变量被篡改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#如果该类已经有了一个实例则直接返回,否则创建一个全局唯一的实例</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>name <span class="token operator">=</span> namea <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>b <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h3 id="工厂模式（celery）"><a href="#工厂模式（celery）" class="headerlink" title="工厂模式（celery）"></a>工厂模式（celery）</h3><p>定义:不直接向客户暴露对象创建的实现细节,而是通过一个工厂类来负责创建产品类的实例</p><p>角色:工厂角色,抽象产品角色,具体产品角色</p><p>优点:隐藏了对象创建代码的细节,客户端不需要修改代码</p><p>缺点:违反了单一职责原则,将创建逻辑集中到一个工厂里面,当要添加新产品时,违背了开闭原则</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#抽象产品角色</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AiliPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#具体产品角色</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>enable_yuebao<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>enable_yuebao <span class="token operator">=</span> enable_yuebao    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>enable_yuebao<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用余额宝支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用支付宝支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ApplePay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 具体产品角色</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用苹果支付支付%s元'</span><span class="token operator">%</span>money<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PaymentFactory</span><span class="token punctuation">:</span>    <span class="token comment">#工厂角色</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'alipay'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AiliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'yuebao'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AiliPay<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'applepay'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ApplePay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> NameErrorp <span class="token operator">=</span> PaymentFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> p<span class="token punctuation">.</span>create_payment<span class="token punctuation">(</span><span class="token string">'yuebao'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>pay<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>定义:定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖它的对象都会得到通知并被自动更新.观察者模式又称为’发布订阅’模式</p><p>角色:抽象主题,具体主题(发布者),抽象观察者,具体观察者(订阅者)</p><p>适用场景:当一个抽象模型有两个方面,其中一个方面依赖于另一个方面.将两者封装在独立的对象中以使它们各自独立的改变和复用</p><p>当一个对象的改变需要同时改变其他对象,而且不知道具体有多少对象以待改变</p><p>当一个对象必须通知其他对象,而又不知道其他对象是谁,即这些对象之间是解耦的</p><p>优点:目标和观察者之间的耦合最小,支持广播通信</p><p>缺点:多个观察者之间互不知道对方的存在,因此一个观察者对主题的修改可能造成错误的更新</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token comment">#抽象主题</span><span class="token keyword">class</span> <span class="token class-name">Oberserver</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment">#具体主题</span><span class="token keyword">class</span> <span class="token class-name">Notice</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">attach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">detach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> obj <span class="token keyword">in</span> self<span class="token punctuation">.</span>observers<span class="token punctuation">:</span>            obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment">#抽象观察者</span><span class="token keyword">class</span> <span class="token class-name">ManagerNotice</span><span class="token punctuation">(</span>Notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>company_info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__company_info <span class="token operator">=</span> company_info    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__company_info    <span class="token decorator annotation punctuation">@company_info<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__company_info <span class="token operator">=</span> info        self<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#具体观察者</span><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>Oberserver<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>noti<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> noti<span class="token punctuation">.</span>company_info<span class="token comment">#消息订阅-发送</span>notice <span class="token operator">=</span> ManagerNotice<span class="token punctuation">(</span><span class="token punctuation">)</span>alex<span class="token operator">=</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>tony<span class="token operator">=</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>alex<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>tony<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info<span class="token operator">=</span><span class="token string">"公司运行良好"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alex<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tony<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info<span class="token operator">=</span><span class="token string">"公司将要上市"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alex<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tony<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>detach<span class="token punctuation">(</span>tony<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info<span class="token operator">=</span><span class="token string">"公司要破产了，赶快跑路"</span><span class="token keyword">print</span><span class="token punctuation">(</span>alex<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tony<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理之位运算以及RBAC俩种实现方法</title>
      <link href="%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8ARBAC%E4%BF%A9%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
      <url>%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8ARBAC%E4%BF%A9%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="后台系统设计——角色权限"><a href="#后台系统设计——角色权限" class="headerlink" title="后台系统设计——角色权限"></a>后台系统设计——角色权限</h1><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>不论是哪种后台管理系统，“人员权限”始终是绕不开的话题。无论是移动端，PC端产品，登陆都需要一个账号。只是对于C端的产品，大多都是用户自己注册即可。</p><p>而对于后台产品而言，是需要公司内部人员去创建账号的。每个使用系统的用户都有一个独一无二的账号，每个账号都有自己对应的权限。</p><p>多数情况下，除了超级管理员外，我们会对大多数的账号的权限做一些限制，以此来管理不同用户的使用权限问题。</p><p>譬如，做企业使用类软件，不同部门、不同职位的人的权限是不同的；再例如一款收费产品的收费用户和免费用户权限也是迥然不同的。</p><p>如果每个用户都单独做权限控制的话，当系统用户体量非常大的时候，就会发现以下问题：</p><p>很多账号权限都是一样的，但每次都要再配一次；</p><p>当某类权限用户的权限需要修改时，无法批量修改，只能一个个去修改非常耗时；</p><h1 id="二、经典模型——RBAC"><a href="#二、经典模型——RBAC" class="headerlink" title="二、经典模型——RBAC"></a>二、经典模型——RBAC</h1><p>这时候，聪明的产品先人就创建了“角色”的概念，通过对权限集的抽象，创立了角色，通过修改角色的权限，来控制拥有该角色的人员账号的权限。</p><h2 id="1、RBAC——基于角色的访问控制（Role-Based-Access-Control-）"><a href="#1、RBAC——基于角色的访问控制（Role-Based-Access-Control-）" class="headerlink" title="1、RBAC——基于角色的访问控制（Role-Based Access Control ）"></a><strong>1、RBAC——基于角色的访问控制（Role-Based Access Control ）</strong></h2><p>其基本思想是，对系统操作的各种权限不是直接授予具体的用户，而是在用户集合与权限集合之间建立一个角色集合。每一种角色对应一组相应的权限。一旦用户被分配了适当的角色后，该用户就拥有此角色的所有操作权限。</p><p>这样做的好处是，不必在每次创建用户时都进行分配权限的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，这样将简化用户的权限管理，减少系统的开销。</p><p>按照百度百科对RBAC的定义，我们可以理解为此模型是通过角色关联用户，角色关联权限的方式，间接赋予用户权限。</p><h2 id="2-基于-Django-的后台管理平台，采用-RBAC-权限管理机制"><a href="#2-基于-Django-的后台管理平台，采用-RBAC-权限管理机制" class="headerlink" title="2.基于 Django 的后台管理平台，采用 RBAC 权限管理机制"></a>2.基于 Django 的后台管理平台，采用 RBAC 权限管理机制</h2><ul><li>用户表、角色表、权限表、资源列表<ul><li><code>用户表</code>：</li><li><code>角色表</code>：</li><li><code>资源列表(路径正则)</code>：资源名称（项目模块名称），资源路径（后台路由）<ul><li>资源分类：商品模块、订单模块、营销模块、权限模块、内容模块、其他模块</li></ul></li><li><code>权限表</code>：对某一个路由的增删改查权限</li><li><img src="https://img-blog.csdnimg.cn/20201221200059924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li></ul></li></ul><h2 id="3-RBAC角色权限管理机制实现思路"><a href="#3-RBAC角色权限管理机制实现思路" class="headerlink" title="3. RBAC角色权限管理机制实现思路"></a>3. RBAC角色权限管理机制实现思路</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 面向资源编程</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>shiyanlou<span class="token punctuation">.</span>com<span class="token operator">/</span>v1<span class="token operator">/</span>books<span class="token operator">/</span>        <span class="token comment"># 请求后端 books书籍表中数据</span>get    post<span class="token comment"># 用户表</span><span class="token comment"># 角色表</span><span class="token comment"># 权限表</span>get<span class="token operator">/</span>post<span class="token operator">/</span>put<span class="token operator">/</span>delete 对应关系</code></pre><ul><li>所有权限的本质是对数据库中表中数据增删改查的操作</li><li>而这些增删改查的操作是通过前端不同路由，通过get、post、put、delete方法操作数据库的</li><li>对权限的控制，最简单的方法就是判断当前用户是否可以对指定路由请求操作的权限</li><li>把角色和这个角色能够访问的 url 和 请求方式进行关联（因为正是的业务逻辑用户权限划分力度可能非常细致）</li><li>再简单的业务逻辑中这一张表就是权限表</li></ul><table><thead><tr><th>路由 资源(可能对应的是后端路由的 name名称，可以通过name名称解析出对应路由)</th><th>请求方式</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>get</td><td>判断用户是否可以查询books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>post</td><td>判断用户是否可以添加books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>put</td><td>判断用户是否可以更新books表中数据</td></tr><tr><td><a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a></td><td>delete</td><td>判断用户是否可以删除books表中数据</td></tr></tbody></table><ul><li>后端如何判断用户权限<ul><li>用户发送求方法 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的url</li><li>后端首先查询时哪一个用户，然后查询当前用户的角色</li><li>最后判断这个角色是否可以访问 <a href="https://www.shiyanlou.com/v1/books/">https://www.shiyanlou.com/v1/books/</a> 的对应方法即可</li><li>如果这个角色有权限访问这个url就返回数据，不能访问就返回 401状态码</li></ul></li></ul><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h2><p><strong>表的设计</strong> </p><img src="https://img-blog.csdnimg.cn/2020122120045577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> AbstractUser<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># Create your models here.</span><span class="token comment"># 角色表</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'角色'</span><span class="token comment"># 用户表</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>AbstractUser<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    per <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    role <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Role<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"用户"</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>username<span class="token comment"># 节点表</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'节点表'</span><span class="token comment"># 权限表</span><span class="token keyword">class</span> <span class="token class-name">Access</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    role <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Role<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    node <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Node<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'权限表'</span></code></pre><p>在自定义中间件 添加判断权限</p><p>我们在响应视图前添加如下判断  </p><p>我们在访问<code>/user/blacklist/</code>时进行判断  </p><p>获取token解码获取当前用户信息 进行关联查询</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_decode_handler<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token comment"># 判断用户属于的角色是否有权限</span><span class="token keyword">class</span> <span class="token class-name">JurisdictionMyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/user/blacklist/"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取token</span>                token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token comment"># 获取userid</span>                user_id <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>                <span class="token comment"># 获取用户id角色</span>                role_id <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>role_id                <span class="token comment"># 获取角色的权限（路由）</span>                path <span class="token operator">=</span> Access<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>role_id<span class="token operator">=</span>role_id<span class="token punctuation">)</span>                i <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token keyword">for</span> i <span class="token keyword">in</span> path <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> i<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name<span class="token punctuation">]</span>                <span class="token comment"># 判断当前用户有没有权限</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> i<span class="token punctuation">:</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">return</span></code></pre><h1 id="三、位运算实现权限管理"><a href="#三、位运算实现权限管理" class="headerlink" title="三、位运算实现权限管理"></a>三、位运算实现权限管理</h1><h2 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1. 位运算"></a>1. 位运算</h2><p>程序中的所有数在计算机内存中都是以二进制的形式<a href="https://baike.baidu.com/item/%E5%82%A8%E5%AD%98/2446499">储存</a>的。位运算就是直接对整数在内存中的二进制位进行<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C/33052">操作</a>。比如，and运算本来是一个逻辑<a href="https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a>，但整数与整数之间也可以进行and运算。举个例子，6的二进制是110，11的二进制是1011，那么6 and 11的结果就是2，它是二进制对应位进行逻辑运算的结果（0表示False，1表示True，空位都当0处理）。</p><p><img src="https://img-blog.csdnimg.cn/20201221202731845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p><strong>二进制</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b001</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b011</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b110</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b111</span><span class="token punctuation">)</span><span class="token comment"># 打印结果</span><span class="token number">1</span><span class="token number">3</span><span class="token number">4</span><span class="token number">6</span><span class="token number">7</span></code></pre><h2 id="2-简单demo事例"><a href="#2-简单demo事例" class="headerlink" title="2. 简单demo事例"></a>2. 简单demo事例</h2><pre class="language-python" data-language="python"><code class="language-python">user <span class="token operator">=</span> <span class="token number">0b110</span>permisssion <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'usermange'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">,</span> <span class="token string">'blacklist'</span><span class="token punctuation">:</span> <span class="token number">0b010</span><span class="token punctuation">,</span> <span class="token string">'login'</span><span class="token punctuation">:</span> <span class="token number">0b001</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> user <span class="token operator">&amp;</span> permisssion<span class="token punctuation">[</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没权限"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@my_decorator</span><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入视图'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>view<span class="token punctuation">(</span><span class="token string">"usermange"</span><span class="token punctuation">)</span>view<span class="token punctuation">(</span><span class="token string">"blacklist"</span><span class="token punctuation">)</span>view<span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token comment"># 打印结果</span>进入视图进入视图没权限</code></pre><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><p>在中间件加入判断  我们的<code>permission</code>也可以创建相应的表</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用位运算来判断权限</span><span class="token keyword">class</span> <span class="token class-name">JurisdictionMyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view_func<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 权限对应表</span>        permission <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'/user/blacklist/'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">,</span> <span class="token string">'/user/user/'</span><span class="token punctuation">:</span> <span class="token number">0b010</span><span class="token punctuation">,</span> <span class="token string">'/user/user//'</span><span class="token punctuation">:</span> <span class="token number">0b100</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">"/user/blacklist/"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取当前用户的权限</span>                per <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>                pk<span class="token operator">=</span>jwt_decode_handler<span class="token punctuation">(</span>token<span class="token operator">=</span>request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>per                <span class="token comment"># print(not bin(int(per)))   # False</span>                <span class="token comment"># print(permission[request.path]) # 4</span>                <span class="token comment"># 判断当前用户的权限 是否在 权限对应表中 有相应的权限</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">int</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span> <span class="token operator">&amp;</span> permission<span class="token punctuation">[</span>request<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"utils/mymidder--142"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token keyword">return</span></code></pre><p><strong>在实际开发中，往往一个类对象拥有多种权限，每种权限有两个状态即有和无，正常情况下，有多少个权限，就需要多少个字段保存相应状态，如果权限过多，那么这种方式显得极其笨重，最近学习了一种用位运算权限管理的方式，方便快捷，实现原理简单，大大简化操作，简单实现权限的管理</strong></p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 中间件 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> RBAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3实现队列定时执行异步任务</title>
      <link href="python3%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
      <url>python3%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们异步任务一般会想到什么  </p><p>celery <a href="https://blog.csdn.net/weixin_45954124/article/details/109493963">有兴趣戳这里</a></p><p><a href="https://blog.csdn.net/weixin_45954124/article/details/110820950">celery 使用</a></p><p><a href="https://www.celerycn.io/yong-hu-zhi-nan/ding-qi-ren-wu-periodic-tasks">celery 中文手册</a></p><p>celery 最终实现效果就是异步任务以及定时任务</p><p>那我们先来看看celery底层是什么  </p><p>broker、backend、生产者、消费者、还有celery来调度任务</p><p>消息队列 用来存储任务 以及调度任务</p><p>那我们也可以使用 queue来实现异步任务</p><h1 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h1><p>我们这里实现的是股票有变动情况则推送消息给关注该股票的人员</p><h2 id="util-queue-py"><a href="#util-queue-py" class="headerlink" title="util_queue.py"></a>util_queue.py</h2><p>手写celery</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'mydjango.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> redis<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> logginglogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 进阶用法</span><span class="token keyword">class</span> <span class="token class-name">Asynchronization</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">**</span>redis_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># __私有方法</span>        self<span class="token punctuation">.</span>__db <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span><span class="token operator">**</span>redis_kwargs<span class="token punctuation">)</span>        <span class="token comment"># 设置key</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 返回列表长度</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>llen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 右侧进入列表</span>        self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 左侧出  形成队列 先进先出</span>        item <span class="token operator">=</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>lpop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token keyword">import</span> time<span class="token keyword">from</span> send_email <span class="token keyword">import</span> send_email_task<span class="token comment"># 实例化</span>q <span class="token operator">=</span> Asynchronization<span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span><span class="token comment"># 循环添加</span><span class="token comment"># for i in range(5):</span><span class="token comment">#</span><span class="token comment">#     q.put(i)</span><span class="token comment">#     time.sleep(1)</span><span class="token comment"># 导入线程模块</span><span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">dojob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 函数内实例化 不冲突</span>    q <span class="token operator">=</span> Asynchronization<span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span>    <span class="token comment"># 无限循环</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment"># 删除左侧第一个 也就是陷进去的那一个</span>        result <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            email <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email            <span class="token comment"># print(email)</span>            <span class="token comment"># logger.info(email)</span>            send_email_task<span class="token punctuation">(</span>email<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span>            <span class="token comment"># logger.error(e)</span>        <span class="token comment"># 判断是否为空</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>            <span class="token comment"># 删除完毕 跳出循环</span>            <span class="token keyword">break</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">inform_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> user<span class="token punctuation">:</span>        email <span class="token operator">=</span> i<span class="token punctuation">.</span>email        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定义线程</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dojob<span class="token punctuation">)</span>        <span class="token comment"># 启动</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># inform_user()</span><span class="token comment"># print(q.size())</span></code></pre><p>然后我们在要使用的地方进行调用即可</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> queue </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django+vue前后端分离利用redis+websocket实现实时排序股票图</title>
      <link href="redis-websocket%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E6%8E%92%E5%BA%8F/"/>
      <url>redis-websocket%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们之前学习过<a href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/?t=1609153167579">websocket</a></p><p>在这次我们又新学习了<a href="https://www.runoob.com/redis/redis-sorted-sets.html">redis的有序集合</a>  </p><p>​        有序集合的底层是 <strong>链表</strong> 和 <strong>hash</strong></p><p>​        在查询时又使用了<strong>跳表</strong> 增加了占用空间  是一种以空间换时间的方式</p><p>​        </p><p>话不多说 直接开干</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket <span class="token keyword">import</span> accept_websocket<span class="token comment"># 获取排行榜</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">ranking</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 向前端发送时间</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                list2 <span class="token operator">=</span> r6<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                list2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>                list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment"># print(list2)</span>                s <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>                    s <span class="token operator">+=</span> <span class="token number">1</span>                    list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"total"</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"ranking"</span><span class="token punctuation">:</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ranking/'</span><span class="token punctuation">,</span> ranking<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 实时充值排行</span><span class="token punctuation">]</span></code></pre><h1 id="前端vue"><a href="#前端vue" class="headerlink" title="前端vue"></a>前端vue</h1><h2 id="wallet-vue"><a href="#wallet-vue" class="headerlink" title="wallet.vue"></a>wallet.vue</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout id<span class="token operator">=</span><span class="token string">"components-layout-demo-custom-trigger"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider <span class="token operator">:</span>trigger<span class="token operator">=</span><span class="token string">"null"</span> collapsible<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>leftmenu <span class="token operator">:</span>menu_number<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的钱包<span class="token operator">--</span><span class="token operator">-</span>余额 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> balance <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"() => (modal2Visible = true)"</span><span class="token operator">></span>            充值          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>modal            v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"modal2Visible"</span>            title<span class="token operator">=</span><span class="token string">"Vertically centered modal dialog"</span>            centered            @ok<span class="token operator">=</span><span class="token string">"() => (modal2Visible = false)"</span>          <span class="token operator">></span>            充值金额            <span class="token operator">&lt;</span>a<span class="token operator">-</span>input<span class="token operator">-</span>number              <span class="token operator">:</span>formatter<span class="token operator">=</span><span class="token string">"value => `$ $&#123;value&#125;`.replace(/\B(?=(\d&#123;3&#125;)+(?!\d))/g, ',')"</span>              <span class="token operator">:</span>parser<span class="token operator">=</span><span class="token string">"value => value.replace(/\$\s?|(,*)/g, '')"</span>              @change<span class="token operator">=</span><span class="token string">"onChange"</span>            <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"postPlant"</span><span class="token operator">></span>普通充值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            选择支付            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/支付宝.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(1)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/微信.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(2)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/pay.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(3)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"'http://127.0.0.1:8000/static/we_pay/' + we_img"</span> alt<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"we_img"</span> title<span class="token operator">=</span><span class="token string">"微信扫码"</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>modal<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的优惠券<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>今日充值排行榜<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in message"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>ranking <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>姓名：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>充值金额<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>total <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//导入组件</span><span class="token keyword">import</span> leftmenu <span class="token keyword">from</span> <span class="token string">'./leftmenu.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> staff_service <span class="token keyword">from</span> <span class="token string">'./staff_service.vue'</span><span class="token punctuation">;</span><span class="token comment">//导入跨域</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getBalance<span class="token punctuation">,</span> getWxBack<span class="token punctuation">,</span> postPlant<span class="token punctuation">,</span> postRecharge<span class="token punctuation">,</span> postWxBack<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      balance<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      modal2Visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      total_amount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      we_img<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//注册组件标签</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'staff_service'</span><span class="token operator">:</span> staff_service<span class="token punctuation">,</span>    <span class="token string">'leftmenu'</span><span class="token operator">:</span> leftmenu<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">postPlant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        balance<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postPlant</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modal2Visible <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//获取余额</span>    <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(res)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> res<span class="token punctuation">.</span>balance      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//跳转支付</span>    <span class="token function">postBalance</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postBalance'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        total_amount<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>        pay_method<span class="token operator">:</span> value      <span class="token punctuation">&#125;</span>      <span class="token function">postRecharge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment">// this.$router.push(res.data.pay_url)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>pay_url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>we_img <span class="token operator">=</span> res<span class="token punctuation">.</span>img        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/pay/ranking/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> data2        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span>message <span class="token operator">=</span> data        <span class="token comment">// getWxBack(&#123;img: _this.we_img&#125;).then(res => &#123;</span>        <span class="token comment">// // getWxBack(&#123;img: "order_773561.jpg"&#125;).then(res => &#123;</span>        <span class="token comment">//   _this.getBalance()</span>        <span class="token comment">// &#125;)</span>        <span class="token comment">// data = JSON.parse(data)</span>        <span class="token comment">// console.log(data[0])</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger <span class="token punctuation">&#123;</span>  font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>  padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>  transition<span class="token operator">:</span> color <span class="token number">0.3</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>  color<span class="token operator">:</span> #<span class="token number">1890</span>ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>logo <span class="token punctuation">&#123;</span>  height<span class="token operator">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>  background<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  margin<span class="token operator">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="apis-js"><a href="#apis-js" class="headerlink" title="apis.js"></a>apis.js</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取用户余额</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/balance/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 三方的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRecharge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/pay/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 自定义的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postPlant</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/plant/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 查看微信支付是否完成</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getWxBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/wx_back/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span> <span class="token string">'/wallet'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"余额"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> wallet<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://img-blog.csdnimg.cn/20201228164108714.gif" alt="在这里插入图片描述" loading="lazy"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>完全ok 没有难点 需要记住redis的方法 zrange   以及withscores属性</p><p><img src="https://img-blog.csdnimg.cn/20201228191348241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django2.0.4+vue工厂模式 支付融合 微信二维码支付、支付宝、PayPal跨境支付</title>
      <link href="django2-0-4-vue%E6%94%AF%E4%BB%98%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BE%AE%E4%BF%A1%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81PalPay/"/>
      <url>django2-0-4-vue%E6%94%AF%E4%BB%98%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BE%AE%E4%BF%A1%E3%80%81%E6%94%AF%E4%BB%98%E5%AE%9D%E3%80%81PalPay/</url>
      
        <content type="html"><![CDATA[<p>工厂模式我们在之前已经使用过了  当时我们做的是三方登录 <a href="https://wyx6.top/2020/12/20/%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/">有兴趣的可以戳这里</a></p><p>所需包</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> mydjango<span class="token punctuation">.</span>settings <span class="token keyword">import</span> alipay<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token keyword">from</span> payment<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> payment<span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> uuid<span class="token keyword">import</span> qrcode<span class="token keyword">import</span> paypalrestsdk</code></pre><h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>大家先去看<a href="https://opendocs.alipay.com/open/291/introduce">官方文档</a></p><p>或者看<a href="https://blog.csdn.net/weixin_45954124/article/details/109583431">我的教程</a></p><p><img src="https://img-blog.csdnimg.cn/20201228163628128.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="settings-py配置"><a href="#settings-py配置" class="headerlink" title="settings.py配置"></a>settings.py配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 支付宝配置</span><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment"># 回调地址</span>RETURN_URL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/pay/ali_back/'</span>app_private_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/app_private_key'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay_public_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/alipay_public'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    appid<span class="token operator">=</span><span class="token string">"2016102500759596"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 默认回调url</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span>  <span class="token comment"># RSA 或者 RSA2</span>    debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 默认False</span><span class="token punctuation">)</span></code></pre><h2 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><p>支付宝生成一个支付地址 跳转即可支付</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Ali</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span><span class="token string">"唯一不重复字符串"</span><span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span><span class="token string">"金额"</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AliBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ali_pay/'</span><span class="token punctuation">,</span> Ali<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> AliBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="微信扫码支付"><a href="#微信扫码支付" class="headerlink" title="微信扫码支付"></a>微信扫码支付</h1><p>大家先去看<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5&index=3">官方文档</a></p><p>或者看[教程</p><p><a href="https://v3u.cn/a_id_182"><img src="https://img-blog.csdnimg.cn/20201228163627495.gif" alt="请添加图片描述" style="zoom:200%;" / loading="lazy"></a></p><h2 id="支付接口！！！"><a href="#支付接口！！！" class="headerlink" title="支付接口！！！"></a>支付接口！！！</h2><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><h3 id="wx-pay-py"><a href="#wx-pay-py" class="headerlink" title="wx_pay.py"></a>wx_pay.py</h3><p><a href="https://blog.csdn.net/weixin_45954124/article/details/112294468">点击查看</a></p><p>我们在调用支付接口时就要生成一个订单信息</p><p>微信支付生成二维码</p><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>生成图片在项目文件下 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">class</span> <span class="token class-name">Wx</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="验证支付地址"><a href="#验证支付地址" class="headerlink" title="验证支付地址"></a>验证支付地址</h2><p>微信需要我们去验证一下是否完成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WxBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token string">"order_235117"</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置-1"><a href="#路由配置-1" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'wx_pay/'</span><span class="token punctuation">,</span> Wx<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> WxBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="PayPal-国际支付"><a href="#PayPal-国际支付" class="headerlink" title="PayPal 国际支付"></a>PayPal 国际支付</h1><p><a href="https://github.com/paypal/PayPal-Python-SDK#configuration">官方文档</a></p><p><a href="https://v3u.cn/a_id_157">教程</a></p><img src="https://img-blog.csdnimg.cn/20201228163956125.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h2 id="支付接口-1"><a href="#支付接口-1" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">5.00</span><span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"支付失败"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址-1"><a href="#回调地址-1" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span></code></pre><h2 id="路由配置-2"><a href="#路由配置-2" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'pay_pay/'</span><span class="token punctuation">,</span> PayPal<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PayBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>这时候我们发现三方支付的流程大致是一样的  </p><p>我们进行资源整合</p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Create your models here.</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> utils<span class="token punctuation">.</span>basemodel <span class="token keyword">import</span> Base<span class="token comment"># User有用户名即可 username</span><span class="token comment"># 充值</span><span class="token keyword">class</span> <span class="token class-name">Recharge</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    PAY_METHOD <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"支付宝"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"微信"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Pay"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    ORDER_STATUS <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"待充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"已充值"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"已取消"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>PROTECT<span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"充值用户"</span><span class="token punctuation">)</span>    order_id <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'订单号'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">124</span><span class="token punctuation">)</span>    trade_no <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'支付宝订单号'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 28位</span>    pay_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token string">'充值时间'</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pay_method <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'充值方式'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>PAY_METHOD<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'充值状态'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>ORDER_STATUS<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    total_amount <span class="token operator">=</span> models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">"充值金额"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'充值支付'</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>order_id</code></pre><h2 id="plant-py-工厂模式"><a href="#plant-py-工厂模式" class="headerlink" title="plant.py 工厂模式"></a>plant.py 工厂模式</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">from</span> payment<span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> payment<span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> uuid<span class="token keyword">from</span> mydjango<span class="token punctuation">.</span>settings <span class="token keyword">import</span> alipay<span class="token keyword">from</span> mydjango <span class="token keyword">import</span> settings<span class="token keyword">import</span> qrcode<span class="token keyword">import</span> paypalrestsdk<span class="token keyword">class</span> <span class="token class-name">WxPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token comment"># print(data_dict)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span> <span class="token keyword">and</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>                order_id<span class="token operator">=</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>order_id<span class="token operator">=</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>            user_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>balance<span class="token operator">=</span>user_obj<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'ok'</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token comment"># print(data_dict)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'static/we_pay/'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span>        <span class="token comment"># return HttpResponse(json.dumps(&#123;'img': qrcode_name&#125;))</span><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token comment"># Recharge.objects.filter(order_id=data_dict.get("out_trade_no")).update(status=2)</span>            <span class="token comment"># user_obj = User.objects.filter(username=request.user.username)</span>            <span class="token comment"># user_obj.update(balance=user_obj.first().balance + int(data_dict.get("total_fee")))</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> total_amount <span class="token operator">/</span> <span class="token number">6.531</span>        total_amount <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span><span class="token keyword">class</span> <span class="token class-name">AliPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment"># orders_obj = Recharge.objects.get(order_id=data['out_trade_no'])</span>        <span class="token comment"># orders_obj.trade_no = data['trade_no']</span>        <span class="token comment"># orders_obj.status = 2</span>        <span class="token comment"># orders_obj.save()</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>user        pay_method <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        total_amount <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"total_amount"</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>            <span class="token string">"order_id"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"pay_method"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pay_method<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"total_amount"</span><span class="token punctuation">:</span> total_amount<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        obj <span class="token operator">=</span> Recharge<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>data<span class="token punctuation">)</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span>obj<span class="token punctuation">.</span>order_id<span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span>obj<span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">product_pay</span><span class="token punctuation">(</span>why<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(why)</span>        <span class="token keyword">if</span> why <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> AliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WxPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> PayPal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> why <span class="token operator">==</span> <span class="token string">"ali_back"</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> AliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token string">"wx_back"</span><span class="token punctuation">:</span>            w <span class="token operator">=</span> WxPay<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> w<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token keyword">elif</span> why <span class="token operator">==</span> <span class="token string">"pay_back"</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> PayPal<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>request<span class="token punctuation">)</span></code></pre><h2 id="views-py-视图"><a href="#views-py-视图" class="headerlink" title="views.py 视图"></a>views.py 视图</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通充值</span><span class="token keyword">class</span> <span class="token class-name">PlantAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        balance <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span>        user_obj <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            list2 <span class="token operator">=</span> r6<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            list2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>            list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>                list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> x <span class="token keyword">in</span> list3<span class="token punctuation">:</span>                    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> x<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> k <span class="token operator">==</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">:</span>                            total <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                            r6<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> total<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            r6<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        user_obj<span class="token punctuation">.</span>update<span class="token punctuation">(</span>balance<span class="token operator">=</span>user_obj<span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">+</span> balance<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 工厂模式  支付</span><span class="token keyword">class</span> <span class="token class-name">PlantPayAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># 充值地址或者二维码</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        why <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pay_method"</span><span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> plant<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_pay<span class="token punctuation">(</span>why<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>pay_url<span class="token punctuation">.</span>pay<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 回调地址 获取用户详细信息</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        details <span class="token operator">=</span> plant<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_pay<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"details"</span><span class="token punctuation">:</span> details<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 获取余额</span><span class="token keyword">class</span> <span class="token class-name">BalanceAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"balance"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>balance<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="urls-py-路由"><a href="#urls-py-路由" class="headerlink" title="urls.py 路由"></a>urls.py 路由</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># path('balance/', balance),</span>    path<span class="token punctuation">(</span><span class="token string">'balance/'</span><span class="token punctuation">,</span> BalanceAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 获取余额</span>    path<span class="token punctuation">(</span><span class="token string">'pay/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 工厂模式 支付</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 阿里回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># wx 验证地址</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PlantPayAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># pal回调地址</span>    path<span class="token punctuation">(</span><span class="token string">'plant/'</span><span class="token punctuation">,</span> PlantAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 普通充值接口</span><span class="token punctuation">]</span></code></pre><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="wallet-vue-前端页面展示"><a href="#wallet-vue-前端页面展示" class="headerlink" title="wallet.vue  前端页面展示"></a>wallet.vue  前端页面展示</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout id<span class="token operator">=</span><span class="token string">"components-layout-demo-custom-trigger"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider <span class="token operator">:</span>trigger<span class="token operator">=</span><span class="token string">"null"</span> collapsible<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>leftmenu <span class="token operator">:</span>menu_number<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">-</span>sider<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的钱包<span class="token operator">--</span><span class="token operator">-</span>余额 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> balance <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"() => (modal2Visible = true)"</span><span class="token operator">></span>            充值          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>modal            v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"modal2Visible"</span>            title<span class="token operator">=</span><span class="token string">"Vertically centered modal dialog"</span>            centered            @ok<span class="token operator">=</span><span class="token string">"() => (modal2Visible = false)"</span>          <span class="token operator">></span>            充值金额            <span class="token operator">&lt;</span>a<span class="token operator">-</span>input<span class="token operator">-</span>number              <span class="token operator">:</span>formatter<span class="token operator">=</span><span class="token string">"value => `$ $&#123;value&#125;`.replace(/\B(?=(\d&#123;3&#125;)+(?!\d))/g, ',')"</span>              <span class="token operator">:</span>parser<span class="token operator">=</span><span class="token string">"value => value.replace(/\$\s?|(,*)/g, '')"</span>              @change<span class="token operator">=</span><span class="token string">"onChange"</span>            <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"postPlant"</span><span class="token operator">></span>普通充值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            选择支付            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/支付宝.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(1)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/微信.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(2)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8000/static/pay.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> @click<span class="token operator">=</span><span class="token string">"postBalance(3)"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"'http://127.0.0.1:8000/static/we_pay/' + we_img"</span> alt<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"we_img"</span> title<span class="token operator">=</span><span class="token string">"微信扫码"</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>modal<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>我的优惠券<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//导入组件</span><span class="token keyword">import</span> leftmenu <span class="token keyword">from</span> <span class="token string">'./leftmenu.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> staff_service <span class="token keyword">from</span> <span class="token string">'./staff_service.vue'</span><span class="token punctuation">;</span><span class="token comment">//导入跨域</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getBalance<span class="token punctuation">,</span> getWxBack<span class="token punctuation">,</span> postPlant<span class="token punctuation">,</span> postRecharge<span class="token punctuation">,</span> postWxBack<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      balance<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      modal2Visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      total_amount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      we_img<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//注册组件标签</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'staff_service'</span><span class="token operator">:</span> staff_service<span class="token punctuation">,</span>    <span class="token string">'leftmenu'</span><span class="token operator">:</span> leftmenu<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">postPlant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        balance<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token function">postPlant</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modal2Visible <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//获取余额</span>    <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(res)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> res<span class="token punctuation">.</span>balance      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//跳转支付</span>    <span class="token function">postBalance</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postBalance'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        total_amount<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total_amount<span class="token punctuation">,</span>        pay_method<span class="token operator">:</span> value      <span class="token punctuation">&#125;</span>      <span class="token function">postRecharge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment">// this.$router.push(res.data.pay_url)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>pay_url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>we_img <span class="token operator">=</span> res<span class="token punctuation">.</span>img        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger <span class="token punctuation">&#123;</span>  font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>  line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>  padding<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>  transition<span class="token operator">:</span> color <span class="token number">0.3</span>s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>trigger<span class="token operator">:</span>hover <span class="token punctuation">&#123;</span>  color<span class="token operator">:</span> #<span class="token number">1890</span>ff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#components<span class="token operator">-</span>layout<span class="token operator">-</span>demo<span class="token operator">-</span>custom<span class="token operator">-</span>trigger <span class="token punctuation">.</span>logo <span class="token punctuation">&#123;</span>  height<span class="token operator">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>  background<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  margin<span class="token operator">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="apis-js-访问接口"><a href="#apis-js-访问接口" class="headerlink" title="apis.js  访问接口"></a>apis.js  访问接口</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//获取用户余额</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getBalance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/balance/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 三方的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postRecharge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/pay/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 充值接口 自定义的</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">postPlant</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/pay/plant/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">// 查看微信支付是否完成</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getWxBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/pay/wx_back/"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span></code></pre><h2 id="index-js-配置路由"><a href="#index-js-配置路由" class="headerlink" title="index.js  配置路由"></a>index.js  配置路由</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>path<span class="token operator">:</span> <span class="token string">'/wallet'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"余额"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> wallet<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><img src="https://img-blog.csdnimg.cn/20201228164108714.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总体来说是没有难度的  大家要细心  注意配置文件以及秘钥 这里就全体跑通服务了</p><p>大家需要多看官方文档</p><p>支付宝沙箱是不稳定的，大家需要注意</p><p>微信我们这里使用的是二维码支付，大家也可以使用别的进行支付，没有回调地址，我们支付完成后要进行验证</p><p>paypal是国际通用的  大家要进行实时汇率转换 我这里是写死的 注意</p><p>我们这里还可以进行拓展 例如充值排行榜和优惠券 稍后带来</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
          <category> 工厂模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
            <tag> 微信支付 </tag>
            
            <tag> 沙箱支付 </tag>
            
            <tag> 支付宝支付 </tag>
            
            <tag> PayPal支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django+vue基于websocket人工客服系统打造</title>
      <link href="django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E9%80%A0/"/>
      <url>django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E4%BA%BA%E5%B7%A5%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wyx6.top/2020/12/23/django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/?t=1608730074702">websocket已经讲过了有兴趣的可以戳这里</a></p><p>今天我们要做的就是基于websocket实时人工客服，先来了解一下机制</p><h1 id="WebSocket-机制"><a href="#WebSocket-机制" class="headerlink" title="WebSocket 机制"></a>WebSocket 机制</h1><p>WebSocket 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在 TCP 之上，同 HTTP 一样通过 TCP 来传输数据，但是它和 HTTP 最大不同是：</p><ul><li>WebSocket 是一种双向通信协议，在建立连接后，WebSocket 服务器和 Browser/Client Agent 都能主动的向对方发送或接收数据，就像 Socket 一样；</li><li>WebSocket 需要类似 TCP 的客户端和服务器端通过握手连接，连接成功后才能相互通信。</li><li><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tV2ViU29ja2V0L2ltZzAwMi5qcGc?x-oss-process=image/format,png" alt="图 2.WebSocket 请求响应客户端服务器交互图" loading="lazy"></li></ul><p>那我们知道可为什么要使用它了吧</p><h1 id="django后端接口"><a href="#django后端接口" class="headerlink" title="django后端接口"></a>django后端接口</h1><h2 id="表的设计"><a href="#表的设计" class="headerlink" title="表的设计"></a>表的设计</h2><p><img src="https://img-blog.csdnimg.cn/20201223200058535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 聊天表</span><span class="token keyword">class</span> <span class="token class-name">Chat</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_id_a <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    user_id_b <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        index_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id_a'</span><span class="token punctuation">,</span> <span class="token string">'user_id_b'</span><span class="token punctuation">]</span>        unique_together <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'user_id_a'</span><span class="token punctuation">,</span> <span class="token string">'user_id_b'</span><span class="token punctuation">]</span>        <span class="token comment"># 联合索引要这样写入！！！！！！！！！</span>        db_table <span class="token operator">=</span> <span class="token string">'聊天表'</span><span class="token comment"># 消息表</span><span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    message <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">132</span><span class="token punctuation">)</span>    chat <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Chat<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">'消息表'</span></code></pre><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 接收前端信息</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">reception_socket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> message <span class="token keyword">in</span> request<span class="token punctuation">.</span>websocket<span class="token punctuation">:</span>            input_text <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            username <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>            uid <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>            input_text <span class="token operator">=</span> input_text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"inputText"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                chat <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>message<span class="token operator">=</span>input_text<span class="token punctuation">,</span> chat<span class="token operator">=</span>chat<span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                chat_id <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>message<span class="token operator">=</span>input_text<span class="token punctuation">,</span> chat<span class="token operator">=</span>chat_id<span class="token punctuation">,</span> name<span class="token operator">=</span>username<span class="token punctuation">)</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment"># 主动推送消息</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">send_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    uid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 向前端发送时间</span>                        <span class="token keyword">try</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> Chat<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user_id_a<span class="token operator">=</span>uid<span class="token punctuation">,</span> user_id_b<span class="token operator">=</span><span class="token number">998</span><span class="token punctuation">)</span>                ser <span class="token operator">=</span> MessageModelSerializer<span class="token punctuation">(</span>Message<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>chat_id<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>urls.py</p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">from django.urls import path, includefrom .views import *urlpatterns &#x3D; [    path(&#39;reception_socket&#x2F;&#39;, reception_socket),    # 客服系统接收前端信息    path(&#39;send_websocket&#x2F;&#39;, send_websocket),  #客服发送消息]</code></pre><h1 id="VUE前端"><a href="#VUE前端" class="headerlink" title="VUE前端"></a>VUE前端</h1><h2 id="客户页面-staff-service-vue"><a href="#客户页面-staff-service-vue" class="headerlink" title="客户页面  staff_service.vue"></a>客户页面  staff_service.vue</h2><p>我这里封装为组件了 你也可以给个路由成为一个单独的页面</p><p><img src="https://img-blog.csdnimg.cn/20201223201100165.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"showDrawer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"plus"</span><span class="token operator">/</span><span class="token operator">></span>        人工客服      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>drawer        title<span class="token operator">=</span><span class="token string">"翔翔客服带给您最好的体验"</span>        <span class="token operator">:</span>width<span class="token operator">=</span><span class="token string">"720"</span>        <span class="token operator">:</span>visible<span class="token operator">=</span><span class="token string">"visible"</span>        <span class="token operator">:</span>body<span class="token operator">-</span>style<span class="token operator">=</span><span class="token string">"&#123; paddingBottom: '80px' &#125;"</span>        @close<span class="token operator">=</span><span class="token string">"onClose(false)"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in message"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>              <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>form <span class="token operator">:</span>form<span class="token operator">=</span><span class="token string">"form"</span> layout<span class="token operator">=</span><span class="token string">"vertical"</span> hide<span class="token operator">-</span>required<span class="token operator">-</span>mark<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token operator">:</span>span<span class="token operator">=</span><span class="token string">"24"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"Description"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a<span class="token operator">-</span>textarea                  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputText"</span>                  <span class="token operator">:</span>rows<span class="token operator">=</span><span class="token string">"4"</span>                  placeholder<span class="token operator">=</span><span class="token string">"请输入问题描述"</span>                <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>div          <span class="token operator">:</span>style<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>          position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>          right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>          borderTop<span class="token operator">:</span> <span class="token string">'1px solid #e9e9e9'</span><span class="token punctuation">,</span>          padding<span class="token operator">:</span> <span class="token string">'10px 16px'</span><span class="token punctuation">,</span>          background<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>          textAlign<span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>          zIndex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>"        <span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123; marginRight: '8px' &#125;"</span> @click<span class="token operator">=</span><span class="token string">"onClose(false)"</span><span class="token operator">></span>            Cancel          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"onClose(true)"</span><span class="token operator">></span>            Submit          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>drawer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">'js-md5'</span><span class="token punctuation">;</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">"echarts"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"staff_service"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      form<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$form<span class="token punctuation">.</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      inputText<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      uid<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">showDrawer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token parameter">ok</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> ok<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">//判断浏览器是否支持websocket</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//生成websocket链接</span>          <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/reception_socket/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//发送链接请求</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span> _this<span class="token punctuation">.</span>username<span class="token punctuation">,</span> inputText<span class="token operator">:</span> _this<span class="token punctuation">.</span>inputText<span class="token punctuation">,</span> uid<span class="token operator">:</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//发送消息</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将获取信息打印</span>            <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token comment">// alert(received_msg);</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//捕获断开链接</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/send_websocket/?uid="</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> data2        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span>message <span class="token operator">=</span> data        <span class="token comment">// data = JSON.parse(data)</span>        <span class="token comment">// console.log(data[0])</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="客服页面service-vue"><a href="#客服页面service-vue" class="headerlink" title="客服页面service.vue"></a>客服页面service.vue</h2><p>需要设置路由 客服是一个单独的页面</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"showDrawer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"plus"</span><span class="token operator">/</span><span class="token operator">></span>        人工客服      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>drawer        title<span class="token operator">=</span><span class="token string">"翔翔客服带给您最好的体验"</span>        <span class="token operator">:</span>width<span class="token operator">=</span><span class="token string">"720"</span>        <span class="token operator">:</span>visible<span class="token operator">=</span><span class="token string">"visible"</span>        <span class="token operator">:</span>body<span class="token operator">-</span>style<span class="token operator">=</span><span class="token string">"&#123; paddingBottom: '80px' &#125;"</span>        @close<span class="token operator">=</span><span class="token string">"onClose(false)"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>tr v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in message"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>              <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>form <span class="token operator">:</span>form<span class="token operator">=</span><span class="token string">"form"</span> layout<span class="token operator">=</span><span class="token string">"vertical"</span> hide<span class="token operator">-</span>required<span class="token operator">-</span>mark<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>row <span class="token operator">:</span>gutter<span class="token operator">=</span><span class="token string">"16"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a<span class="token operator">-</span>col <span class="token operator">:</span>span<span class="token operator">=</span><span class="token string">"24"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"Description"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a<span class="token operator">-</span>textarea                  v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputText"</span>                  <span class="token operator">:</span>rows<span class="token operator">=</span><span class="token string">"4"</span>                  placeholder<span class="token operator">=</span><span class="token string">"请输入问题描述"</span>                <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>col<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>row<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">></span>        <span class="token operator">&lt;</span>div          <span class="token operator">:</span>style<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>          position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>          right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>          borderTop<span class="token operator">:</span> <span class="token string">'1px solid #e9e9e9'</span><span class="token punctuation">,</span>          padding<span class="token operator">:</span> <span class="token string">'10px 16px'</span><span class="token punctuation">,</span>          background<span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>          textAlign<span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>          zIndex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>"        <span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123; marginRight: '8px' &#125;"</span> @click<span class="token operator">=</span><span class="token string">"onClose(false)"</span><span class="token operator">></span>            Cancel          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"onClose(true)"</span><span class="token operator">></span>            Submit          <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>drawer<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">'js-md5'</span><span class="token punctuation">;</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">"echarts"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"staff_service"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      form<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$form<span class="token punctuation">.</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      inputText<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      uid<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">showDrawer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token parameter">ok</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> ok<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment">//判断浏览器是否支持websocket</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//生成websocket链接</span>          <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/reception_socket/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//发送链接请求</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span> <span class="token string">"客服"</span><span class="token punctuation">,</span> inputText<span class="token operator">:</span> _this<span class="token punctuation">.</span>inputText<span class="token punctuation">,</span> uid<span class="token operator">:</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//发送消息</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将获取信息打印</span>            <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token comment">// alert(received_msg);</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//捕获断开链接</span>          ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/send_websocket/?uid="</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> data2        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        _this<span class="token punctuation">.</span>message <span class="token operator">=</span> data        <span class="token comment">// data = JSON.parse(data)</span>        <span class="token comment">// console.log(data[0])</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://img-blog.csdnimg.cn/20201223201913770.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>ok 今天的学习就到这里了</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django+vue基于websocket创造实时ECharts股票图</title>
      <link href="django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/"/>
      <url>django-vue%E5%9F%BA%E4%BA%8Ewebsocket%E5%88%9B%E9%80%A0%E5%AE%9E%E6%97%B6ECharts%E8%82%A1%E7%A5%A8%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一-、什么是Websocket"><a href="#一-、什么是Websocket" class="headerlink" title="一 、什么是Websocket"></a>一 、<a href="https://baike.baidu.com/item/WebSocket/1953845?fr=aladdin">什么是Websocket</a></h1><p>WebSocket是一种在单个TCP连接上进行全双工通信的协议</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</p><p>现在，很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p>而比较新的技术去做轮询的效果是Comet。这种技术虽然可以双向通信，但依然需要反复发出请求。而且在Comet中，普遍采用的长链接，也会消耗服务器资源。</p><p>在这种情况下，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯</p><h1 id="websocket作用及意义"><a href="#websocket作用及意义" class="headerlink" title="websocket作用及意义"></a>websocket作用及意义</h1><p>Browser已经支持http协议，为什么还要开发一种新的WebSocket协议呢？我们知道http协议是一种单向的网络协议，在建立连接后，它只允许Browser/UA（UserAgent）向WebServer发出请求资源后，WebServer才能返回相应的数据。而WebServer不能主动的推送数据给Browser/UA，当初这么设计http协议也是有原因的，假设WebServer能主动的推送数据给Browser/UA，那Browser/UA就太容易受到攻击，一些广告商也会主动的把一些广告信息在不经意间强行的传输给客户端，这不能不说是一个灾难。那么单向的http协议给现在的网站或Web应用程序开发带来了哪些问题呢？</p><p>让我们来看一个案例，现在假设我们想开发一个基于Web的应用程序去获取当前Web<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">服务器</a>的实时数据，例如股票的实时行情，火车票的剩余票数等等，这就需要Browser/UA与WebServer端之间反复的进行http通信，Browser不断的发送Get请求，去获取当前的实时数据。下面介绍几种常见的方式：</p><h1 id="二、什么是ECharts"><a href="#二、什么是ECharts" class="headerlink" title="二、什么是ECharts"></a>二、<a href="https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts">什么是ECharts</a></h1><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>丰富的可视化类型</li><li>多种数据格式无需转换直接使用</li><li>千万数据的前端展现</li><li>移动端优化</li><li>多渲染方案，跨平台使用！</li><li>深度的交互式数据探索</li><li>多维数据的支持以及丰富的视觉编码手段</li><li>动态数据</li><li>绚丽的特效</li><li>通过 GL 实现更多更强大绚丽的三维可视化</li><li>无障碍访问（4.0+）</li></ol><h1 id="三、Django实现Websocket"><a href="#三、Django实现Websocket" class="headerlink" title="三、Django实现Websocket"></a>三、Django实现Websocket</h1><p><strong>django实现websocket大致上有两种方式，一种channels，一种是dwebsocket。channels依赖于redis，twisted等，相比之下使用dwebsocket要更为方便一些</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#dwebsocket有两种装饰器：require_websocket和accept_websocekt，使用require_websocket装饰器会导致视图函数无法接收导致正常的http请求，一般情况使用accept_websocket方式就可以了，</span><span class="token comment"># </span><span class="token comment"># dwebsocket的一些内置方法：</span><span class="token comment"># </span><span class="token comment"># request.is_websocket（）：判断请求是否是websocket方式，是返回true，否则返回false</span><span class="token comment"># request.websocket： 当请求为websocket的时候，会在request中增加一个websocket属性，</span><span class="token comment"># WebSocket.wait（） 返回客户端发送的一条消息，没有收到消息则会导致阻塞</span><span class="token comment"># WebSocket.read（） 和wait一样可以接受返回的消息，只是这种是非阻塞的，没有消息返回None</span><span class="token comment"># WebSocket.count_messages（）返回消息的数量</span><span class="token comment"># WebSocket.has_messages（）返回是否有新的消息过来</span><span class="token comment"># WebSocket.send（message）像客户端发送消息，message为byte类型</span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-python" data-language="python"><code class="language-python">pip install dwebsocket</code></pre><h2 id="dwebsocket配置"><a href="#dwebsocket配置" class="headerlink" title="dwebsocket配置"></a>dwebsocket配置</h2><pre class="language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'dwebsocket'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">MIDDLEWARE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'dwebsocket.middleware.WebSocketMiddleware'</span><span class="token punctuation">,</span>    <span class="token comment"># 为所有的URL提供websocket，如果只是单独的视图需要可以不选</span><span class="token punctuation">]</span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>案例 根据自己的情况进行修改</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> dwebsocket<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> accept_websocket<span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">test_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定时推送 无限循环</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">## 每隔5秒发送一次</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"发送的内容"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h2><ol><li><p>首先获取数据  存储到mongodb</p><p>data_test.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClient<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimehost <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token comment"># client = MongoClient(host, 27017)  # 建立客户端对象</span><span class="token comment"># db = client.mydb  # 连接mydb数据库，没有则自动创建</span><span class="token comment"># myset = db.testset  # 使用test_set集合，没有则自动创建</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">27017</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'test3'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> db<span class="token punctuation">.</span>persons<span class="token comment"># 在PyMongo 3.x版本后，官方推荐使用insert_one(),该方法返回的不再是单纯的_id值，我们需要执行result.inserted_id查看 _id 值</span>ress <span class="token operator">=</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 查询集合中age是20的数据</span><span class="token comment"># res = p.find(&#123;'age':&#123;'$gt':20&#125;&#125;)  # 查询集合中age大于20的数据</span><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">'https://data.gtimg.cn/flashdata/hushen/latest/daily/sz000002.js?maxage=43201&amp;visitDstTime=1'</span><span class="token punctuation">)</span>  <span class="token comment"># 向get中传入一个网址</span><span class="token comment"># type(res)  # 响应对象lass 'requests.models.Response'></span><span class="token comment"># print(res.status_code)  # 响应码</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># print(res.text.split("\n"))</span><span class="token keyword">def</span> <span class="token function">add_stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        b<span class="token punctuation">[</span><span class="token string">"_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p3"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"p4"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token string">"day"</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        p<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li><li><p>在视图中views.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 今日股市</span><span class="token decorator annotation punctuation">@accept_websocket</span><span class="token keyword">def</span> <span class="token function">test_websocket</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_websocket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment"># [&#123;'_id': '200729', 'p1': '26.71', 'p2': '27.11', 'p3': '27.14', 'p4': '26.51', 'day': '926894'&#125;]</span>            request<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>            add_stock<span class="token punctuation">(</span><span class="token punctuation">)</span>            inform_user<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 向前端发送时间</span></code></pre></li><li><p>路由urls.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'websocketlink/'</span><span class="token punctuation">,</span> test_websocket<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># websocket常连接实时跟新</span><span class="token punctuation">]</span></code></pre></li></ol><h2 id="四、前端Vue"><a href="#四、前端Vue" class="headerlink" title="四、前端Vue"></a>四、前端Vue</h2><p><strong>事例</strong> </p><p>因为我们是实时更新 所以需要写在钩子函数中 <a href="">关于vue生命周期点击查看</a></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment">//判断浏览器是否支持websocket</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//生成websocket链接</span>    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/send_websocket/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//发送链接请求</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//发送消息</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//将获取信息打印</span>      <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token comment">// alert(received_msg);</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//捕获断开链接</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>statistics.vue</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1 align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>今日股票<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 为 ECharts 准备一个具备大小（宽高）的 <span class="token constant">DOM</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"main"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"&#123;width: '2000px',height:'600px'&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getStatistics<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"statistics"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> data      <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">let</span> p_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token function">getStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        data <span class="token operator">=</span> res<span class="token punctuation">.</span>data        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          id_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span>          p_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span>          <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              text<span class="token operator">:</span> <span class="token string">'今日股市'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// data: id_list</span>              data<span class="token operator">:</span> id_list            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>              name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>              type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>              data<span class="token operator">:</span> p_list              <span class="token comment">// data: pr_list</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id_list<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// this.main()</span>    <span class="token keyword">var</span> ed2020 <span class="token operator">=</span> <span class="token string">"2020"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'price=500&amp;goodid=3,1'</span> <span class="token operator">+</span> ed2020<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//判断浏览器是否支持websocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"WebSocket"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成websocket链接</span>      <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8000/user/websocketlink/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//发送链接请求</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//发送消息</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将获取信息打印</span>        <span class="token keyword">var</span> received_msg <span class="token operator">=</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">var</span> data        <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p1_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p2_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p3_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> p4_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>received_msg<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          id_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_id<span class="token punctuation">)</span>          p1_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span>          p2_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p2<span class="token punctuation">)</span>          p3_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p3<span class="token punctuation">)</span>          p4_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p4<span class="token punctuation">)</span>          <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              text<span class="token operator">:</span> <span class="token string">'今日股市'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// data: id_list</span>              data<span class="token operator">:</span> id_list            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p1_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p2_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p3_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'每股成交额'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> p4_list                <span class="token comment">// data: pr_list</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//捕获断开链接</span>      ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"链接已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://img-blog.csdnimg.cn/20201223194549725.gif#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>ok搞定收工</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
            <tag> websocket </tag>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高阶函数详解</title>
      <link href="python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Python中，变量可以指向函数</p><p>函数名也是变量</p><p>既然变量可以指向函数，<br>函数的参数能接收变量，</p><p><strong>&lt;&lt;&lt;那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。&gt;&gt;&gt;</strong></p><h1 id="map-function-iterable-…"><a href="#map-function-iterable-…" class="headerlink" title="map(function, iterable, …)"></a>map(function, iterable, …)</h1><p>map(function, iterable, …)</p><p><strong>功能</strong><br><strong>将第一个参数 function 依次作用在参数可迭代对象中的每一个元素上，</strong><br><strong>返回包含每次 function 函数返回值的新迭代器</strong></p><p><strong>参数</strong><br><strong>function – 函数，有两个参数</strong><br><strong>iterable – 俩个可迭代对象（如：序列）</strong></p><p><strong>返回值</strong><br><strong>Python 3.x 返回迭代器</strong></p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def func(a,b):    return a * b     #map第一个实参写函数名                            #实参以最少的一方为准ss &#x3D; map(func,[1,2,3,4,5],[1,2,3,4,5,6,7,8,9])for i in ss:    #用迭代器输出    print(i)</code></pre><h1 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable[, initializer])"></a>reduce(function, iterable[, initializer])</h1><p>reduce(function, iterable[, initializer])</p><p><strong>功能</strong><br><strong>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：</strong><br><strong>用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，</strong><br><strong>得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</strong></p><p><strong>其效果类似：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</strong></p><p><strong>参数</strong><br><strong>function – 函数，有两个参数</strong><br><strong>iterable – 可迭代对象</strong><br><strong>initializer – 可选，初始参数</strong></p><p><strong>返回值</strong><br><strong>返回函数计算结果。</strong></p><p>俩种书写格式</p><pre class="language-none"><code class="language-none"># 1.0import functools# # 2.0# from functools import reduce#ret &#x3D; functools.reduce(lambda a,b:a*b, [11,22,33,44,55])print(ret)</code></pre><h1 id="filter-function-iterable"><a href="#filter-function-iterable" class="headerlink" title="filter(function, iterable)"></a>filter(function, iterable)</h1><p>filter(function, iterable)</p><p><strong>功能</strong><br><strong>该接收两个参数，第一个为函数，</strong><br><strong>第二个为序列，序列的每个元素作为参数传递给函数进行判断，</strong><br><strong>然后返回 True 或 False，最后将返回 True 的元素放到新迭代器对象中</strong></p><p><strong>参数</strong><br><strong>function – 判断函数</strong><br><strong>iterable – 可迭代对象（如：序列）</strong></p><p><strong>返回值</strong><br><strong>返回一个迭代器对象</strong></p><pre class="language-PYTHON" data-language="PYTHON"><code class="language-PYTHON">def func(n):    return n % 2 &#x3D;&#x3D; 0ret &#x3D; filter(func,range(1,101))print(list(ret))        #迭代器ret &#x3D; filter(lambda a: a % 3 &#x3D;&#x3D; 0 ,range(10))print(list(ret))</code></pre><h1 id="sorted-iterable-key-abs-reverse-False"><a href="#sorted-iterable-key-abs-reverse-False" class="headerlink" title="sorted(iterable, key=abs, reverse=False)"></a>sorted(iterable, key=abs, reverse=False)</h1><p>sorted(iterable, key=abs, reverse=False)<br>       #可迭代对象 #绝对值  #排序</p><p><strong>功能</strong><br><strong>对所有可迭代的对象进行排序操作</strong></p><p><strong>参数</strong><br><strong>iterable – 可迭代对象。</strong><br><strong>key – key指定的函数将作用于可迭代对象上的每一个元素，并根据key函数返回的结果进行排序</strong><br><strong>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）</strong></p><p><strong>返回值</strong><br><strong>返回重新排序的列表</strong></p><pre class="language-python" data-language="python"><code class="language-python">ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>绝对值ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span></code></pre><h1 id="lambda表达式-匿名函数"><a href="#lambda表达式-匿名函数" class="headerlink" title="lambda表达式(匿名函数)"></a>lambda表达式(匿名函数)</h1><p>匿名函数的另一个别称是“lambda表达式”</p><p>lambda表达式的语法：<br>       <strong>lambda argument_list: expression</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token comment"># lambda 格式：</span><span class="token comment"># lambda 形参:表达式或者返回值</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>       <span class="token comment">#有参无返</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>ff <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>a<span class="token operator">*</span>b          <span class="token comment">#有参有返</span><span class="token keyword">print</span><span class="token punctuation">(</span>ff<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>在函数内部，可以调用其他函数。</p><p>如果一个函数在内部调用自身本身，这个函数就是递归函数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 阶乘</span><span class="token comment"># 1！= 1*1</span><span class="token comment"># 2！= 1*2</span><span class="token comment"># 3！= 1*2*3</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment">#n * (n-1)</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#调用本身</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>斐波那契数列</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> func<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="返回函数-闭包"><a href="#返回函数-闭包" class="headerlink" title="返回函数 闭包"></a>返回函数 闭包</h1><p><strong>外层函数返回内层函数的引用 – 起到了让内层函数执行的目的</strong></p><pre class="language-none"><code class="language-none">#返回函数# def outer():#     def inner():#         return sum([i for i in range(1,101) if i % 2 &#x3D;&#x3D; 0])#     return inner()      #外层函数返回内层函数的引用 -- 起到了让内层函数执行的目的# print(outer())def outer(n):    def inner():        return sum([i for i in range(1,n+1) if i % 2 &#x3D;&#x3D; 0])    return inner      #外层函数返回内层函数的引用 -- 起到了让内层函数执行的目的print(outer(100)())</code></pre><h1 id="闭包是“返回函数”的一个典型应用"><a href="#闭包是“返回函数”的一个典型应用" class="headerlink" title="闭包是“返回函数”的一个典型应用"></a>闭包是“返回函数”的一个典型应用</h1><p><strong>闭包的定义：</strong><br><strong>在一个外函数中定义了一个内函数，    #函数的嵌套</strong><br><strong>内函数里运用了外函数的临时变量，    #嵌套作用域变量</strong><br><strong>并且外函数的返回值是内函数的引用。   #返回函数</strong><br><strong>这样就构成了一个闭包。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 闭包</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> a<span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> innerouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="偏函数由functools-partial创建"><a href="#偏函数由functools-partial创建" class="headerlink" title="偏函数由functools.partial创建"></a>偏函数由functools.partial创建</h1><p><strong>偏函数由functools.partial创建</strong></p><p><strong>它的作用就是，把一个函数的某些参数给固定住</strong><br><strong>（也就是设置默认值），</strong><br><strong>返回一个新的函数，调用这个新函数会更简单。</strong></p><p>#比较少用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b                <span class="token comment">#不可以给第一个值固定 否则报错</span>f <span class="token operator">=</span> partial<span class="token punctuation">(</span>func<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#传a的值</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高阶函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解python装饰器以及使用场景</title>
      <link href="%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">装饰器</a></h1><p>装饰器的底层实际就是闭包</p><pre><code>**在一个外函数中定义了一个内函数，    #函数的嵌套**、**内函数里运用了外函数的临时变量，    #嵌套作用域变量****并且外函数的返回值是内函数的引用。   #返回函数****这样就构成了一个闭包。**`</code></pre><p>装饰器是在函数调用之上的修饰 他的作用是在不改变原有项目代码的基础上增加一些额外的功能</p><p>装饰器能有助于检查某个人是否被授权去使用一个web应用的端点(endpoint)。它们被大量使用于Flask和Django web框架中。</p><p>日志是装饰器运用的另一个亮点</p><h1 id="装饰器格式"><a href="#装饰器格式" class="headerlink" title="装饰器格式"></a>装饰器格式</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能'</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">#现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'789'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello python'</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="有形参的装饰器"><a href="#有形参的装饰器" class="headerlink" title="有形参的装饰器"></a>有形参的装饰器</h1><pre class="language-none"><code class="language-none">def outer(func):        # @里有形参 这里必须跟    def inner(a,b):            #自上而下的执行        print(&#39;装饰器函数开始执行&#39;)        print(&#39;特殊校验功能开始执行&#39;)        # 这里也得跟形参        func(a,b)      #现在代表ff        print(&#39;装饰器函数结束执行&#39;)    return inner@outerdef ff(a,b):        #有形参    print(&#39;a+b&#x3D;&#39;,(a+b))ff(50,60)</code></pre><h1 id="有形参的装饰器-用不定长参数"><a href="#有形参的装饰器-用不定长参数" class="headerlink" title="有形参的装饰器  用不定长参数"></a>有形参的装饰器  用不定长参数</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数开始执行'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能开始执行'</span><span class="token punctuation">)</span>        <span class="token comment"># 这里也得跟形参</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>      <span class="token comment">#现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数结束执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#有形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a+b+d='</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span></code></pre><h1 id="多层装饰器"><a href="#多层装饰器" class="headerlink" title="多层装饰器"></a>多层装饰器</h1><p><strong>多层嵌套装饰器开始的时候，</strong><br><strong>装饰器自上而下开始，</strong><br><strong>然后执行函数操作，</strong><br><strong>结束时，装饰器自下而上结束</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数1开始执行'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能1开始执行'</span><span class="token punctuation">)</span>        <span class="token comment"># 这里也得跟形参</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># 现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数1结束执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">def</span> <span class="token function">outer2</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数2开始执行'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'特殊校验功能2开始执行'</span><span class="token punctuation">)</span>        <span class="token comment"># 这里也得跟形参</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># 现在代表ff</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数2结束执行'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@outer1</span><span class="token decorator annotation punctuation">@outer2</span><span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 有形参</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a+b+d='</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span>ff<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span></code></pre><h1 id="装饰器使用场景"><a href="#装饰器使用场景" class="headerlink" title="装饰器使用场景"></a><strong>装饰器使用场景</strong></h1><ul><li>计算运行时间</li><li><code>身份验证</code></li><li>写入日志</li><li>redis缓存</li></ul><h2 id="计算运行时间装饰器"><a href="#计算运行时间装饰器" class="headerlink" title="计算运行时间装饰器"></a>计算运行时间装饰器</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#timer(test1)  func=test1</span>    <span class="token keyword">def</span> <span class="token function">deco</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>      <span class="token comment">#run test1</span>        stop_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running time is %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> deco<span class="token decorator annotation punctuation">@timer</span>     <span class="token comment"># test1=timer(test1)</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in the test1"</span><span class="token punctuation">)</span>test1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><pre class="language-python" data-language="python"><code class="language-python">user<span class="token punctuation">,</span>passwd <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> user <span class="token operator">==</span> username <span class="token keyword">and</span> password <span class="token operator">==</span> passwd<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"User has passed authentication"</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> func<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span>   <span class="token comment">#这里执行func()相当于执行调用的函数如home()</span>            <span class="token keyword">return</span> res          <span class="token comment">#为了获得home()函数返回值，可以将执行结果赋值给res然后返回print(home())结果是"from home"而不是"None"了</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"非合法用户"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@auth</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"welcome to home page"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"from home"</span>home<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span></code></pre><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">import</span> traceback<span class="token keyword">def</span> <span class="token function">decoratore</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前运行方法"</span><span class="token punctuation">,</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span>`kwargs<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 这里应该调用log模块来记录到日志里</span>    <span class="token keyword">return</span> log<span class="token decorator annotation punctuation">@decoratore</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">''' 上面运行结果    当前运行方法 test    Traceback (most recent call last):      File "C:/Users/tom/Desktop/alipay_demo/aaa/t2.py", line 11, in log        return func(*args,`kwargs)      File "C:/Users/tom/Desktop/alipay_demo/aaa/t2.py", line 18, in test        int('a')    ValueError: invalid literal for int() with base 10: 'a'     22222    '''</span></code></pre><h2 id="redis缓存"><a href="#redis缓存" class="headerlink" title="redis缓存"></a>redis缓存</h2><pre class="language-python" data-language="python"><code class="language-python">第一步：查询redis缓存是否存在这个key第二步：如果存在这个key，不用去mysql中查询，直接从redis中取出数据即可（减轻了mysql压力）第三步：如果查询的key不存在，先到mysql中查询数据，让后设置到redis中，下次查询就有了</code></pre><p><strong>#1.5.3.1 2B青年实现</strong></p><ul><li>2B青年每一个需要使用缓存的数据，我都写一个方法获取数据，再写一个方法处理缓存。</li><li>若需要用到缓存的地方越来越多，每一个都需要这么写一套代码，代码冗余繁琐。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token keyword">import</span> time<span class="token comment"># 获取readed缓存</span><span class="token keyword">def</span> <span class="token function">get_readed_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 判断键是否存在</span>    key <span class="token operator">=</span> <span class="token string">'readed'</span>    <span class="token keyword">if</span> cache<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 不存在，则通过sql语句获取数据，并写入缓存,这里只是一个举例的sql语句</span>        data <span class="token operator">=</span> <span class="token string">"select name from tb"</span>        <span class="token comment"># 写入缓存</span>        cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">3600</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_readed_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_readed_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    test1<span class="token punctuation">(</span><span class="token punctuation">)</span>    test2<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>#1.5.3.2 NB青年</strong></p><ul><li>NB青年可以使用三级装饰器，在装饰器中判断key如果存在就从reids中获取，如果不存在就从数据库查询，并设置到reids中</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment"># 获取redis缓存的装饰器</span><span class="token keyword">def</span> <span class="token function">redis_cache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__redis_cache</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">warpper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> `kw<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cache<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 判断缓存是否存在</span>                data <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 若不存在则执行获取数据的方法</span>                <span class="token comment"># 注意返回数据的类型(字符串，数字，字典，列表均可)</span>                data <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> `kw<span class="token punctuation">)</span>   <span class="token comment"># 从数据库查询到数据设置到redis中</span>                cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>            <span class="token keyword">return</span> data        <span class="token keyword">return</span> warpper    <span class="token keyword">return</span> __redis_cache<span class="token comment">#键值为test，超时时间为60秒</span><span class="token decorator annotation punctuation">@redis_cache</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_test_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取Blog模型随机排序前3条数据</span>    <span class="token comment"># (Blog模型是我自己的模型，具体代码根据自己需求获取数据)</span>    <span class="token comment"># values执行结果，将返回一个字典。字典可以直接存入redis</span>    <span class="token comment"># data = Blog.objects.values('id', 'caption').order_by('?')[:3]</span>    data <span class="token operator">=</span> <span class="token string">'从数据库查询到了数据'</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_test_data<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 微信扫码支付流程</title>
      <link href="django%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/"/>
      <url>django%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h1 id="微信扫码支付"><a href="#微信扫码支付" class="headerlink" title="微信扫码支付"></a>微信扫码支付</h1><p>大家先去看<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_5&index=3">官方文档</a></p><p>或者看<a href="https://v3u.cn/a_id_182">教程</a></p><img src="https://img-blog.csdnimg.cn/20201228163627495.gif" alt="请添加图片描述" style="zoom:200%;"/ loading="lazy"><h2 id="支付接口！！！"><a href="#支付接口！！！" class="headerlink" title="支付接口！！！"></a>支付接口！！！</h2><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><p><strong>大家这里需要注意  我们生成的二维码为真实有效的 并不是虚拟货币 需要谨慎操作</strong></p><h3 id="wx-pay-py"><a href="#wx-pay-py" class="headerlink" title="wx_pay.py"></a>wx_pay.py</h3><p><a href="https://blog.csdn.net/weixin_45954124/article/details/112294468">点击查看</a></p><p>我们在调用支付接口时就要生成一个订单信息</p><p>微信支付生成二维码</p><h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><p>生成图片在项目文件下 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>wx_pay <span class="token keyword">import</span> get_sign<span class="token punctuation">,</span> trans_dict_to_xml<span class="token punctuation">,</span> trans_xml_to_dict<span class="token keyword">class</span> <span class="token class-name">Wx</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://api.mch.weixin.qq.com/pay/unifiedorder'</span>  <span class="token comment"># 微信扫码支付接口</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment">#</span>        total_fee <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 支付金额，单位分</span>        body <span class="token operator">=</span> <span class="token string">'123123'</span>  <span class="token comment"># 商品描述</span>        out_trade_no <span class="token operator">=</span> <span class="token string">'order_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>  <span class="token comment"># 订单编号</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'notify_url'</span><span class="token punctuation">:</span> <span class="token string">'http://wxpay.v3u.cn/wx_back/'</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span>            <span class="token string">'product_id'</span><span class="token punctuation">:</span> <span class="token string">'goods_%s'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 商品编号</span>            <span class="token string">'trade_type'</span><span class="token punctuation">:</span> <span class="token string">'NATIVE'</span><span class="token punctuation">,</span>  <span class="token comment"># 支付类型（扫码支付）</span>            <span class="token string">'spbill_create_ip'</span><span class="token punctuation">:</span> <span class="token string">'114.254.176.137'</span><span class="token punctuation">,</span>  <span class="token comment"># 发送请求服务器的IP地址</span>            <span class="token string">'total_fee'</span><span class="token punctuation">:</span> total_fee<span class="token punctuation">,</span>  <span class="token comment"># 订单总金额</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'body'</span><span class="token punctuation">:</span> body<span class="token punctuation">,</span>  <span class="token comment"># 商品描述</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        qrcode_name <span class="token operator">=</span> out_trade_no <span class="token operator">+</span> <span class="token string">'.png'</span>  <span class="token comment"># 支付二维码图片保存路径</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'return_code'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'SUCCESS'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果请求成功</span>            img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建支付二维码片</span>            img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./'</span> <span class="token operator">+</span> qrcode_name<span class="token punctuation">)</span>  <span class="token comment"># 保存支付二维码</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'img'</span><span class="token punctuation">:</span> qrcode_name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="验证支付地址"><a href="#验证支付地址" class="headerlink" title="验证支付地址"></a>验证支付地址</h2><p>微信需要我们去验证一下是否完成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WxBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 统一订单查询接口</span>        url <span class="token operator">=</span> <span class="token string">"https://api.mch.weixin.qq.com/pay/orderquery"</span>        out_trade_no <span class="token operator">=</span> <span class="token string">"order_235117"</span>  <span class="token comment"># 支付后的商户订单号</span>        key <span class="token operator">=</span> <span class="token string">'945bec9df3614cffb74e39aba8fbf7d7'</span>  <span class="token comment"># 商户api密钥</span>        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'appid'</span><span class="token punctuation">:</span> <span class="token string">'wx092344a76b9979ff'</span><span class="token punctuation">,</span>  <span class="token comment"># APPID</span>            <span class="token string">'mch_id'</span><span class="token punctuation">:</span> <span class="token string">'1602932608'</span><span class="token punctuation">,</span>  <span class="token comment"># 商户号</span>            <span class="token string">'out_trade_no'</span><span class="token punctuation">:</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment"># 订单编号</span>            <span class="token string">'nonce_str'</span><span class="token punctuation">:</span> <span class="token string">'ibuaiVcKdpRxkhJA'</span>  <span class="token comment"># 随机字符串</span>        <span class="token punctuation">&#125;</span>        sign <span class="token operator">=</span> get_sign<span class="token punctuation">(</span>params<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token comment"># 获取签名</span>        params<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> sign<span class="token punctuation">)</span>  <span class="token comment"># 添加签名到参数字典</span>        xml <span class="token operator">=</span> trans_dict_to_xml<span class="token punctuation">(</span>params<span class="token punctuation">)</span>  <span class="token comment"># 转换字典为XML</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>xml<span class="token punctuation">)</span>  <span class="token comment"># 以POST方式向微信公众平台服务器发起请求</span>        data_dict <span class="token operator">=</span> trans_xml_to_dict<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 将请求返回的数据转为字典</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data_dict<span class="token punctuation">)</span>        <span class="token comment"># 支付成功  订单未支付</span>        <span class="token keyword">if</span> data_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"trade_state_desc"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"支付成功"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'wx_pay/'</span><span class="token punctuation">,</span> Wx<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'wx_back/'</span><span class="token punctuation">,</span> WxBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django </category>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 支付宝沙箱支付流程</title>
      <link href="django%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/"/>
      <url>django%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h1><p>大家先去看<a href="https://opendocs.alipay.com/open/291/introduce">官方文档</a></p><p>或者看<a href="https://blog.csdn.net/weixin_45954124/article/details/109583431">我的教程</a></p><p><img src="https://img-blog.csdnimg.cn/20201228163628128.gif" alt="请添加图片描述" loading="lazy"></p><h2 id="settings-py配置"><a href="#settings-py配置" class="headerlink" title="settings.py配置"></a>settings.py配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 支付宝配置</span><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment"># 回调地址</span>RETURN_URL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/pay/ali_back/'</span>app_private_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/app_private_key'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay_public_key_string <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;/apps/payment/alipay_key/alipay_public'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    appid<span class="token operator">=</span><span class="token string">"2016102500759596"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 默认回调url</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span>  <span class="token comment"># RSA 或者 RSA2</span>    debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 默认False</span><span class="token punctuation">)</span></code></pre><h2 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><p>支付宝生成一个支付地址 跳转即可支付</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Ali</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        subject <span class="token operator">=</span> <span class="token string">"余额充值"</span>        <span class="token comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span>        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay<span class="token punctuation">(</span>            <span class="token comment"># 订单号</span>            out_trade_no<span class="token operator">=</span><span class="token string">"唯一不重复字符串"</span><span class="token punctuation">,</span>            <span class="token comment"># 金额</span>            total_amount<span class="token operator">=</span><span class="token string">"金额"</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span><span class="token string">'subject'</span><span class="token punctuation">,</span>            <span class="token comment"># 回调地址</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>            <span class="token comment"># notify_url="http://localhost:8000/pay/ali_back/"  # 可选, 不填则使用默认notify url</span>        <span class="token punctuation">)</span>        pay_url <span class="token operator">=</span> <span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span> <span class="token operator">+</span> order_string        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'pay_url'</span><span class="token punctuation">:</span> pay_url<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AliBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'ali_pay/'</span><span class="token punctuation">,</span> Ali<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'ali_back/'</span><span class="token punctuation">,</span> AliBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django </category>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 沙箱支付 </tag>
            
            <tag> 支付宝支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 跨境支付paypal流程</title>
      <link href="django%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98paypal/"/>
      <url>django%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98paypal/</url>
      
        <content type="html"><![CDATA[<h1 id="PayPal-国际支付"><a href="#PayPal-国际支付" class="headerlink" title="PayPal 国际支付"></a>PayPal 国际支付</h1><p><a href="https://github.com/paypal/PayPal-Python-SDK#configuration">官方文档</a></p><p><a href="https://v3u.cn/a_id_157">教程</a></p><img src="https://img-blog.csdnimg.cn/20201228163956125.gif" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><h2 id="支付接口"><a href="#支付接口" class="headerlink" title="支付接口"></a>支付接口</h2><p>我们在调用支付接口时就要生成一个订单信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayPal</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        paypalrestsdk<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"sandbox"</span><span class="token punctuation">,</span>  <span class="token comment"># sandbox代表沙盒</span>            <span class="token string">"client_id"</span><span class="token punctuation">:</span> <span class="token string">"AYXXU0zjJVvQMIEzG6NPLauHuiMJSAGN8wpOnu1T7gNCm4JMc4Nw7QcZSgKhSbHyUSHKnhZqQ-lsEm8l"</span><span class="token punctuation">,</span>            <span class="token string">"client_secret"</span><span class="token punctuation">:</span> <span class="token string">"ECa2PqKtQ-dD2NYO0eunVG4pXPNWCakssPuufcaT0ZtpdTTxx0G4nza78NM2D1w0w8jduWsmL98nA6rq"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"intent"</span><span class="token punctuation">:</span> <span class="token string">"sale"</span><span class="token punctuation">,</span>            <span class="token string">"payer"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"payment_method"</span><span class="token punctuation">:</span> <span class="token string">"paypal"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"redirect_urls"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"return_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8000/pay/pay_back/"</span><span class="token punctuation">,</span>  <span class="token comment"># 支付成功跳转页面</span>                <span class="token string">"cancel_url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000/pay/pay_back/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 取消支付页面</span>            <span class="token string">"transactions"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token comment"># "item_list": &#123;</span>                <span class="token comment">#     "items": [&#123;</span>                <span class="token comment">#         "name": str(obj.order_id),</span>                <span class="token comment">#     &#125;]&#125;,</span>                <span class="token string">"amount"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">"total"</span><span class="token punctuation">:</span> <span class="token number">5.00</span><span class="token punctuation">,</span>                    <span class="token string">"currency"</span><span class="token punctuation">:</span> <span class="token string">"USD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个订单测试"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> link <span class="token keyword">in</span> payment<span class="token punctuation">.</span>links<span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">.</span>rel <span class="token operator">==</span> <span class="token string">"approval_url"</span><span class="token punctuation">:</span>                    approval_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Redirect for approval: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>approval_url<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"url"</span><span class="token punctuation">:</span> approval_url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"支付失败"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>我们根据回调信息对订单表进行修改  例如支付状态修改</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayBack</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ?paymentId=PAYID-L7UHJGA6ED88532FU3155144&amp;token=EC-6AR335876U336883C&amp;PayerID=73S3E9HVESDX4</span>        paymentid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"paymentId"</span><span class="token punctuation">)</span>  <span class="token comment"># 订单id</span>        payerid <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"PayerID"</span><span class="token punctuation">)</span>  <span class="token comment"># 支付者id</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payerid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        payment <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span>find<span class="token punctuation">(</span>paymentid<span class="token punctuation">)</span>        <span class="token keyword">if</span> payment<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"payer_id"</span><span class="token punctuation">:</span> payerid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payment_history <span class="token operator">=</span> paypalrestsdk<span class="token punctuation">.</span>Payment<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment_history<span class="token punctuation">.</span>payments<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"支付成功"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payment<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token comment"># Error Hash</span>            <span class="token keyword">return</span> <span class="token string">"支付失败"</span></code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'pay_pay/'</span><span class="token punctuation">,</span> PayPal<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支付页面</span>    path<span class="token punctuation">(</span><span class="token string">'pay_back/'</span><span class="token punctuation">,</span> PayBack<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 回调地址</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django </category>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> paypal支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django全局限流策略以及中间件(redis mysql)和装饰器(redis mysql)的实现方式</title>
      <link href="%E9%99%90%E6%B5%81/"/>
      <url>%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们这里的限流是指访问接口过多会受到限制，大部分是指恶意访问  例如爬虫等</p><p>在django中我们可以使用django自带的限流策略，全局配置，自定义配置，都可以，</p><p>今天给同学们带来的是用中间件以及装饰器来进行的限流策略</p><h1 id="django自带限流"><a href="#django自带限流" class="headerlink" title="django自带限流"></a>django自带限流</h1><p>有兴趣的可以去看看<a href="https://blog.csdn.net/weixin_45954124/article/details/109319318">django的八大功能</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 安装包</span>pip install djangorestframework<span class="token operator">==</span><span class="token number">3.11</span><span class="token number">.1</span><span class="token comment"># apps进行注册</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'rest_framework'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment"># 进行全局配置</span>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment"># 限流（防爬虫）</span>    <span class="token string">'DEFAULT_THROTTLE_CLASSES'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'rest_framework.throttling.AnonRateThrottle'</span><span class="token punctuation">,</span>        <span class="token string">'rest_framework.throttling.UserRateThrottle'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 限流策略</span>    <span class="token string">'DEFAULT_THROTTLE_RATES'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'10000/hour'</span><span class="token punctuation">,</span>  <span class="token comment"># 认证用户每小时100次</span>        <span class="token string">'anon'</span><span class="token punctuation">:</span> <span class="token string">'3000/day'</span><span class="token punctuation">,</span>  <span class="token comment"># 未认证用户每天能访问3次</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h1 id="中间件redis实现方法–黑名单效果"><a href="#中间件redis实现方法–黑名单效果" class="headerlink" title="中间件redis实现方法–黑名单效果"></a>中间件redis实现方法–黑名单效果</h1><p>redis读写速度快  使用简单</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> BlackList<span class="token punctuation">,</span> User<span class="token punctuation">,</span> Access<span class="token punctuation">,</span> Role<span class="token keyword">import</span> redis<span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># redis</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 拦截请求</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/user/verification/'</span><span class="token punctuation">:</span>            x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>                ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>            <span class="token comment"># print(r.get(ip))</span>            <span class="token comment"># 判断是否访问过  访问过就等待 没有就存储</span>            <span class="token keyword">if</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>                r<span class="token punctuation">.</span>incrby<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                count <span class="token operator">=</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        user <span class="token operator">=</span> BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        time_now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>                        time_now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                        banned_time <span class="token operator">=</span> BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>banned_time                        banned_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                        <span class="token comment"># print((time_now - banned_time).seconds)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>time_now <span class="token operator">-</span> banned_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">:</span>                            BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"给你小子一次机会"</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"utils/mymidder--46"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"你完蛋了"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 存储ip</span>                r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># 设置过期时间60秒</span>                r<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span></code></pre><h1 id="中间件mysql实现代码"><a href="#中间件mysql实现代码" class="headerlink" title="中间件mysql实现代码"></a>中间件mysql实现代码</h1><p>增加了mysql读写次数 影响性能</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezone<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> BlackList<span class="token punctuation">,</span> User<span class="token punctuation">,</span> Access<span class="token punctuation">,</span> Role<span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/user/verification/'</span><span class="token punctuation">:</span>            x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>            <span class="token comment"># x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')</span>            <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>                ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>            <span class="token comment"># 获取当前时间</span>            time_now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 解析</span>            time_now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment"># 获取上一次请求时间</span>                start_time <span class="token operator">=</span> CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start_time                <span class="token comment"># 解析</span>                start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                <span class="token comment"># 计算当前时间减去 上一次请求时间  结果为秒</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>                <span class="token comment"># 如果小于等于60秒  就不能再发  过了60秒 就删除并重新创建</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment"># 删除过了时间的</span>                    CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 添加新时间</span>                    CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user/utils--76"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token comment"># 加入第一次操作没有 则添加</span>                CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span></code></pre><h1 id="redis装饰器实现"><a href="#redis装饰器实现" class="headerlink" title="redis装饰器实现"></a>redis装饰器实现</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> CurrentLimiting<span class="token punctuation">,</span> BlackListr <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>db<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token comment"># redis</span><span class="token keyword">def</span> <span class="token function">current_limiting_redis</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数开始执行'</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>            ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>incrby<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    BlackList<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span> username<span class="token operator">=</span>username<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user/utils--48"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"你完蛋了"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 存储ip</span>            r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 设置过期时间60秒</span>            r<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner</code></pre><p>在view中调用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 发送验证码</span><span class="token keyword">class</span> <span class="token class-name">VerificationAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@current_limiting_redis</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 生成随机验证码6位</span>        code <span class="token operator">=</span> <span class="token string">'%06d'</span> <span class="token operator">%</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>        <span class="token comment"># 存储到session</span>        uid <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>        <span class="token comment"># 调用钉钉接口 发送验证码</span>        dindin_post<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">:</span> uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h1 id="mysql装饰器实现"><a href="#mysql装饰器实现" class="headerlink" title="mysql装饰器实现"></a>mysql装饰器实现</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># mysql</span><span class="token keyword">import</span> os<span class="token keyword">import</span> django<span class="token keyword">import</span> datetime<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils <span class="token keyword">import</span> timezoneos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'mydjango.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">current_limiting_mysql</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># @里有形参 这里必须跟</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 自上而下的执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'装饰器函数开始执行'</span><span class="token punctuation">)</span>        x_forwarded_for <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x_forwarded_for<span class="token punctuation">:</span>            ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        time_now <span class="token operator">=</span> timezone<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>        time_now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            start_time <span class="token operator">=</span> CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start_time            start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time_now <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"我哥 过分了"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user/utils--76"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            CurrentLimiting<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner</code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 中间件 </tag>
            
            <tag> 限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下Django使用celery异步任务处理以及定时任务</title>
      <link href="celery%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E4%BB%A5%E5%8F%8A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>celery%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E4%BB%A5%E5%8F%8A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="celery配置与基本使用"><a href="#celery配置与基本使用" class="headerlink" title="celery配置与基本使用"></a>celery配置与基本使用</h1><h2 id="安装celery"><a href="#安装celery" class="headerlink" title="安装celery"></a>安装celery</h2><pre class="language-none"><code class="language-none">pip install celery&#x3D;&#x3D;5.0.0</code></pre><h2 id="新建celery-main-py"><a href="#新建celery-main-py" class="headerlink" title="新建celery/main.py"></a>新建<code>celery/main.py</code></h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># celery_task/main.py</span><span class="token keyword">import</span> os<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token comment"># 定义celery实例, 需要的参数, 1, 实例名, 2, 任务发布位置, 3, 结果保存位置</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'mycelery'</span><span class="token punctuation">,</span>             broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/14'</span><span class="token punctuation">,</span>  <span class="token comment"># 任务存放的地方 </span>             backend<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/15'</span><span class="token punctuation">)</span>  <span class="token comment"># 结果存放的地方</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</code></pre><h2 id="启动celery"><a href="#启动celery" class="headerlink" title="启动celery"></a>启动celery</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.启动celery'''</span><span class="token comment">#1.1 单进程启动celery</span>celery <span class="token operator">-</span>A main worker <span class="token operator">-</span>l INFO<span class="token comment">#1.2 celery管理</span>celery  multi start celery_test <span class="token operator">-</span>A celery_test <span class="token operator">-</span>l debug <span class="token operator">-</span><span class="token operator">-</span>autoscale<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">5</span>        <span class="token comment"># celery并发数：最多50个，最少5个</span>ps auxww<span class="token operator">|</span>grep <span class="token string">"celery worker"</span><span class="token operator">|</span>grep <span class="token operator">-</span>v grep<span class="token operator">|</span>awk <span class="token string">'&#123;print $2&#125;'</span><span class="token operator">|</span>xargs kill <span class="token operator">-</span><span class="token number">9</span>       <span class="token comment"># 关闭所有celery进程</span></code></pre><h1 id="在django项目中使用-celery"><a href="#在django项目中使用-celery" class="headerlink" title="在django项目中使用 celery"></a>在django项目中使用 celery</h1><p>1.在做celery异步任务和定时任务时，有些人使用django-celery+django-redis+celery+redis+django-celery-beat实现</p><p>2.但是这种实现方法和django结合过于紧密，不利于分布式部署</p><p>3.而且不同版本相结合,一旦不小心安装升级一个包，会导致各种报错</p><p>4.配置也比较繁琐，很多同学在使用时易出错</p><p><strong>2、安装相关包</strong></p><pre class="language-python" data-language="python"><code class="language-python">pip install Django<span class="token operator">==</span><span class="token number">2.2</span>pip install celery<span class="token operator">==</span><span class="token number">4.4</span><span class="token number">.7</span>pip install redis<span class="token operator">==</span><span class="token number">3.5</span><span class="token number">.3</span></code></pre><h3 id="1-2-celery基本使用"><a href="#1-2-celery基本使用" class="headerlink" title="1.2 celery基本使用"></a>1.2 celery基本使用</h3><p><strong>1、创建tasks.py文件进行验证</strong></p><p> tasks.py</p><p><strong>1、\</strong>**启动Celery Worker**<em>\</em>来开始监听并执行任务**</p><p>celery -A tasks worker –loglevel=info <em># tasks<strong>是</strong>tasks.py<strong>文件：必须在</strong>tasks.py**所在目录下执行</em></p><p><strong>2、调用任务：再打开两个终端，进行命令行模式，调用任务</strong></p><p>&gt;&gt;&gt; import tasks</p><p>&gt;&gt;&gt; import tasks</p><p>&gt;&gt;&gt; t2 = tasks.minus.delay(9,11)</p><p><strong>#**</strong>然后在另一个终端重复上面步骤执行**</p><p>&gt;&gt;&gt; t1 = tasks.add.delay(3,4)</p><p>&gt;&gt;&gt; t1.get() <em>#<strong>由于</strong>t2<strong>执行</strong>sleep<strong>了</strong>3s<strong>所以</strong>t1.get()**需要等待</em></p><p><strong>2、celery其他命令</strong></p><p>&gt;&gt;&gt; t.ready() <em>#<strong>返回</strong>true**证明可以执行，不必等待</em></p><p>&gt;&gt;&gt; t.get(timeout=1) <em>#<strong>如果</strong>1<strong>秒不返回结果就超时</strong>,**避免一直等待</em></p><p>&gt;&gt;&gt; t.get(propagate=False) <em>#**如果执行的代码错误只会打印错误信息</em></p><p>&gt;&gt;&gt; t.traceback <em>#打印异常详细结果</em></p><h3 id="1-2-在django项目中使用"><a href="#1-2-在django项目中使用" class="headerlink" title="1.2 在django项目中使用"></a>1.2 在django项目中使用</h3><p><strong>1、目录结构如下</strong></p><p><img src="https://img-blog.csdnimg.cn/20201209113505107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p><strong>2、opwf_project/celery_tasks文件夹</strong></p><p> celery.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token comment"># celery.py</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> django<span class="token comment"># 1.添加django项目根路径</span>CELERY_BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CELERY_BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../opwf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2.添加django环境</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">"DJANGO_SETTINGS_MODULE"</span><span class="token punctuation">,</span> <span class="token string">"opwf.settings"</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取配置</span><span class="token comment"># 3.celery基本配置</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'proj'</span><span class="token punctuation">,</span>             broker<span class="token operator">=</span><span class="token string">'redis://localhost:6379/14'</span><span class="token punctuation">,</span>             backend<span class="token operator">=</span><span class="token string">'redis://localhost:6379/15'</span><span class="token punctuation">,</span>             include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_tasks.tasks'</span><span class="token punctuation">,</span>                      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 4.实例化时可以添加下面这个属性</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span>    result_expires<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">,</span>  <span class="token comment"># 执行结果放到redis里，一个小时没人取就丢弃</span><span class="token punctuation">)</span><span class="token comment"># 5.配置定时任务：每5秒钟执行 调用一次celery_pro下tasks.py文件中的add函数</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'add-every-5-seconds'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.test_task_crontab'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token punctuation">,</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># 6.添加时区配置</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'UTC'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> tasks.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token comment"># -*- coding:utf8 -*-</span><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app  <span class="token comment"># 从当前目录导入app</span><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> CELERY_BASE_DIR<span class="token comment"># 1.test_task_crontab测试定时任务</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">test_task_crontab</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 添加django项目路径</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CELERY_BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../opwf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> utils<span class="token punctuation">.</span>rl_sms <span class="token keyword">import</span> test_crontab    res <span class="token operator">=</span> test_crontab<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token comment"># 2.测试异步发送邮件</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_sms_code</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mobile<span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CELERY_BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../opwf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 在方法中导包</span>    <span class="token keyword">from</span> utils<span class="token punctuation">.</span>rl_sms <span class="token keyword">import</span> send_message    <span class="token comment"># time.sleep(5)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 用 res 接收发送结果, 成功是:０，　失败是：－１</span>        res <span class="token operator">=</span> send_message<span class="token punctuation">(</span>mobile<span class="token punctuation">,</span> datas<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">'-1'</span>    <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token string">'-1'</span><span class="token punctuation">:</span>        <span class="token comment"># 如果发送结果是 -1  就重试.</span>        self<span class="token punctuation">.</span>retry<span class="token punctuation">(</span>countdown<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> exc<span class="token operator">=</span>Exception<span class="token punctuation">(</span><span class="token string">'短信发送失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>3、opwf_project/opwf/utils</strong></p><p> rl_sms.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># utils/rl_sms.py</span><span class="token keyword">from</span> ronglian_sms_sdk <span class="token keyword">import</span> SmsSDK<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> UseraccId <span class="token operator">=</span> <span class="token string">'8a216da8747ac98201749c0de38723b7'</span>accToken <span class="token operator">=</span> <span class="token string">'86072b540b4648229b27400414150ef2'</span>appId <span class="token operator">=</span> <span class="token string">'8a216da8747ac98201749c0de45123be'</span><span class="token keyword">def</span> <span class="token function">send_message</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'</span><span class="token punctuation">)</span>    sdk <span class="token operator">=</span> SmsSDK<span class="token punctuation">(</span>accId<span class="token punctuation">,</span> accToken<span class="token punctuation">,</span> appId<span class="token punctuation">)</span>    tid <span class="token operator">=</span> <span class="token string">'1'</span>  <span class="token comment"># 测试模板id为: 1. 内容为: 【云通讯】您的验证码是&#123;1&#125;，请于&#123;2&#125;分钟内正确输入。</span>    <span class="token comment"># mobile = '13303479527'</span>    <span class="token comment"># datas = ('666777', '5')  # 模板中的参数按照位置传递</span>    <span class="token comment"># resp = sdk.sendMessage(tid, phone, datas)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"##########################################"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行了这个方法 send_message'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">test_crontab</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'############### 执行test_crontab测试任务 #############'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'############### 邮件审批超时提醒 #############'</span><span class="token punctuation">)</span></code></pre><p><strong>4、在django项目中调用</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">handle_next_suborder_approve</span><span class="token punctuation">(</span>suborder_obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 函数内部导报</span>    <span class="token keyword">from</span> celery_task <span class="token keyword">import</span> tasks    <span class="token comment"># .delay()发送异步任务</span>    tasks<span class="token punctuation">.</span>send_sms_code<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">18538752511</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 通知审判者</span></code></pre><p><strong>5、执行命令</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">### 1.1 进入执行目录</span>cd opwf_project<span class="token comment">### 1.2 celery管理</span>celery <span class="token operator">-</span>A celery_tasks worker <span class="token operator">-</span>l INFO               <span class="token comment"># 单线程</span>celery multi start w1 w2 <span class="token operator">-</span>A celery_pro <span class="token operator">-</span>l info     <span class="token comment">#一次性启动w1,w2两个worker</span>celery <span class="token operator">-</span>A celery_pro status                        <span class="token comment">#查看当前有哪些worker在运行</span>celery multi stop w1 w2 <span class="token operator">-</span>A celery_pro              <span class="token comment">#停止w1,w2两个worker</span><span class="token comment"># 1.项目中启动celery worker</span>celery  multi start celery_tasks <span class="token operator">-</span>A celery_task <span class="token operator">-</span>l debug <span class="token operator">-</span><span class="token operator">-</span>autoscale<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span>      <span class="token comment"># celery并发数：最多50个，最少5个</span><span class="token comment"># 2.在项目中关闭celery worker</span>ps auxww<span class="token operator">|</span>grep <span class="token string">"celery worker"</span><span class="token operator">|</span>grep <span class="token operator">-</span>v grep<span class="token operator">|</span>awk <span class="token string">'&#123;print $2&#125;'</span><span class="token operator">|</span>xargs kill <span class="token operator">-</span><span class="token number">9</span>      <span class="token comment"># 关闭所有celery进程</span>```<span class="token comment">### 1.3 django_celery_beat管理</span><span class="token comment"># 1.普通测试启动celery beat</span>celery <span class="token operator">-</span>A celery_tasks beat <span class="token operator">-</span>l info<span class="token comment"># 2.在项目中后台启动celery beat</span>celery <span class="token operator">-</span>A celery_tasks beat <span class="token operator">-</span>l debug <span class="token operator">>></span> <span class="token operator">/</span>aaa<span class="token operator">/</span>Scheduler<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token comment"># 3.停止celery beat</span>ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep <span class="token operator">-</span>E <span class="token string">"celery -A celery_tests beat"</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v grep<span class="token operator">|</span> awk <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> xaA celery_tasks beat <span class="token operator">-</span>l info<span class="token comment"># 2.在项目中后台启动celery beat</span>celery <span class="token operator">-</span>A celery_tasks beat <span class="token operator">-</span>l debug <span class="token operator">>></span> <span class="token operator">/</span>aaa<span class="token operator">/</span>Scheduler<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token comment"># 3.停止celery beat</span>ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep <span class="token operator">-</span>E <span class="token string">"celery -A celery_tests beat"</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v grep<span class="token operator">|</span> awk <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> xa</code></pre><h1 id="celery实现定时推送"><a href="#celery实现定时推送" class="headerlink" title="celery实现定时推送"></a>celery实现定时推送</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><pre class="language-python" data-language="python"><code class="language-python">Django                  <span class="token number">2.2</span>django<span class="token operator">-</span>celery<span class="token operator">-</span>beat      <span class="token number">2.1</span><span class="token number">.0</span>celery                  <span class="token number">4.4</span><span class="token number">.7</span></code></pre><ul><li><h4 id="看看自己的环境"><a href="#看看自己的环境" class="headerlink" title="看看自己的环境"></a>看看自己的环境</h4><pre class="language-python" data-language="python"><code class="language-python">pip <span class="token builtin">list</span></code></pre></li><li><h5 id="卸载环境"><a href="#卸载环境" class="headerlink" title="卸载环境"></a>卸载环境</h5><pre class="language-python" data-language="python"><code class="language-python">pip uninstall celery<span class="token punctuation">(</span>“包名”<span class="token punctuation">)</span></code></pre></li><li><h5 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h5><pre class="language-python" data-language="python"><code class="language-python">pip install celery<span class="token operator">==</span><span class="token number">4.4</span><span class="token number">.7</span></code></pre></li></ul><h2 id="celery-定期任务中文手册"><a href="#celery-定期任务中文手册" class="headerlink" title="celery 定期任务中文手册"></a>celery 定期任务中文手册</h2><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;www.celerycn.io&#x2F;yong-hu-zhi-nan&#x2F;ding-qi-ren-wu-periodic-tasks</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>on_after_configure<span class="token punctuation">.</span>connect</span><span class="token keyword">def</span> <span class="token function">setup_periodic_tasks</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Calls test('hello') every 10 seconds.</span>    sender<span class="token punctuation">.</span>add_periodic_task<span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add every 10'</span><span class="token punctuation">)</span>    <span class="token comment"># Calls test('world') every 30 seconds</span>    sender<span class="token punctuation">.</span>add_periodic_task<span class="token punctuation">(</span><span class="token number">30.0</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> expires<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># Executes every Monday morning at 7:30 a.m.</span>    sender<span class="token punctuation">.</span>add_periodic_task<span class="token punctuation">(</span>        crontab<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> day_of_week<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        test<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">'Happy Mondays!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span></code></pre><h2 id="settings下缓存配置"><a href="#settings下缓存配置" class="headerlink" title="settings下缓存配置"></a>settings下缓存配置</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 缓存配置</span>CACHES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># django存缓默认位置,redis 0号库</span>    <span class="token comment"># default: 连接名称</span>    <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>        <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379/0"</span><span class="token punctuation">,</span>        <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment"># django session存 reidis 1 号库（现在基本不需要使用）</span>    <span class="token string">"session"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>        <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379/1"</span><span class="token punctuation">,</span>        <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h2 id="在项目中创建celery-task文件"><a href="#在项目中创建celery-task文件" class="headerlink" title="在项目中创建celery_task文件"></a>在项目中创建celery_task文件</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 目录结构</span><span class="token operator">-</span> celery_task    <span class="token operator">-</span> config<span class="token punctuation">.</span>py     <span class="token comment">#在config.py中编写配置代码</span>    <span class="token operator">-</span> main<span class="token punctuation">.</span>py       <span class="token comment">#在tasks.py中编写任务函数代码</span>    <span class="token operator">-</span> tasks<span class="token punctuation">.</span>py      <span class="token comment">#在main.py中调用任务,并实现定时任务功能</span></code></pre><h2 id="celery-task-tasks-py"><a href="#celery-task-tasks-py" class="headerlink" title="celery_task/tasks.py"></a>celery_task/tasks.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:use:"""</span><span class="token keyword">from</span> main <span class="token keyword">import</span> app<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y</code></pre><p>celery_task/config.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""author:翔翔date:2020-12-07use:配置celery"""</span><span class="token comment"># celery_task/main.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> celery <span class="token keyword">import</span> Celeryos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'opwf.settings'</span><span class="token punctuation">)</span><span class="token comment"># 定义celery实例, 需要的参数, 1, 实例名, 2, 任务发布位置, 3, 结果保存位置</span>app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">'mycelery'</span><span class="token punctuation">,</span>             broker<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/14'</span><span class="token punctuation">,</span>  <span class="token comment"># 任务存放的地方</span>             backend<span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/15'</span><span class="token punctuation">)</span>  <span class="token comment"># 结果存放的地方</span>CELERY_BASE_DIR <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CELERY_BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../opwf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="celery-task-main-py"><a href="#celery-task-main-py" class="headerlink" title="celery_task/main.py"></a>celery_task/main.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">from</span> config <span class="token keyword">import</span> app<span class="token punctuation">,</span> CELERY_BASE_DIR<span class="token keyword">from</span> tasks <span class="token keyword">import</span> test<span class="token triple-quoted-string string">"""'''1.启动celery'''#1.1 单进程启动celerycelery -A main worker -l INFO#1.2 celery管理celery  multi start celery_test -A celery_test -l debug --autoscale=50,5        # celery并发数：最多50个，最少5个ps auxww|grep "celery worker"|grep -v grep|awk '&#123;print $2&#125;'|xargs kill -9       # 关闭所有celery进程"""</span><span class="token comment"># celery项目中的所有导包地址, 都是以CELERY_BASE_DIR为基准设定.</span><span class="token comment"># 执行celery命令时, 也需要进入CELERY_BASE_DIR目录执行.</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send_sms_code</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>CELERY_BASE_DIR<span class="token punctuation">,</span> <span class="token string">'../opwf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># ['/home/worker/opwf_project/celery_task/../opwf'</span>        <span class="token comment"># 在方法中导包</span>        <span class="token keyword">from</span> utils<span class="token punctuation">.</span>celery_email <span class="token keyword">import</span> send_email_task        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 用 res 接收发送结果, 成功是:０，　失败是：－１</span>            res <span class="token operator">=</span> send_email_task<span class="token punctuation">(</span>username<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token string">'-1'</span>        <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token string">'-1'</span><span class="token punctuation">:</span>            <span class="token comment"># 如果发送结果是 -1  就重试.</span>            self<span class="token punctuation">.</span>retry<span class="token punctuation">(</span>countdown<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> exc<span class="token operator">=</span>Exception<span class="token punctuation">(</span><span class="token string">'邮件发送失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception  <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""执行下面两条命令即可让celery定时执行任务了 　　　　1、 启动一个worker：在celery_pro外层目录下执行　　　　　　　　celery -A main worker -l info　　　　2、 启动任务调度器 celery beat　　　　　　　　celery -A main beat -l info　　　　3、执行效果　　　　　　　　看到celery运行日志中每5秒回返回一次 add函数执行结果　"""</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>on_after_configure<span class="token punctuation">.</span>connect</span><span class="token keyword">def</span> <span class="token function">setup_periodic_tasks</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Calls test('hello') every 10 seconds.</span>    sender<span class="token punctuation">.</span>add_periodic_task<span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'add every 10'</span><span class="token punctuation">)</span><span class="token comment">#设置时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><h2 id="执行下面两条命令即可让celery定时执行任务了"><a href="#执行下面两条命令即可让celery定时执行任务了" class="headerlink" title="执行下面两条命令即可让celery定时执行任务了"></a>执行下面两条命令即可让celery定时执行任务了</h2><ul><li><h5 id="启动一个worker：在celery-pro外层目录下执行"><a href="#启动一个worker：在celery-pro外层目录下执行" class="headerlink" title="启动一个worker：在celery_pro外层目录下执行"></a>启动一个worker：在celery_pro外层目录下执行</h5><pre class="language-python" data-language="python"><code class="language-python">celery <span class="token operator">-</span>A main worker <span class="token operator">-</span>l info</code></pre></li><li><h5 id="启动任务调度器-celery-beat"><a href="#启动任务调度器-celery-beat" class="headerlink" title="启动任务调度器 celery beat"></a>启动任务调度器 celery beat</h5><pre class="language-python" data-language="python"><code class="language-python">celery <span class="token operator">-</span>A main beat <span class="token operator">-</span>l info</code></pre></li><li><p>执行效果</p><p>看到celery运行日志中每10秒回返回一次 函数执行结果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
            <tag> websocket </tag>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉-gitee三方登录(工厂模式)</title>
      <link href="%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/"/>
      <url>%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E9%92%89%E9%92%89gitee/</url>
      
        <content type="html"><![CDATA[<p>大家都使用过三方登录 例如（QQ、微信、微博）那我就带着大家学习一下三方登录，并且我们好引入工厂模式来进行，开始吧</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>首先我们简单介绍一下<strong>工厂模式</strong>。大家都知道有一造车知名企业，在疫情期间 ，竟然开始生产口罩</p><p>是什么原因呢！就是工厂模式所带来的好处 ，就是你给我什么  ，我就给你生产什么。</p><p>工厂收到钢铁，那就开始制造汽车 。收到针线 ，就开始制造口罩。</p><p><code>demo事例</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dingding</span><span class="token punctuation">:</span>    <span class="token comment"># 钉钉登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"钉钉登录"</span>    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'123'</span><span class="token keyword">class</span> <span class="token class-name">GitEe</span><span class="token punctuation">:</span>    <span class="token comment"># 码云登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"码云登录"</span>    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'456'</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>   <span class="token comment"># 静态方法无需实例化 直接调用</span>    <span class="token keyword">def</span> <span class="token function">product_login</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dingding"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Dingding<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span>demo1 <span class="token operator">=</span> SimpleFactory<span class="token punctuation">.</span>product_login<span class="token punctuation">(</span><span class="token string">'dingding'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>demo1<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 解密</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>hashers <span class="token keyword">import</span> check_password<span class="token punctuation">,</span> make_password<span class="token comment"># 返回HttpResponse</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment"># 解码</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>baseconv <span class="token keyword">import</span> base64<span class="token comment"># 返回Response</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">DingDing</span><span class="token punctuation">:</span>    <span class="token comment"># 钉钉登录类</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 时间戳</span>        timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        appSecret <span class="token operator">=</span> <span class="token string">'YCoNtgYLMDKNS9096KKrnDDazZ7IgJHtGiOA7Y0YvTB8c4tn2vRBvaj_GTIvMkHQ'</span>        <span class="token comment"># 构造签名</span>        signature <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>            hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>appSecret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> digestmod<span class="token operator">=</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 请求接口，换取钉钉用户名</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'tmp_auth_code'</span><span class="token punctuation">:</span> code<span class="token punctuation">&#125;</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature='</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>            signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;timestamp="</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;accessKey=dingoa2kslvfvtiaeic7wi"</span><span class="token punctuation">,</span>                            data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        appid <span class="token operator">=</span> <span class="token string">'dingoa2kslvfvtiaeic7wi'</span>  <span class="token comment"># 应用中的appid</span>        redirect_uri <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/user/dindin_back/'</span>  <span class="token comment"># 钉钉返回信息的回调地址</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"dindin_url"</span><span class="token punctuation">:</span> <span class="token string">"https://oapi.dingtalk.com/connect/qrconnect?appid="</span> <span class="token operator">+</span> appid <span class="token operator">+</span> <span class="token string">'&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri='</span> <span class="token operator">+</span> redirect_uri<span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GitEe</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"https://gitee.com/oauth/token?grant_type=authorization_code&amp;code="</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"&amp;client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;client_secret=b8f5cf324427f286b49276d6db87900b54c8ed49d9d21a88c65ca4e76fa6151c"</span><span class="token punctuation">)</span>        access_token <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span>        <span class="token comment"># print(access_token)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/user?access_token="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict    <span class="token keyword">def</span> <span class="token function">geturl</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"gitee_url"</span><span class="token punctuation">:</span> <span class="token string">"https://gitee.com/oauth/authorize?client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;response_type=code"</span><span class="token punctuation">&#125;</span><span class="token comment"># 工厂类</span><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">product_login</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 判断是否携带code值 有则回调 没有则返回url</span>        <span class="token keyword">if</span> code<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dindin_back"</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> d<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>code<span class="token punctuation">)</span>            <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee_back"</span><span class="token punctuation">:</span>                g <span class="token operator">=</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> g<span class="token punctuation">.</span>__repr__<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"dingding"</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> DingDing                <span class="token keyword">return</span> DingDing<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">"gitee"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> GitEe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># demo = Plant.product_login('gitee', '123123123')</span><span class="token comment"># print(demo.geturl())</span></code></pre><h2 id="2-djang-app-views-py"><a href="#2-djang-app-views-py" class="headerlink" title="2.djang/app/views.py"></a>2.djang/app/views.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 工厂模式  三方登录</span><span class="token keyword">class</span> <span class="token class-name">PlantLoginAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># 获取三方登录 url地址</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        why <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"why"</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> plant_login<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_login<span class="token punctuation">(</span>why<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>url<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 回调地址 获取用户详细信息</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>        <span class="token comment"># 可以用很多方法实现  查找 包含 都可</span>        <span class="token comment"># 获取当前url地址 切分后为  ['','user','***_back','']</span>        details <span class="token operator">=</span> plant_login<span class="token punctuation">.</span>Plant<span class="token punctuation">.</span>product_login<span class="token punctuation">(</span>request<span class="token punctuation">.</span>path_info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"details"</span><span class="token punctuation">:</span> details<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="3-djang-app-urls-py"><a href="#3-djang-app-urls-py" class="headerlink" title="3.djang/app/urls.py"></a>3.djang/app/urls.py</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'url/'</span><span class="token punctuation">,</span> PlantLoginAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># gitee__钉钉 三方登录地址</span><span class="token punctuation">]</span></code></pre><h1 id="vue发送"><a href="#vue发送" class="headerlink" title="vue发送"></a>vue发送</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"用户名"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input ref<span class="token operator">=</span><span class="token string">"userNameInput"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> placeholder<span class="token operator">=</span><span class="token string">"Basic usage"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon slot<span class="token operator">=</span><span class="token string">"prefix"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a<span class="token operator">-</span>tooltip slot<span class="token operator">=</span><span class="token string">"suffix"</span> title<span class="token operator">=</span><span class="token string">"Extra information"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>a<span class="token operator">-</span>icon type<span class="token operator">=</span><span class="token string">"info-circle"</span> style<span class="token operator">=</span><span class="token string">"color: rgba(0,0,0,.45)"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>tooltip<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>input<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"密码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input prefix<span class="token operator">=</span><span class="token string">"*"</span> suffix<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"验证码"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"formlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"verification"</span> @blur<span class="token operator">=</span><span class="token string">"isVerification"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isverification"</span><span class="token operator">></span>验证码错误<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"clickVerification"</span><span class="token operator">></span>点击发送验证码<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"buttonlayout"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>img style<span class="token operator">=</span><span class="token string">"margin-left:20px;cursor:pointer;"</span> @click<span class="token operator">=</span><span class="token string">"dingding"</span> src<span class="token operator">=</span><span class="token string">"http://localhost:8000/static/dingding.png"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img style<span class="token operator">=</span><span class="token string">"margin-left:20px;cursor:pointer;"</span> @click<span class="token operator">=</span><span class="token string">"gitee"</span> src<span class="token operator">=</span><span class="token string">"http://localhost:8000/static/gitee.png"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Facebook社交登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fb-login-button"</span> data<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">"large"</span> data<span class="token operator">-</span>button<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">"continue_with"</span> data<span class="token operator">-</span>layout<span class="token operator">=</span><span class="token string">"default"</span>           data<span class="token operator">-</span>auto<span class="token operator">-</span>logout<span class="token operator">-</span>link<span class="token operator">=</span><span class="token string">"false"</span>           data<span class="token operator">-</span>onlogin<span class="token operator">=</span><span class="token string">"login"</span> data<span class="token operator">-</span>use<span class="token operator">-</span><span class="token keyword">continue</span><span class="token operator">-</span><span class="token keyword">as</span><span class="token operator">=</span><span class="token string">"false"</span> data<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>postgitee<span class="token punctuation">,</span> getisVerification<span class="token punctuation">,</span> getVerification<span class="token punctuation">,</span> postDinDin<span class="token punctuation">,</span> postLogin<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../http/apis"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      selected<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      startdate<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      uid<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      username<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      verification<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      isverification<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment">//表单样式</span>      formlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//标签</span>        labelCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//文本框</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//按钮样式</span>      buttonlayout<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//按钮</span>        wrapperCol<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          xs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            span<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            offset<span class="token operator">:</span> <span class="token number">0</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sm<span class="token operator">:</span> <span class="token punctuation">&#123;</span>span<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//自定义方法</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">facebook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// crossorigin="anonymous" src="https://connect.facebook.net/zh_CN/sdk.js#xfbml=1&amp;version=v8.0&amp;appId=337974204227205&amp;autoLogAppEvents=1" nonce="BBgy4tba"</span>      <span class="token constant">FB</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">gitee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">postgitee</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>why<span class="token operator">:</span> <span class="token string">"gitee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>gitee_url<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//判断验证码</span>    <span class="token function">isVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getisVerification</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>verification<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>verification<span class="token punctuation">,</span> uid<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uid<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//发送钉钉验证码</span>    <span class="token function">clickVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">getVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uid <span class="token operator">=</span> res<span class="token punctuation">.</span>uid      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//钉钉登录</span>    <span class="token function-variable function">dingding</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">postDinDin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>why<span class="token operator">:</span> <span class="token string">"dingding"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment">//打开新窗口跳转到此地址</span>        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>dindin_url<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// window.location.href = "http://localhost:8000/dingding_url/";</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// let just = true;</span>      <span class="token comment">// just = this.isVerification() &amp; just;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isverification <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          username<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>          password<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//登录</span>        <span class="token function">postLogin</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>token<span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>username<span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>id<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3+Django2.0.4三方社交账号接入Gitee.com(码云)</title>
      <link href="gitee(%E7%A0%81%E4%BA%91)%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>gitee(%E7%A0%81%E4%BA%91)%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://v3u.cn/a_id_154">教程</a></p><p><a href="https://gitee.com/api/v5/oauth_doc#/">码云官方文档</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>1.获取登录跳转地址   <strong>注意</strong>(回调地址必须和应用中 一致)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"gitee_url"</span><span class="token punctuation">:</span> <span class="token string">"https://gitee.com/oauth/authorize?client_id=你自己的ClientID&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;response_type=code"</span><span class="token punctuation">&#125;</span></code></pre><p>2.回调地址  必须和上边路由中填写一致  否则跳转不过去</p><p>登录完成后会携带code值 跳转到回调地址</p><pre class="language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            <span class="token string">"https://gitee.com/oauth/token?grant_type=authorization_code&amp;code="</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"&amp;client_id=bef8beab2a56f463fff62bc93bbd87072b5fc1904c6282ca7807d9523038ec52&amp;redirect_uri=http://127.0.0.1:8000/user/gitee_back/&amp;client_secret=b8f5cf324427f286b49276d6db87900b54c8ed49d9d21a88c65ca4e76fa6151c"</span><span class="token punctuation">)</span>        access_token <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span>        <span class="token comment"># print(access_token)</span>        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/user?access_token="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict</code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3+Django3.1三方社交账号接入微博</title>
      <link href="%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="三方登录微博"><a href="#三方登录微博" class="headerlink" title="三方登录微博"></a><a href="https://blog.csdn.net/weixin_45954124/article/details/109514154">三方登录微博</a></h1><ol><li><h2 id="流程图-必会"><a href="#流程图-必会" class="headerlink" title="流程图 必会"></a>流程图 必会</h2><p><img src="https://img-blog.csdnimg.cn/20201105161254552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li><li><h2 id="生成微博授权URL接口"><a href="#生成微博授权URL接口" class="headerlink" title="生成微博授权URL接口"></a>生成微博授权URL接口</h2><ol><li><h3 id="创建apps-oauth模块进行oauth认证"><a href="#创建apps-oauth模块进行oauth认证" class="headerlink" title="创建apps/oauth模块进行oauth认证"></a>创建apps/oauth模块进行oauth认证</h3> <pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''2.1 在apps文件夹下新建应用： oauth'''</span>cd syl<span class="token operator">/</span>appspython <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py startapp oauth <span class="token comment"># 切换到apps文件夹下执行创建命令</span><span class="token triple-quoted-string string">'''2.2 添加子路由： oauth/urls.py'''</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.3 在syl/settings.py中添加应用'''</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'oauth.apps.OauthConfig'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''2.4 在syl/urls.py主路由中添加'''</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'oauth/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'oauth.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre></li><li><h3 id="添加子路由：-oauth-urls-py"><a href="#添加子路由：-oauth-urls-py" class="headerlink" title="添加子路由： oauth/urls.py"></a>添加子路由： oauth/urls.py</h3> <pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'weibo/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>WeiboUrl<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># /oauth/weibo/ 返回微博登录地址</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="1-3-视图函数-oauth-views-py"><a href="#1-3-视图函数-oauth-views-py" class="headerlink" title="1.3 视图函数: oauth/views.py"></a>1.3 视图函数: oauth/views.py</h3> <pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render  <span class="token comment"># Create your views here.</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowAny <span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode <span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> OauthUser <span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> jwt_payload_handler<span class="token punctuation">,</span> jwt_encode_handler <span class="token keyword">from</span> apps<span class="token punctuation">.</span>user<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_response_payload_handler <span class="token keyword">from</span> apps<span class="token punctuation">.</span>user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User  <span class="token comment"># 生成前端跳转到微博扫码页面的url</span> <span class="token keyword">class</span> <span class="token class-name">WeiboUrl</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">'''     生成微博的登陆页面路由地址     https://api.weibo.com/oauth2/authorize? # 微博oauth认证地址     client_id=4152203033&amp; # 注册开发者id     response_type=code&amp;     redirect_uri=http://127.0.0.1:8888/oauth/callback/ # 获取code后将code回     调给后端地址     '''</span>     <span class="token comment"># 自定义权限类</span>     permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>         url <span class="token operator">=</span> <span class="token string">'https://api.weibo.com/oauth2/authorize?'</span>  <span class="token comment"># 微博授权的url地址</span>         data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>             <span class="token string">'client_id'</span><span class="token punctuation">:</span> <span class="token string">'3757426334'</span><span class="token punctuation">,</span>  <span class="token comment"># WEIBO_APP_KEY,</span>             <span class="token string">'response_type'</span><span class="token punctuation">:</span> <span class="token string">'code'</span><span class="token punctuation">,</span>             <span class="token string">'redirect_uri'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:8888/oauth/callback/'</span><span class="token punctuation">,</span>  <span class="token comment"># VUE的回调，微博后台授权的回调地址</span>         <span class="token punctuation">&#125;</span>         weibo_url <span class="token operator">=</span> url <span class="token operator">+</span> urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>         <span class="token comment"># https://api.weibo.com/oauth2/authorize? client_id = 4152203033 &amp; response_type = code &amp; redirect_uri = http://127.0.0.1:8000/api/ weibo_back /</span>         <span class="token comment"># return Response(&#123;'weibo_url': weibo_url&#125;)</span>         <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'url'</span><span class="token punctuation">:</span> weibo_url<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li><li><h3 id="测试生成微博售前URL接口"><a href="#测试生成微博售前URL接口" class="headerlink" title="测试生成微博售前URL接口"></a>测试生成微博售前URL接口</h3><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;192.168.56.100:8888&#x2F;oauth&#x2F;weibo&#x2F;</code></pre></li></ol></li></ol><p>   <img src="https://img-blog.csdnimg.cn/20201105161310653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p>   在浏览器访问返回地址即可回到新浪扫码界面</p><p>   <img src="https://img-blog.csdnimg.cn/20201105161336538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><ol start="3"><li><h2 id="微博回调接口"><a href="#微博回调接口" class="headerlink" title="微博回调接口"></a>微博回调接口</h2><ol><li><h3 id="oauth-urls-py-中添加路由"><a href="#oauth-urls-py-中添加路由" class="headerlink" title="oauth/urls.py 中添加路由"></a>oauth/urls.py 中添加路由</h3><pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'weibo/callback/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>OauthWeiboCallback<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#/oauth/weibo/callback/</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="oauth-views-py-中添加试图函数"><a href="#oauth-views-py-中添加试图函数" class="headerlink" title="oauth/views.py 中添加试图函数"></a>oauth/views.py 中添加试图函数</h3><pre class="language-python" data-language="python"><code class="language-python">      </code></pre><h1 id="通过vue前端传入的code，微博身份验证"><a href="#通过vue前端传入的code，微博身份验证" class="headerlink" title="通过vue前端传入的code，微博身份验证"></a>通过vue前端传入的code，微博身份验证</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">OauthWeiboCallback</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 自定义权限类</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 接收vue端传过来的code（微博的用户code）</span>        <span class="token comment"># 1.使用微博用户code+微博开发者账号信息换取微博的认证access_token</span>        code <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'client_id'</span><span class="token punctuation">:</span> <span class="token string">'3757426334'</span><span class="token punctuation">,</span>            <span class="token string">'client_secret'</span><span class="token punctuation">:</span> <span class="token string">'c1a95726376bddd06de0143818b35cc6'</span><span class="token punctuation">,</span>            <span class="token string">'grant_type'</span><span class="token punctuation">:</span> <span class="token string">'authorization_code'</span><span class="token punctuation">,</span>            <span class="token string">'code'</span><span class="token punctuation">:</span> code<span class="token punctuation">,</span>            <span class="token string">'redirect_uri'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:8888/oauth/callback/'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        url <span class="token operator">=</span> <span class="token string">'https://api.weibo.com/oauth2/access_token'</span>        data <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 拿取请求的返回结果</span>        <span class="token comment"># access_token = data.get('uid')  # 获取到的微博token</span>        weibo_uid <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取到少码用户的id</span>        <span class="token comment"># 2. 根据uid 查询绑定情况</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            oauth_user <span class="token operator">=</span> OauthUser<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>uid<span class="token operator">=</span>weibo_uid<span class="token punctuation">,</span> oauth_type<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            oauth_user <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token comment"># 返回动作, 登录成功/需要绑定用户 type 0 登录成功, 1, 授权成功, 需要绑定</span>        <span class="token keyword">if</span> oauth_user<span class="token punctuation">:</span>            <span class="token comment"># 4. 如果绑定了, 返回token, 登录成功</span>            user <span class="token operator">=</span> oauth_user<span class="token punctuation">.</span>user            payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token comment"># jwt_response_payload_handler为user模块定义的jwt返回的信息</span>            data <span class="token operator">=</span> jwt_response_payload_handler<span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>            data<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token comment"># 指定为登录成功</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 5. 如果没绑定, 返回标志, 让前端跳转到绑定页面</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'授权成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>                                                                <span class="token string">'uid'</span><span class="token punctuation">:</span> weibo_uid<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">   <span class="token number">3</span><span class="token punctuation">.</span> <span class="token comment">### oauth/models.py 中添加用户绑定模型</span>     <span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models                 <span class="token comment"># Create your models here.</span>     <span class="token comment"># 把三方的用户信息，和本地的用户信息进行绑定</span>     <span class="token keyword">class</span> <span class="token class-name">OauthUser</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>         OAUTHTYPE <span class="token operator">=</span> <span class="token punctuation">(</span>             <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'weibo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'weixin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">)</span>         uid <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'三方用户id'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>         <span class="token comment"># 三方用户id</span>         user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'user.User'</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>         <span class="token comment"># 本地用户外键，关联User表</span>         oauth_type <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">'认证类型'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> choices<span class="token operator">=</span>OAUTHTYPE<span class="token punctuation">)</span>         <span class="token comment"># 1,2 ...</span></code></pre></li></ol><h5 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h5><pre class="language-python" data-language="python"><code class="language-python">python manager<span class="token punctuation">.</span>py makemigrationspython manager<span class="token punctuation">.</span>py migrate</code></pre></li><li><h2 id="微博绑定用户接口"><a href="#微博绑定用户接口" class="headerlink" title="微博绑定用户接口"></a>微博绑定用户接口</h2></li><li><h3 id="oauth-urls-py-中添加路由-1"><a href="#oauth-urls-py-中添加路由-1" class="headerlink" title="oauth/urls.py 中添加路由"></a>oauth/urls.py 中添加路由</h3><pre class="language-python" data-language="python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">(</span><span class="token string">'weibo/binduser/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>OauthWeiboBindUser<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#/oauth/weibo/callback/</span><span class="token punctuation">]</span></code></pre></li><li><h3 id="oauth-views-py-中添加试图函数-1"><a href="#oauth-views-py-中添加试图函数-1" class="headerlink" title="oauth/views.py 中添加试图函数"></a>oauth/views.py 中添加试图函数</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">OauthWeiboBindUser</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAny<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 绑定用户, 1. 已注册用户, 2. 未注册用户</span>        <span class="token comment"># 1.1 获取用户名, 密码, weibo_uid</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        weibo_uid <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'weibo_uid'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> weibo_uid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'参数不全'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment"># 0.判断是否存在此用户</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            user <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token comment"># 1. 已注册用户</span>        <span class="token keyword">if</span> user<span class="token punctuation">:</span>            <span class="token comment"># 1.2 , 如果存在就验证 密码, 验证通过,就绑定, 返回token,登录成功</span>            <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                ou <span class="token operator">=</span> OauthUser<span class="token punctuation">(</span>uid<span class="token operator">=</span>weibo_uid<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> oauth_type<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>                ou<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>                payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token comment"># 通过user对象获取到jwt的                payload信息</span>                token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 生成token</span>                data <span class="token operator">=</span> jwt_response_payload_handler<span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>                data<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token comment"># 指定为登录成功</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'密码错误'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 2. 未注册用户</span>            <span class="token comment"># 2.1 生成新用户, 设置用户名密码, 保存, 然后绑定, 返回token, 登录成功</span>            user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>            user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            ou <span class="token operator">=</span> OauthUser<span class="token punctuation">(</span>uid<span class="token operator">=</span>weibo_uid<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> oauth_type<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>            ou<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            data <span class="token operator">=</span> jwt_response_payload_handler<span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token punctuation">)</span>            data<span class="token punctuation">[</span><span class="token string">'t y p e'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token comment"># 指定为登录成功</span>            returnResponse<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django3.1--vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3+Django2.0.4三方社交账号接入钉钉</title>
      <link href="%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>%E9%92%89%E9%92%89%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://v3u.cn/a_id_124">教程</a></p><p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/kymkv6">钉钉官方文档</a></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>1.获取登录跳转地址   <strong>注意</strong>(回调地址必须和应用中 一致)</p><pre class="language-python" data-language="python"><code class="language-python">appid <span class="token operator">=</span> <span class="token string">'dingoa2kslvfvtiaeic7wi'</span>  <span class="token comment"># 应用中的appid</span>        redirect_uri <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/user/dindin_back/'</span>  <span class="token comment"># 钉钉返回信息的回调地址</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">"dindin_url"</span><span class="token punctuation">:</span> <span class="token string">"https://oapi.dingtalk.com/connect/qrconnect?appid="</span> <span class="token operator">+</span> appid <span class="token operator">+</span> <span class="token string">'&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri='</span> <span class="token operator">+</span> redirect_uri<span class="token punctuation">&#125;</span></code></pre><p>2.回调地址  必须和上边路由中填写一致  否则跳转不过去</p><p>登录完成后会携带code值 跳转到回调地址</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> hmac<span class="token keyword">import</span> base64<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> urllib<span class="token keyword">import</span> jsoncode <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 时间戳</span>        timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        appSecret <span class="token operator">=</span> <span class="token string">'YCoNtgYLMDKNS9096KKrnDDazZ7IgJHtGiOA7Y0YvTB8c4tn2vRBvaj_GTIvMkHQ'</span>        <span class="token comment"># 构造签名</span>        signature <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>            hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>appSecret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> digestmod<span class="token operator">=</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 请求接口，换取钉钉用户名</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'tmp_auth_code'</span><span class="token punctuation">:</span> code<span class="token punctuation">&#125;</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature='</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>            signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;timestamp="</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">"&amp;accessKey=dingoa2kslvfvtiaeic7wi"</span><span class="token punctuation">,</span>                            data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 转换为json格式</span>        res_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> res_dict</code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django启动https协议</title>
      <link href="django%E5%90%AF%E5%8A%A8https%E5%8D%8F%E8%AE%AE/"/>
      <url>django%E5%90%AF%E5%8A%A8https%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>django 默认的runserver使用的是http协议，如果需要https协议，需要以下库</p><blockquote><p><code>pip install django-sslserver</code></p><p>执行pip install命令安装：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> django-sslserver</code></pre><h2 id="配置django的settings-py文件"><a href="#配置django的settings-py文件" class="headerlink" title="配置django的settings.py文件"></a>配置django的settings.py文件</h2><p>在INSTALLED_APPS下添加</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">'sslserver'</span><span class="token punctuation">,</span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>使用命令在终端以https的方式运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">python manage.py runsslserver</code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python垃圾回收机制</title>
      <link href="python%E5%9F%BA%E7%A1%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>python%E5%9F%BA%E7%A1%80%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="python垃圾回收机制"><a href="#python垃圾回收机制" class="headerlink" title="python垃圾回收机制"></a>python垃圾回收机制</h1><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>为了探索对象在内存的存储，我们可以求助于Python的内置函数id()。它用于返回对象的身份(identity)。其实，这里所谓的身份，就是该对象的内存地址</p><p>在Python中，整数和短小的字符，Python都会缓存这些对象，以便重复使用。当我们创建多个等于1的引用时，实际上是让所有这些引用指向同一个对象</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>为了检验两个引用指向同一个对象，我们可以用is关键字。is用于判断两个引用所指的对象是否相同。由此引出 is 和 == 的区别</p><p>同时，由内存地址和链接指向引出 fastdfs的去重功能和文件指纹概念，还能引出linux中的软链接体系</p><p>还能扩展出设计模式中的单例模式</p><p>同时需要记忆的是，获取一个元素的内存占用量：sys.getsizeof() 单位是字节</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>在Python中，每个对象都有存有指向该对象的引用总数，即引用计数(reference count)。</p><p>我们可以使用sys包中的getrefcount()，来查看某个对象的引用计数。需要注意的是，当使用某个引用作为参数，传递给getrefcount()时，参数实际上创建了一个临时的引用。因此，getrefcount()所得到的结果，会比期望的多1。</p><p>某个对象的引用计数可能减少。比如，可以使用del关键字删除某个引用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> getrefcounta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>getrefcount<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">del</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>getrefcount<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><p>两个对象可能相互引用，从而构成所谓的引用环（循环引用）</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>从基本原理上，当Python的某个对象的引用计数降为0时，说明没有任何引用指向该对象，该对象就成为要被回收的垃圾了。比如某个新建对象，它被分配给某个引用，对象的引用计数变为1。如果引用被删除，对象的引用计数为0，那么该对象就可以被垃圾回收</p><p>然而，减肥是个昂贵而费力的事情。垃圾回收时，Python不能进行其它的任务。频繁的垃圾回收将大大降低Python的工作效率。如果内存中的对象不多，就没有必要总启动垃圾回收。所以，Python只会在特定条件下，自动启动垃圾回收。当Python运行时，会记录其中分配对象(object allocation)和取消分配对象(object deallocation)的次数。当两者的差值高于某个阈值时，垃圾回收才会启动</p><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>Python同时采用了分代(generation)回收的策略。这一策略的基本假设是，存活时间越久的对象，越不可能在后面的程序中变成垃圾。我们的程序往往会产生大量的对象，许多对象很快产生和消失，但也有一些对象长期被使用。出于信任和效率，对于这样一些“长寿”对象，我们相信它们的用处，所以减少在垃圾回收中扫描它们的频率。</p><p>Python将所有的对象分为0，1，2三代。所有的新建对象都是0代对象。当某一代对象经历过垃圾回收，依然存活，那么它就被归入下一代对象。垃圾回收启动时，一定会扫描所有的0代对象。如果0代经过一定次数垃圾回收，那么就启动对0代和1代的扫描清理。当1代也经历了一定次数的垃圾回收后，那么会启动对0，1，2，即对所有对象进行扫描。</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建自己的高逼格博客</title>
      <link href="%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%AB%98%E9%80%BC%E6%A0%BC%E5%8D%9A%E5%AE%A2/"/>
      <url>%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%AB%98%E9%80%BC%E6%A0%BC%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>花了几天搭建了个网站，先上链接，欢迎来访：<a href="http://wyx6.top/">翔翔博客</a></p><p>为什么要搭建自己的博客呢</p><p>首先自由度高 我们在CSDN 博客园 等都会受到一些限制 所以我们选择自己搭建博客</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>教程分三个部分，</p><ul><li>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</li><li>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</li><li>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</li></ul><hr><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h1 id="Hexo简介-1"><a href="#Hexo简介-1" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h1 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h1><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a></p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><pre class="language-none"><code class="language-none">sudo apt-get install git</code></pre><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h1 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：<a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本就行了。</p><p>linux：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>安装完后，打开命令行</p><pre class="language-none"><code class="language-none">node -vnpm -v</code></pre><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h1><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><pre class="language-none"><code class="language-none">npm install -g hexo-cli</code></pre><p>依旧用<code>hexo -v</code>查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><pre class="language-none"><code class="language-none">hexo init blog</code></pre><p>blog  (自己起的名字)  然后</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog //进入这个blog文件夹<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><pre class="language-none"><code class="language-none">hexo ghexo server</code></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="img" loading="lazy"><br>使用ctrl+c可以关闭服务。</p><h1 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h1><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" alt="img" loading="lazy"></p><p>创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://也就是xxxx.github.io/">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img src="https://img-blog.csdnimg.cn/20201215105231380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>点击create repository。</p><h1 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h1><p>到你的git bash中，右击选择 git bash Here</p><pre class="language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre class="language-none"><code class="language-none">git config user.namegit config user.email</code></pre><p>然后创建SSH,一路回车</p><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstd106j20kb073gll.jpg" alt="img" loading="lazy"></p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" alt="img" loading="lazy"></p><p>在gitbash中，查看是否成功</p><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><h1 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git  branch: master</code></pre><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><p>然后</p><pre class="language-none"><code class="language-none">hexo cleanhexo generatehexo deploy</code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstbtvfj20lq01u3yd.jpg" alt="img" loading="lazy"></p><h1 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h1><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5">阿里云</a>上买一个域名，我买的是 <code>fangzh.top</code>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><img src="https://img-blog.csdnimg.cn/202012151052303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址  <a href="https://zhuanlan.zhihu.com/p/111786790">查看设置</a>。</p><img src="https://img-blog.csdnimg.cn/2020121515361029.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:200%;" / loading="lazy"><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>fangzh.top</code></p><p><img src="https://img-blog.csdnimg.cn/20201215105231646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img src="https://img-blog.csdnimg.cn/2020121510523576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>最后，在gitbash中，输入</p><pre class="language-none"><code class="language-none">hexo cleanhexo ghexo d</code></pre><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><pre class="language-none"><code class="language-none">hexo new newpapername</code></pre><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><pre class="language-none"><code class="language-none">hexo cleanhexo ghexo d</code></pre><p>就可以看到更新了。</p><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p><h1 id="1-hexo基本配置"><a href="#1-hexo基本配置" class="headerlink" title="1. hexo基本配置"></a>1. hexo基本配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方的配置</a>描述。</p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td></tr><tr><td><code>root</code></td><td>网站根目录</td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013/07/14/hello-world</td></tr><tr><td><code>:year-:month-:day-:title.html</code></td><td>2013-07-14-hello-world.html</td></tr><tr><td><code>:category/:title</code></td><td>foo/bar/hello-world</td></tr></tbody></table><p>再往下翻，中间这些都默认就好了。</p><pre class="language-none"><code class="language-none">theme: landscape# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type: git  repo: &lt;repository url&gt;  branch: [branch]</code></pre><p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class="language-none"><code class="language-none">title: Hello Worlddate: 2013&#x2F;7&#x2F;13 20:46:25---</code></pre><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><pre class="language-none"><code class="language-none">categories:- Diarytags:- PS3- Games</code></pre><h3 id="layout（布局）"><a href="#layout（布局）" class="headerlink" title="layout（布局）"></a>layout（布局）</h3><p>当你每一次使用代码</p><pre class="language-none"><code class="language-none">hexo new paper</code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><p>而new这个命令其实是：</p><pre class="language-none"><code class="language-none">hexo new [layout] &lt;title&gt;</code></pre><p>只不过这个layout默认是post罢了。</p><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>如果你想另起一页，那么可以使用</p><pre class="language-none"><code class="language-none">hexo new page board</code></pre><p>系统会自动给你在source文件夹下创建一个board文件夹，<a href="http://以及board文件夹中的index.md/">以及board文件夹中的index.md</a>，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="language-none"><code class="language-none">hexo new draft newpage</code></pre><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="language-none"><code class="language-none">hexo server --draft</code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><pre class="language-none"><code class="language-none">hexo publish draft newpage</code></pre><p>就会自动把newpage.md发送到post中。</p><hr><h1 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/">点这里</a></p><p><img src="https://img-blog.csdnimg.cn/20201215105247115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如<a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是<a href="https://yun.yunyoujun.cn/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">yum</a>这个主题，好像是从WordPress移植过来的，展示效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20201215105242867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>不管怎么样，至少是符合我个人的审美。</p><p>直接在github链接上下载下来，然后放到<code>theme</code>文件夹下就行了，然后再在刚才说的配置文件中把<code>theme</code>换成那个主题文件夹的名字，它就会自动在<code>theme</code>文件夹中搜索你配置的主题。</p><p>而后进入<code>hueman</code>这个文件夹，可以看到里面也有一个配置文件<code>_config.xml</code>，貌似它默认是<code>_config.xml.example</code>，把它复制一份，重命名为<code>_config.xml</code>就可以了。这个配置文件是修改你整个主题的配置文件。</p><h3 id="menu（菜单栏）"><a href="#menu（菜单栏）" class="headerlink" title="menu（菜单栏）"></a>menu（菜单栏）</h3><p>也就是上面菜单栏上的这些东西。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstfwjbj20jd0233ye.jpg" alt="img" loading="lazy"></p><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</p><pre class="language-none"><code class="language-none">hexo new page about</code></pre><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，<a href="http://以及index.md/">以及index.md</a>，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><p>如果你想要自己再自定义一个菜单栏的选项，那么就</p><pre class="language-none"><code class="language-none">hexo new page yourdiy</code></pre><p>然后在主题配置文件的menu菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: &#39;中文意思&#39;</code>就可以显示中文了。</p><h3 id="customize-定制"><a href="#customize-定制" class="headerlink" title="customize(定制)"></a>customize(定制)</h3><p>在这里可以修改你的个人logo，默认是那个hueman，在<code>source/css/images</code>文件夹中放入自己要的logo，再改一下<code>url</code>的链接名字就可以了。</p><p><code>favicon</code>是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p><code>social_links</code> ，可以显示你的社交链接，而且是有logo的。</p><p><strong>tips:</strong></p><p>在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。</p><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><p><strong>1. 什么是RSS？</strong></p><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。</p><p><strong>2. 为什么要用RSS？</strong></p><p>就如同订阅公众号一样，你对某个公众号感兴趣，你总不可能一直时不时搜索这个公众号来看它的文章吧。博客也是一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过RSS订阅它们，然后在RSS阅读器上可以实时推送这些消息。现在网上的垃圾消息太多了，如果你每一天都在看这些消息中度过，漫无目的的浏览，只会让你的时间一点一点的流逝，太不值得了。如果你关注的博主每次都发的消息都是精华，而且不是每一天十几条几十条的轰炸你，那么这个博主就值得你的关注，你就可以通过RSS订阅他。</p><p>在我的理解中，如果你不想每天都被那些没有质量的消息轰炸，只想安安静静的关注几个博主，每天看一些有质量的内容也不用太多，那么RSS订阅值得你的拥有。</p><p><strong>3. 添加RSS功能</strong></p><p>先安装RSS插件</p><pre class="language-none"><code class="language-none">npm i hexo-generator-feed</code></pre><p>而后在你整个项目的<code>_config.yml</code>中找到Extensions，添加：</p><pre class="language-none"><code class="language-none"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20</code></pre><p>这个时候你的RSS链接就是 域名<code>/atom.xml</code>了。</p><p>所以，在主题配置文件中的这个<code>social links</code>，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><pre class="language-none"><code class="language-none">rss: &#x2F;atom.xml</code></pre><p><strong>4. 如何关注RSS？</strong></p><p>首先，你需要一个RSS阅读器，在这里我推荐<code>inoreader</code>，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到<code>inoreader</code>上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索<code>阮一峰</code>，应该就能出来了。</p><p>我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。当然，还有我！！赶快关注我吧！你值得拥有：<a href="http://fangzh.top/atom.xml">http://fangzh.top/atom.xml</a></p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h3 id="widgets-侧边栏"><a href="#widgets-侧边栏" class="headerlink" title="widgets(侧边栏)"></a>widgets(侧边栏)</h3><p>侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把<code>communication</code>写在上面，在<code>zh-CN.yml</code>中的<code>sidebar</code>，添加<code>communication: &#39;中文&#39;</code>。</p><p>然后在<code>hueman/layout/widget</code>中添加一个<code>communicaiton.ejs</code>，填入模板：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget-wrap widget-list"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget-title"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'sidebar.communiation'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里添加你要写的内容<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><h3 id="search-搜索框"><a href="#search-搜索框" class="headerlink" title="search(搜索框)"></a>search(搜索框)</h3><p>默认搜索框是不能够用的，</p><blockquote><p>you need to install <code>hexo-generator-json-content</code> before using Insight Search</p></blockquote><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h3 id="comment-评论系统"><a href="#comment-评论系统" class="headerlink" title="comment(评论系统)"></a>comment(评论系统)</h3><p>这里的多数都是国外的，基本用不了。这个<code>valine</code>好像不错，还能统计文章阅读量，可以自己试一试，<a href="https://valine.js.org/quickstart.html#npm">链接</a>。</p><h3 id="miscellaneous-其他"><a href="#miscellaneous-其他" class="headerlink" title="miscellaneous(其他)"></a>miscellaneous(其他)</h3><p>这里我就改了一个<code>links</code>，可以添加友链。注意空格要对！不然会报错！</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义</li><li>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中<code>comment</code>是评论系统，<code>common</code>是常规的布局，最常修改的在这里面，比如修改页面<code>head</code>和<code>footer</code>的内容。</li><li>scripts：js脚本，暂时没什么用</li><li>source：里面放了一些css的样式，以及图片</li></ul><hr><h1 id="3-git分支进行多终端工作"><a href="#3-git分支进行多终端工作" class="headerlink" title="3. git分支进行多终端工作"></a>3. git分支进行多终端工作</h1><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstj43xj20800d7glz.jpg" alt="可以看到，并没有source等源文件在内" loading="lazy"></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksthbryj20eb07swej.jpg" alt="img" loading="lazy"></p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><p>首先，先在github上新建一个hexo分支，如图：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstkyz7j20cp0bgdg5.jpg" alt="img" loading="lazy"></p><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstl8uxj20ql0dsgmo.jpg" alt="img" loading="lazy"></p><p>然后在本地的任意目录下，打开git bash，</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone git@github.com:ZJUFangzh/ZJUFangzh.github.io.git</code></pre><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的<code>ZJUFangzh.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><pre class="language-none"><code class="language-none">.DS_StoreThumbs.dbdb.json*.lognode_modules&#x2F;public&#x2F;.deploy*&#x2F;</code></pre><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit –m <span class="token string">"add branch"</span><span class="token function">git</span> push </code></pre><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk4k1j20yq0h9gmr.jpg" alt="img" loading="lazy"></p><p>这样就上传完了。</p><h3 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h3><p>一样的，跟之前的环境搭建一样，</p><ul><li>安装git</li></ul><pre class="language-none"><code class="language-none">sudo apt-get install git</code></pre><ul><li>设置git全局邮箱和用户名</li></ul><pre class="language-none"><code class="language-none">git config --global user.name &quot;yourgithubname&quot;git config --global user.email &quot;yourgithubemail&quot;</code></pre><ul><li>设置ssh key</li></ul><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail&quot;#生成后填到github和coding上（有coding平台的话）#验证是否成功ssh -T git@github.comssh -T git@git.coding.net #(有coding平台的话)</code></pre><ul><li>安装nodejs</li></ul><pre class="language-none"><code class="language-none">sudo apt-get install nodejssudo apt-get install npm</code></pre><ul><li>安装hexo</li></ul><pre class="language-none"><code class="language-none">sudo npm install hexo-cli -g</code></pre><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><pre class="language-none"><code class="language-none">git clone git@………………</code></pre><p>然后进入克隆到的文件夹：</p><pre class="language-none"><code class="language-none">cd xxx.github.ionpm installnpm install hexo-deployer-git --save</code></pre><p>生成，部署：</p><pre class="language-none"><code class="language-none">hexo ghexo d</code></pre><p>然后就可以开始写你的新博客了</p><pre class="language-none"><code class="language-none">hexo new newpage</code></pre><p><strong>Tips:</strong></p><ol><li>不要忘了，每次写完最好都把源文件上传一下</li></ol><pre class="language-none"><code class="language-none">git add .git commit –m &quot;xxxx&quot;git push </code></pre><ol><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</li></ol><pre class="language-none"><code class="language-none">git pull</code></pre><hr><h1 id="4-coding-page上部署实现国内外分流"><a href="#4-coding-page上部署实现国内外分流" class="headerlink" title="4. coding page上部署实现国内外分流"></a>4. coding page上部署实现国内外分流</h1><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><p><strong>1. 申请coding账户，新建项目</strong></p><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。</p><p><strong>2. 添加ssh key</strong></p><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><pre class="language-none"><code class="language-none">ssh -T git@git.coding.net</code></pre><p><strong>3. 修改_config.yml</strong></p><p>hexo官方文档是这样的：</p><pre class="language-none"><code class="language-none">deploy:  type: git  message: [message]  repo:    github: &lt;repository url&gt;,[branch]    coding: &lt;repository url&gt;,[branch] </code></pre><p>那么，我们只需要：</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo:     coding: git@git.coding.net:ZJUFangzh&#x2F;ZJUFangzh.git,master    github: git@github.com:ZJUFangzh&#x2F;ZJUFangzh.github.io.git,master</code></pre><p><strong>4. 部署</strong></p><p>保存一下，直接</p><pre class="language-none"><code class="language-none">hexo ghexo d</code></pre><p>这样就可以在coding的项目上看到你部署的文件了。</p><p><strong>5. 开启coding pages服务，绑定域名</strong></p><p>如图：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstnswnj20xr0bugmj.jpg" alt="img" loading="lazy"></p><p><strong>6. 阿里云添加解析</strong></p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstjxu6j20o709bdg1.jpg" alt="img" loading="lazy"></p><p>这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。</p><p><strong>7. 去除coding page的跳转广告</strong></p><p>coding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到<code>pages服务</code>这里。</p><p>这里：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstmpshj20j80cbmxq.jpg" alt="img" loading="lazy"></p><p>只要你在页面上添加一行文字，写<code>Hosted by Coding Pages</code>，然后点下面的小勾勾，两个工作日内它就会审核通过了。</p><pre class="language-none"><code class="language-none">&lt;p&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</code></pre><p>我的选择是把这一行代码放在主题文件夹<code>/layout/common/footer.ejs</code>里面，也就是本来在页面中看到的页脚部分。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk1skj20lh0630su.jpg" alt="img" loading="lazy"></p><p>当然，为了统一，我又在后面加上了and <strong>Github</strong>哈哈，可以不加。</p><pre class="language-none"><code class="language-none">&lt;p&gt;&lt;span&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and &lt;span&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Github&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</code></pre><p>这是最终加上去的代码。</p><hr><h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><p>本文参考了: <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar.com</a>这里面说的很详细了。</p><h1 id="1-SEO优化"><a href="#1-SEO优化" class="headerlink" title="1. SEO优化"></a>1. SEO优化</h1><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p><blockquote><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></blockquote><h3 id="百度seo"><a href="#百度seo" class="headerlink" title="百度seo"></a>百度seo</h3><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code></p><p>来查看一下。</p><p><strong>1. 登录百度站长平台添加网站</strong></p><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index">百度站长平台</a>，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><p><strong>2. 提交链接</strong></p><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save</code></pre><p>这时候你需要在你的根目录下<code>_config.xml</code>中看看url有没有改成你自己的：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstpzd9j20ar03b749.jpg" alt="img" loading="lazy"></p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstwp4pj20fc0kyq4n.jpg" alt="img" loading="lazy"></p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件<code>/layout/common/head.ejs</code>的适当位置，然后验证一下就可以了。</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</li></ul><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu9fa6j20v60m4404.jpg" alt="img" loading="lazy"></p><p><strong>ps:</strong> 百度收录比较慢，慢慢等个十天半个月再去<code>site:&lt;域名&gt;</code>看看有没有被收录。</p><h3 id="google的SEO"><a href="#google的SEO" class="headerlink" title="google的SEO"></a>google的SEO</h3><p>流程一样，google更简单，而且收录更快，进入<a href="https://search.google.com/search-console/sitemaps?resource_id=http://fangzh.top/&hl=zh-CN">google站点地图</a>，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 <a href="http://yourname.github.io/">yourname.github.io</a>，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkswrucmj20q30lkq72.jpg" alt="img" loading="lazy"></p><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h1 id="2-评论系统"><a href="#2-评论系统" class="headerlink" title="2. 评论系统"></a>2. 评论系统</h1><p>评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/">visugar</a>这个博主用的来比力评论系统，感觉也还不错。</p><p><a href="https://livere.com/">来比力官网</a>，注册好后，点击管理页面，在<code>代码管理</code>中找到安装代码：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu93vyj20tk0m440w.jpg" alt="img" loading="lazy"></p><p>获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。</p><pre class="language-none"><code class="language-none">&lt;%- partial(&#39;comment&#x2F;livebe&#39;) %&gt;</code></pre><p>然后可以自己设置一些东西：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksufavtj20v70o9mzw.jpg" alt="img" loading="lazy"></p><p>还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。</p><h1 id="3-添加百度统计"><a href="#3-添加百度统计" class="headerlink" title="3. 添加百度统计"></a>3. 添加百度统计</h1><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。</p><p><a href="https://tongji.baidu.com/">百度统计</a>，注册一下，这里的账号好像和百度账号不是一起的。</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvbdmwj20lf0kx78n.jpg" alt="img" loading="lazy"></p><p>照样把代码复制到<code>head.ejs</code>文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。</p><h1 id="4-文章阅读量统计leanCloud"><a href="#4-文章阅读量统计leanCloud" class="headerlink" title="4. 文章阅读量统计leanCloud"></a>4. 文章阅读量统计leanCloud</h1><p><a href="https://leancloud.cn/">leanCloud</a>，进去后注册一下，进入后创建一个应用：</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstp8rdj20h30cimxt.jpg" alt="img" loading="lazy"></p><p>在<code>存储</code>中创建Class，命名为Counter,</p><p><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstygbpj20gq0k0abm.jpg" alt="img" loading="lazy"></p><p>然后在设置页面看到你的<code>应用Key</code>，在主题的配置文件中：</p><pre class="language-none"><code class="language-none">leancloud_visitors:  enable: true  app_id: 你的id  app_key: 你的key</code></pre><p>在<code>article.ejs</code>中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了，</p><pre class="language-none"><code class="language-none">阅读数量:&lt;span id&#x3D;&quot;&lt;%&#x3D; url_for(post.path) %&gt;&quot; class&#x3D;&quot;leancloud_visitors&quot; data-flag-title&#x3D;&quot;&lt;%- post.title %&gt;&quot;&gt;&lt;&#x2F;span&gt;次</code></pre><p>然后在<code>footer.ejs</code>的最后，添加：</p><pre class="language-none"><code class="language-none">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;2.5.0&#x2F;av-min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    var APP_ID &#x3D; &#39;你的app id&#39;;    var APP_KEY &#x3D; &#39;你的app key&#39;;    AV.init(&#123;        appId: APP_ID,        appKey: APP_KEY    &#125;);    &#x2F;&#x2F; 显示次数    function showTime(Counter) &#123;        var query &#x3D; new AV.Query(&quot;Counter&quot;);        if($(&quot;.leancloud_visitors&quot;).length &gt; 0)&#123;            var url &#x3D; $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim();            &#x2F;&#x2F; where field            query.equalTo(&quot;words&quot;, url);            &#x2F;&#x2F; count            query.count().then(function (number) &#123;                &#x2F;&#x2F; There are number instances of MyClass where words equals url.                $(document.getElementById(url)).text(number?  number : &#39;--&#39;);            &#125;, function (error) &#123;                &#x2F;&#x2F; error is an instance of AVError.            &#125;);        &#125;    &#125;    &#x2F;&#x2F; 追加pv    function addCount(Counter) &#123;        var url &#x3D; $(&quot;.leancloud_visitors&quot;).length &gt; 0 ? $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim() : &#39;icafebolger.com&#39;;        var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;);        var query &#x3D; new Counter;        query.save(&#123;            words: url        &#125;).then(function (object) &#123;        &#125;)    &#125;    $(function () &#123;        var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;);        addCount(Counter);        showTime(Counter);    &#125;);&lt;&#x2F;script&gt;</code></pre><p>重新部署后就可以了。</p><h1 id="5-引入不蒜子访问量和访问人次统计"><a href="#5-引入不蒜子访问量和访问人次统计" class="headerlink" title="5. 引入不蒜子访问量和访问人次统计"></a>5. 引入不蒜子访问量和访问人次统计</h1><p>不蒜子的添加非常非常方便，<a href="http://busuanzi.ibruce.info/">不蒜子</a></p><p>在<code>footer.ejs</code>中的合适位置，看你要显示在哪个地方，添加：</p><pre class="language-none"><code class="language-none">&lt;!--这一段是不蒜子的访问量统计代码--&gt;&lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次 &amp;nbsp;   &lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人次&lt;&#x2F;span&gt;</code></pre><p>就可以了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多看看别的博主的那些功能，如果有你能找到自己喜欢的功能，那么好好发动搜索技能，很快就能找到怎么做了。加油吧！感谢<a href="https://blog.csdn.net/sinat_37781304">zjufangzh</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10/Linux系统项目上线Nginx+Django（Uwsgi）+Vue实现高可用部署</title>
      <link href="nginx+uwsgi/"/>
      <url>nginx+uwsgi/</url>
      
        <content type="html"><![CDATA[<h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><ol><li><h2 id="web容器"><a href="#web容器" class="headerlink" title="web容器"></a>web容器</h2><ul><li><h3 id="什么是web容器"><a href="#什么是web容器" class="headerlink" title="什么是web容器"></a>什么是web容器</h3><ul><li>1.web容器是帮助我们部署java、php、python、vue等项目的</li></ul></li><li><h3 id="作用（处理请求，返回数据）"><a href="#作用（处理请求，返回数据）" class="headerlink" title="作用（处理请求，返回数据）"></a>作用（处理请求，返回数据）</h3><ul><li>第一，帮助django服务端处理客户端连接，官方号称可以处理10万（实现高并发） </li><li>第二，帮助处理静态资源请求（html、css、JS），返回给客户端浏览器（django等web服务 器处理静态资源能力差）</li></ul></li><li><h3 id="常见web容器"><a href="#常见web容器" class="headerlink" title="常见web容器"></a>常见web容器</h3><ul><li>nginx（python、php） <ul><li>LNMP <ul><li>L：LInux</li><li>N：Nginx </li><li>M：MySQL </li><li>P： php </li></ul></li></ul></li><li>apache（PHP） <ul><li>LAMP <ul><li>L：LInux </li><li>A：Apache </li><li>M：MySQL </li><li>P： php </li></ul></li></ul></li><li>Tomcat（JAVE）</li></ul></li></ul></li><li><h2 id="什么是WSGI（web协议）"><a href="#什么是WSGI（web协议）" class="headerlink" title="什么是WSGI（web协议）"></a>什么是WSGI（web协议）</h2><ul><li><p>WSGI是一种 python专用 的web协议 和http类似 </p></li><li><p>WSGI实质：WSGI是一种描述web服务器（如 nginx，uWSGI web服务器 ）如何与 web框架 （如用 Django、Flask框架写的程序）通信的规范、协议 </p></li><li><p>WSGI定义了使用 python编写的web app(django)与web server（uWSGI）之间接口格式 </p></li><li><h3 id="为什么需要web协议："><a href="#为什么需要web协议：" class="headerlink" title="为什么需要web协议："></a>为什么需要web协议：</h3><ul><li>1）不同的框架有不同的开发方式，但是无论如何，开发出的 应用程序(django)都要和服务器 (nginx)程序配合 ，才能为用户提供服务。 </li><li>2） 这样， 服务器程序(nginx) 就需要为不同的框架提供不同的支持,只有支持它的服务器才 能被开发出的应用使用，显然这是不可行的。 </li><li>3）web协议本质：就是定义了 Web服务器和Web应用程序或框架之间的一种简单而通用的接口规范 。</li></ul></li></ul></li><li><h2 id="uWSGI-（web服务器-和nginx类似）"><a href="#uWSGI-（web服务器-和nginx类似）" class="headerlink" title="uWSGI （web服务器 和nginx类似）"></a>uWSGI （web服务器 和nginx类似）</h2><ul><li>什么是uWSGI： uWSGI是一个全功能的HTTP服务器，实现了 WSGI协议 、 uwsgi协议 、 http协议 等。</li><li>uWSGI作用：它要做的就是把HTTP协议转化成语言支持的网络协议，比如把 HTTP协议转化成WSGI 协议，让Python可以直接使用 。 </li><li>uWSGI特点：轻量级，易部署，性能比nginx差很多,支持多种协议</li></ul></li><li><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><ul><li>Django是一个Web框架，框架的作用在于处理request和 reponse，其他的不是框架所关心的内容。 </li><li>所以如何部署Django不是Django所需要关心的。</li></ul></li><li><h2 id="nginx-uwsgi-django部署各模块作用"><a href="#nginx-uwsgi-django部署各模块作用" class="headerlink" title="nginx+uwsgi+django部署各模块作用"></a>nginx+uwsgi+django部署各模块作用</h2><ul><li><p><img src="https://img-blog.csdnimg.cn/20201211201749149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li><li><h3 id="Django-Uwsgi-Nginx方案"><a href="#Django-Uwsgi-Nginx方案" class="headerlink" title="Django + Uwsgi + Nginx方案"></a>Django + Uwsgi + Nginx方案</h3><ul><li><p><img src="https://img-blog.csdnimg.cn/2020121120172881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p></li><li><h4 id="请求处理整体流程"><a href="#请求处理整体流程" class="headerlink" title="请求处理整体流程"></a>请求处理整体流程</h4><ul><li>nginx接收到浏览器发送过来的http请求，将包进行解析，分析url </li><li>静态文件请求： 就直接访问用户给nginx配置的静态文件目录 (html/css/js/图片) ， 直接返回用户请求的静态文件 </li><li>动态接口请求： 那么nginx就将请求转发给uWSGI，最后到达django处理</li></ul></li><li><h4 id="各模块作用"><a href="#各模块作用" class="headerlink" title="各模块作用"></a>各模块作用</h4><ul><li>nginx ：是对外的服务器，外部浏览器通过url访问nginx，nginx主要处理静态请求    (html/css/js/图片)</li><li>uWSGI ：是对内的服务器，主要用来 处理动态请求 。(从mysql、redis、es等中动态查询到的 数据) </li><li>uwsgi ：是一种web协议，接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并 发给wsgi </li><li>wsgi ：是python专用的web协议，根据请求调用应用程序（django）的某个文件，某个文件 的某个函数 </li><li>django ：是真正干活的，查询数据等资源，把处理的结果再次返回给WSGI， WSGI 将返回值 进行打包，打包成uwsgi能够接收的格式 </li><li>uwsgi ：接收wsgi发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器</li></ul></li></ul></li><li><h3 id="Django-uWSGI方案特点"><a href="#Django-uWSGI方案特点" class="headerlink" title="Django + uWSGI方案特点"></a>Django + uWSGI方案特点</h3><ul><li>没有nginx而只有uwsgi的服务器，则是Internet请求直接由uwsgi处理，并反馈到web项目中。</li><li>nginx可以实现安全过滤，防DDOS等保护安全的操作，并且如果配置了多台服务器，nginx可以保 证服务器的负载相对均衡。 </li><li>而uwsgi则是一个web服务器，实现了WSGI协议(Web Server Gateway Interface)，http协议等，它可以 接收和处理请求，发出响应等。 所以只用uwsgi也是可以的。</li></ul></li><li><h3 id="nginx和uWSGI特点"><a href="#nginx和uWSGI特点" class="headerlink" title="nginx和uWSGI特点"></a>nginx和uWSGI特点</h3><ul><li><h4 id="nginx的作用"><a href="#nginx的作用" class="headerlink" title="nginx的作用"></a>nginx的作用</h4><ul><li>反向代理，可以拦截一些web攻击，保护后端的web服务器 </li><li>负载均衡，根据轮询算法，分配请求到多节点web服务器 </li><li>缓存静态资源，加快访问速度，释放web服务器的内存占用，专项专用</li></ul></li><li><h4 id="uWSGI的适用"><a href="#uWSGI的适用" class="headerlink" title="uWSGI的适用"></a>uWSGI的适用</h4><ul><li>单节点服务器的简易部署</li><li>轻量级，好部署zz</li></ul></li></ul></li></ul></li></ol><h1 id="配置Uwsgi-Nginx-Django-Vue"><a href="#配置Uwsgi-Nginx-Django-Vue" class="headerlink" title="配置Uwsgi+Nginx+Django+Vue"></a>配置Uwsgi+Nginx+Django+Vue</h1><ol><li><h2 id="django的settings配置"><a href="#django的settings配置" class="headerlink" title="django的settings配置"></a>django的settings配置</h2><ul><li><h3 id="这里可以先不必配置"><a href="#这里可以先不必配置" class="headerlink" title="这里可以先不必配置"></a>这里可以先不必配置</h3></li><li><p>修改配置</p><p>正式上线关闭调试模式, 不会暴露服务器信息</p><p>DEBUG = False</p></li><li><p>允许的主机</p><p>ALLOWED_HOSTS = [‘xxx.com’,’127.0.0.1’]</p></li><li><h3 id="这里可以需要配置"><a href="#这里可以需要配置" class="headerlink" title="这里可以需要配置"></a>这里可以需要配置</h3></li><li><p>前端修改接口地址（vue） </p><p><a href="http://192.168.56.100:8888/">http://192.168.56.100:8888/</a> =&gt; <a href="http://xxx.com/">http://xxx.com/</a> #</p></li><li><p> MySQL数据库根据实际情况配置（注意地址） </p></li><li><p>5.缓存配置, 改为默认, 最简单形式（配置redis） </p></li><li><p>6.收集静态文件 # 静态资源收集位置 </p><p>STATIC_ROOT = os.path.join(BASE_DIR, ‘static’) </p></li><li><p>7.命令行执行 python manage.py collectstatic</p></li></ul></li></ol><ol start="2"><li><h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3>   <pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>root@linux<span class="token operator">-</span>node1 <span class="token operator">/</span><span class="token punctuation">]</span><span class="token comment"># sudo apt update # 更新apt</span><span class="token punctuation">[</span>root@linux<span class="token operator">-</span>node1 <span class="token operator">/</span><span class="token punctuation">]</span><span class="token comment"># sudo apt install nginx # 安装nginx</span><span class="token punctuation">[</span>root@linux<span class="token operator">-</span>node1 <span class="token operator">/</span><span class="token punctuation">]</span><span class="token comment"># sudo systemctl status nginx</span></code></pre></li><li><h2 id="打包vue静态资源到Linux下"><a href="#打包vue静态资源到Linux下" class="headerlink" title="打包vue静态资源到Linux下"></a>打包vue静态资源到Linux下</h2><ul><li>在终端输入  npm  run build 打包</li><li><img src="https://img-blog.csdnimg.cn/20201114141442449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></li><li>生成之后复制到Linux下（我使用的是虚拟机）</li><li>放到自己想放到的地方  然后cd到目录中 输入”””pwd”””查看路径</li></ul></li><li><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><ul><li><p>在终端输入：vim  /etc/nginx/conf.d/django.conf  编辑以下文件格式  注意第二个server  是vue静态资源的绝对路径 </p></li><li><p>配置nginx+uwsgi启动  第一个server是Django的第二个server是Vue的</p></li></ul><pre class="language-python" data-language="python"><code class="language-python">  server <span class="token punctuation">&#123;</span>  listen <span class="token number">8888</span><span class="token punctuation">;</span>  server_name <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span><span class="token punctuation">;</span>    location <span class="token operator">/</span>static <span class="token punctuation">&#123;</span>  alias <span class="token operator">/</span>teach<span class="token operator">/</span>shiyanlou_project<span class="token operator">/</span>syl<span class="token operator">/</span>static<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  include uwsgi_params<span class="token punctuation">;</span>  uwsgi_pass <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token punctuation">;</span>  uwsgi_ignore_client_abort on<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  server <span class="token punctuation">&#123;</span>        listen <span class="token number">9000</span><span class="token punctuation">;</span>        server_name <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.100</span><span class="token punctuation">;</span>        root  <span class="token operator">/</span>home<span class="token operator">/</span>worker<span class="token operator">/</span>dist<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>                try_files $uri $uri<span class="token operator">/</span> @router<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        location @router <span class="token punctuation">&#123;</span>                rewrite <span class="token operator">^</span><span class="token punctuation">.</span><span class="token operator">*</span>$ <span class="token operator">/</span>index<span class="token punctuation">.</span>html last<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><h2 id="uwsgi和nginx-启动、关闭、查看日志"><a href="#uwsgi和nginx-启动、关闭、查看日志" class="headerlink" title="uwsgi和nginx 启动、关闭、查看日志"></a>uwsgi和nginx 启动、关闭、查看日志</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''1.启动并查看nginx日志'''</span>systemctl restart nginx <span class="token comment"># 开启nginx</span>tail <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log <span class="token comment"># 查看nginx接入日志</span>tail <span class="token operator">-</span>f <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log <span class="token comment"># 查看nginx错误日志</span><span class="token triple-quoted-string string">'''2.启动并查看uwsgi日志'''</span>cd <span class="token operator">/</span>teach<span class="token operator">/</span>shiyanlou_project<span class="token operator">/</span>uwsgi_conf <span class="token comment"># 进入实验楼目录</span>uwsgi <span class="token operator">-</span><span class="token operator">-</span>ini uwsgi<span class="token punctuation">.</span>ini <span class="token comment"># 启动uwsgi的</span>django项目<span class="token comment"># http://192.168.56.100:8888/ 访问项目</span>uwsgi <span class="token operator">-</span><span class="token operator">-</span>stop uwsgi<span class="token punctuation">.</span>pid <span class="token comment"># 关闭uwsgi</span>tail <span class="token operator">-</span>f uwsgi<span class="token punctuation">.</span>log <span class="token comment"># 查看uwsgi日志</span>ps <span class="token operator">-</span>ef<span class="token operator">|</span>grep uwsgi <span class="token comment"># 查看uwsgi服务是否启动</span>root <span class="token number">92328</span> <span class="token number">89266</span> <span class="token number">0</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">37</span> pts<span class="token operator">/</span><span class="token number">1</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span> grep <span class="token operator">-</span><span class="token operator">-</span>color<span class="token operator">=</span>auto uwsginetstat <span class="token operator">-</span>anptu <span class="token operator">|</span> grep <span class="token number">8888</span> <span class="token comment"># 查看8888端口被哪一个程序</span>占用</code></pre></li><li><h2 id="配置vue跨域"><a href="#配置vue跨域" class="headerlink" title="配置vue跨域"></a>配置vue跨域</h2><p>在components下axios_api下修改   （这个是我自己的跨域文件，你需要修改你自己的） </p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://192.168.56.100:8888/"</span></code></pre></li><li><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2></li></ol><ul><li><p>获取id</p></li><li><pre class="language-python" data-language="python"><code class="language-python">ps <span class="token operator">-</span>A <span class="token operator">|</span>grep 名字</code></pre></li><li><p>杀死</p></li><li><pre class="language-python" data-language="python"><code class="language-python">kill <span class="token operator">-</span><span class="token number">9</span> <span class="token builtin">id</span></code></pre></li><li><p>启动</p></li><li><pre class="language-python" data-language="python"><code class="language-python">systemctl stop nginxsystemctl start nginx或者systemctl restart nginx    uwsgi <span class="token operator">-</span><span class="token operator">-</span>ini uwsgi<span class="token punctuation">.</span>ini</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
          <category> django2.0.4--vue </category>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程-线程-协程-详解</title>
      <link href="%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B-%E8%AF%A6%E8%A7%A3/"/>
      <url>%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中-进程-线程-协程-多任务概念-重点"><a href="#Python中-进程-线程-协程-多任务概念-重点" class="headerlink" title="Python中 进程 线程 协程 (多任务概念/重点)"></a>Python中 进程 线程 协程 (多任务概念/重点)</h1><h2 id="进程，是执行中的计算机程序。也就是说，每个代码在执行的时候，首先本身即是一个进程。"><a href="#进程，是执行中的计算机程序。也就是说，每个代码在执行的时候，首先本身即是一个进程。" class="headerlink" title="进程，是执行中的计算机程序。也就是说，每个代码在执行的时候，首先本身即是一个进程。"></a>进程，是执行中的计算机程序。也就是说，每个代码在执行的时候，首先本身即是一个进程。</h2><p>具体操作：<a href="https://v3u.cn/a_id_113">https://v3u.cn/a_id_113</a></p><p>一个进程具有:就绪，运行，中断，僵死，结束等状态(不同操作系统不一样)。</p><p>生命周期：</p><p>用户编写代码(代码本身是以进程运行的)</p><p>启动程序，进入进程“就绪”状态</p><p>操作系统调度资源，做“程序切换”，使得进程进入“运行”状态</p><p>结束/中断</p><p>特性</p><p>每个程序，本身首先是一个进程</p><p>运行中每个进程都拥有自己的地址空间、内存、数据栈及其它资源。</p><p>操作系统本身自动管理着所有的进程(不需要用户代码干涉)，并为这些进程合理分配可以执行时间。</p><p>进程可以通过派生新的进程来执行其它任务，不过每个进程还是都拥有自己的内存和数据栈等。</p><p>进程间可以通讯(发消息和数据)，采用 进程间通信(IPC) 方式。</p><p>说明</p><p>多个进程可以在不同的 CPU 上运行，互不干扰</p><p>同一个CPU上，可以运行多个进程，由操作系统来自动分配时间片</p><p>由于进程间资源不能共享，需要进程间通信，来发送数据，接受消息等</p><p>多进程，也称为“并行”。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>进程彼此之间互相隔离，要实现进程间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的。</p><h3 id="进程队列queue"><a href="#进程队列queue" class="headerlink" title="进程队列queue"></a>进程队列queue</h3><p>不同于线程queue，进程queue的生成是用multiprocessing模块生成的。</p><p>在生成子进程的时候，会将代码拷贝到子进程中执行一遍，及子进程拥有和主进程内容一样的不同的名称空间。</p><p>multiprocess.Queue 是跨进程通信队列</p><p>常用方法</p><pre class="language-python" data-language="python"><code class="language-python">q<span class="token punctuation">.</span>put方法用以插入数据到队列中，put方法还有两个可选参数：blocked和timeout。如果blocked为<span class="token boolean">True</span>（默认值），并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会抛出Queue<span class="token punctuation">.</span>Full异常。如果blocked为<span class="token boolean">False</span>，但该Queue已满，会立即抛出Queue<span class="token punctuation">.</span>Full异常。q<span class="token punctuation">.</span>get方法可以从队列读取并且删除一个元素。同样，get方法有两个可选参数：blocked和timeout。如果blocked为<span class="token boolean">True</span>（默认值），并且timeout为正值，那么在等待时间内没有取到任何元素，会抛出Queue<span class="token punctuation">.</span>Empty异常。如果blocked为<span class="token boolean">False</span>，有两种情况存在，如果Queue有一个值可用，则立即返回该值，否则，如果队列为空，则立即抛出Queue<span class="token punctuation">.</span>Empty异常<span class="token punctuation">.</span>q<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>同q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>同q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>调用此方法时q为空则返回<span class="token boolean">True</span>，该结果不可靠，比如在返回<span class="token boolean">True</span>的过程中，如果队列中又加入了项目。q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span>：调用此方法时q已满则返回<span class="token boolean">True</span>，该结果不可靠，比如在返回<span class="token boolean">True</span>的过程中，如果队列中的项目被取走。q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>返回队列中目前项目的正确数量，结果也不可靠，理由同q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span>和q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span>一样</code></pre><h3 id="管道pipe"><a href="#管道pipe" class="headerlink" title="管道pipe"></a>管道pipe</h3><p>管道就是管道，就像生活中的管道，两头都能进能出</p><p>默认管道是全双工的，如果创建管道的时候映射成False，左边只能用于接收，右边只能用于发送，类似于单行道</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">:</span>    sk<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    conn1<span class="token punctuation">,</span>conn2<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#开辟两个口，都是能进能出，括号中如果False即单向通信</span>    p<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>foo<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>conn1<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#子进程使用sock口，调用foo函数</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>conn2<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#主进程使用conn口接收</span>    conn2<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'hi son'</span><span class="token punctuation">)</span> <span class="token comment">#主进程使用conn口发送</span></code></pre><p>常用方法</p><pre class="language-python" data-language="python"><code class="language-python">conn1<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>接收conn2<span class="token punctuation">.</span>send<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>发送的对象。如果没有消息可接收，recv方法会一直阻塞。如果连接的另外一端已经关闭，那么recv方法会抛出EOFError。conn1<span class="token punctuation">.</span>send<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>通过连接发送对象。obj是与序列化兼容的任意对象注意：send<span class="token punctuation">(</span><span class="token punctuation">)</span>和recv<span class="token punctuation">(</span><span class="token punctuation">)</span>方法使用pickle模块对对象进行序列化</code></pre><h3 id="共享数据manage"><a href="#共享数据manage" class="headerlink" title="共享数据manage"></a>共享数据manage</h3><p>Queue和pipe只是实现了数据交互，并没实现数据共享，即一个进程去更改另一个进程的数据。</p><p>注：进程间通信应该尽量避免使用共享数据的方式</p><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>开多进程是为了并发，通常有几个cpu核心就开几个进程，但是进程开多了会影响效率，主要体现在切换的开销，所以引入进程池限制进程的数量。</p><p>进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进进程，那么程序就会等待，直到进程池中有可用进程为止。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程，是在进程中执行的代码。</p><p>一个进程下可以运行多个线程，这些线程之间共享主进程内申请的操作系统资源。</p><p>在一个进程中启动多个线程的时候，每个线程按照顺序执行。现在的操作系统中，也支持线程抢占，也就是说其它等待运行的线程，可以通过优先级，信号等方式，将运行的线程挂起，自己先运行。</p><p>使用</p><p>用户编写包含线程的程序(每个程序本身都是一个进程)</p><p>操作系统“程序切换”进入当前进程</p><p>当前进程包含了线程，则启动线程</p><p>多个线程，则按照顺序执行，除非抢占</p><p>特性</p><p>线程，必须在一个存在的进程中启动运行</p><p>线程使用进程获得的系统资源，不会像进程那样需要申请CPU等资源</p><p>线程无法给予公平执行时间，它可以被其他线程抢占，而进程按照操作系统的设定分配执行时间</p><p>每个进程中，都可以启动很多个线程</p><p>说明</p><p>多线程，也被称为”并发“执行。</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>系统启动一个新线程的成本是比较高的，因为它涉及与操作系统的交互。在这种情形下，使用线程池可以很好地提升性能，尤其是当程序中需要创建大量生存期很短暂的线程时，更应该考虑使用线程池。</p><p>线程池在系统启动时即创建大量空闲的线程，程序只要将一个函数提交给线程池，线程池就会启动一个空闲的线程来执行它。当该函数执行结束后，该线程并不会死亡，而是再次返回到线程池中变成空闲状态，等待执行下一个函数。</p><p>此外，使用线程池可以有效地控制系统中并发线程的数量。当系统中包含有大量的并发线程时，会导致系统性能急剧下降，甚至导致 Python 解释器崩溃，而线程池的最大线程数参数可以控制系统中并发线程的数量不超过此数。</p><h3 id="多线程通信"><a href="#多线程通信" class="headerlink" title="多线程通信"></a>多线程通信</h3><h4 id="共享变量"><a href="#共享变量" class="headerlink" title="共享变量"></a>共享变量</h4><p>创建全局变量，多个线程公用一个全局变量，方便简单。但是坏处就是共享变量容易出现数据竞争，不是线程安全的，解决方法就是使用互斥锁。</p><h4 id="变量共享引申出线程同步问题"><a href="#变量共享引申出线程同步问题" class="headerlink" title="变量共享引申出线程同步问题"></a>变量共享引申出线程同步问题</h4><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。 使用Thread对象的Lock和Rlock可以实现简单的线程同步，这两个对象都有acquire方法和release方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到acquire和release方法之间。</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>线程间使用队列进行通信，因为队列所有方法都是线程安全的，所以不会出现线程竞争资源的情况</p><p>Queue.Queue 是进程内非阻塞队列</p><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><p>一个进程中的各个线程与主进程共享相同的资源，与进程间互相独立相比，线程之间信息共享和通信更加容易(都在进程中，并且共享内存等)。</p><p>线程一般以并发执行，正是由于这种并发和数据共享机制，使多任务间的协作成为可能。</p><p>进程一般以并行执行，这种并行能使得程序能同时在多个CPU上运行;</p><p>区别于多个线程只能在进程申请到的的“时间片”内运行(一个CPU内的进程，启动了多个线程，线程调度共享这个进程的可执行时间片)，进程可以真正实现程序的“同时”运行(多个CPU同时运行)。</p><p>进程和线程的常用应用场景</p><p>一般来说,在Python中编写并发程序的经验:</p><p>计算密集型任务使用多进程</p><p>IO密集型(如:网络通讯)任务使用多线程，较少使用多进程.</p><p>这是由于 IO操作需要独占资源，比如:</p><p>网络通讯(微观上每次只有一个人说话，宏观上看起来像同时聊天)每次只能有一个人说话</p><p>文件读写同时只能有一个程序操作(如果两个程序同时给同一个文件写入 ‘a’, ‘b’，那么到底写入文件的哪个呢?)</p><p>都需要控制资源每次只能有一个程序在使用，在多线程中，由主进程申请IO资源，多线程逐个执行，哪怕抢占了，也是逐个运行，感觉上“多线程”并发执行了。</p><p>如果多进程，除非一个进程结束，否则另外一个完全不能用，显然多进程就“浪费”资源了。</p><p>当然如上解释可能还不足够立即理解问题所在，让我们通过不断的实操来体验其中的“门道”。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程: 协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行.</p><p>协程由于由程序主动控制切换，没有线程切换的开销，所以执行效率极高。对于IO密集型任务非常适用，如果是cpu密集型，推荐多进程+协程的方式。</p><p>协程，又称微线程。</p><p>说明</p><p>协程的主要特色是:</p><p>协程间是协同调度的，这使得并发量数万以上的时候，协程的性能是远远高于线程。</p><p>注意这里也是“并发”，不是“并行”。</p><p>常用库：greenlet gevent</p><p>协程优点：</p><p>　　1. 协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级</p><p>　　2. 单线程内就可以实现并发的效果，最大限度地利用cpu</p><p>协程缺点：</p><p>　　1.协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程</p><p>　　2.协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程</p><h2 id="python中的协程"><a href="#python中的协程" class="headerlink" title="python中的协程"></a>python中的协程</h2><p>一个协程是一个函数/子程序（可以认为函数和子程序是指一个东西）。这个函数可以暂停执行， 把执行权让给 YieldInstruction，等 YieldInstruction 执行完成后，这个函数可以继续执行。 这个函数可以多次这样的暂停与继续。</p><p>注：这里的 YieldInstruction, 我们其实也可以简单理解为函数。</p><p>协程可以在“卡住”的时候可以干其它事情。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">long_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'long task started'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'long task finished'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>long_task<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Task pending coro<span class="token operator">=</span><span class="token operator">&lt;</span>long_task<span class="token punctuation">(</span><span class="token punctuation">)</span> running at <span class="token operator">&lt;</span>stdin<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>job1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                                                                                                                                                                            <span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>job1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Task pending coro<span class="token operator">=</span><span class="token operator">&lt;</span>job1<span class="token punctuation">(</span><span class="token punctuation">)</span> running at <span class="token operator">&lt;</span>stdin<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token builtin">long</span> task startedjob1 started<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>job1 pausedhello worldjob1 resumedjob1 finished<span class="token builtin">long</span> task finished</code></pre><p>从这段程序的输出可以看出，程序本来是在执行 long task 协程，但由于 long task 要 await sleep 1 秒，于是 long task 自动暂停了，hello_world 协程自动开始执行， hello world 执行完之后，long task 继续执行。</p><p>协程有两种定义的方法， 其中使用生成器形式定义的协程叫做 generator-based coroutine, 通过 async/await 声明的协程叫做 native coroutine，两者底层实现都是生成器。接着， 我们阐述了协程的概念，从概念和例子出发，讲了协程和生成器最主要的特征：可以暂停执行和恢复执行。</p><h3 id="协程异常处理"><a href="#协程异常处理" class="headerlink" title="协程异常处理"></a>协程异常处理</h3><p>使用协程的时候一定加了很多的异常,但百密而一疏,总是会有想象不到的异常发生,这个时候为了不让程序整体崩溃应该使用协程的额外异常处理方法,这个方法会去执行绑定的回调函数.</p><pre class="language-python" data-language="python"><code class="language-python">g_dict<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>g <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_g_fetcher<span class="token punctuation">,</span> feed_name<span class="token punctuation">)</span>   <span class="token comment"># 创建协程</span>g_dict<span class="token punctuation">[</span>feed_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>g<span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span>g<span class="token punctuation">.</span>link_exception<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_link_exception_callback<span class="token punctuation">)</span>  <span class="token comment"># 给该协程添加出现处理不了的异常时候的回调函数</span><span class="token keyword">def</span> <span class="token function">_link_exception_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 可能遇到无法修复的错误，需要修改代码 todo 报警</span>    <span class="token comment"># 可以在这个函数里面做一些错误异常的打印,或者文件的关闭,连接的关闭.</span>    self<span class="token punctuation">.</span>terminated_flag <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># 停止整个程序 让 supervior重启</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"_link_exception_callback &#123;0&#125; &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> g<span class="token punctuation">.</span>exception<span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_kill_sleep_gevent<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 轮询结束休眠的协程</span><span class="token keyword">def</span> <span class="token function">_kill_sleep_gevent</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>is_sleep <span class="token keyword">in</span> g_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_sleep<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"True"</span><span class="token punctuation">:</span>            gevent<span class="token punctuation">.</span>kill<span class="token punctuation">(</span>is_sleep<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="greenlet框架实现协程（封装yield的基础库）"><a href="#greenlet框架实现协程（封装yield的基础库）" class="headerlink" title="greenlet框架实现协程（封装yield的基础库）"></a>greenlet框架实现协程（封装yield的基础库）</h3><p>greenlet机制的主要思想是：生成器函数或者协程函数中的yield语句挂起函数的执行，直到稍后使用next()或send()操作进行恢复为止。可以使用一个调度器循环在一组生成器函数之间协作多个任务。greentlet是python中实现我们所谓的”Coroutine(协程)”的一个基础库。</p><h3 id="基于greenlet框架的高级库gevent模块"><a href="#基于greenlet框架的高级库gevent模块" class="headerlink" title="基于greenlet框架的高级库gevent模块"></a>基于greenlet框架的高级库gevent模块</h3><p>gevent是第三方库，通过greenlet实现协程，其基本思想是：</p><p>当一个greenlet遇到IO操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。</p><h1 id="原生协程"><a href="#原生协程" class="headerlink" title="原生协程"></a>原生协程</h1><p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存，在调度回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合</p><p>async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>t<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用了%s'</span> <span class="token operator">%</span> t<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span>job<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 使用 async 关键字将一个函数定义为协程</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>t<span class="token punctuation">)</span>  <span class="token comment"># 等待 t 秒, 期间切换执行其他任务</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'用了%s秒'</span> <span class="token operator">%</span> t<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 使用 async 关键字将一个函数定义为协程</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>job<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 创建任务, 不立即执行</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>  <span class="token comment"># 执行并等待所有任务完成</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 建立 loop</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 执行 loop</span>loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭 loop</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程-线程-协程-初解</title>
      <link href="python3%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B-%E8%AF%A6%E8%A7%A3/"/>
      <url>python3%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B-%E5%8D%8F%E7%A8%8B-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序：例如xxx.py这是程序，是一个静态的</p><p>进程：一个程序运行起来后，代码+用到的资源称之为进程，它是操作系统分配资源的基本单元。</p><p>不仅可以通过线程完成多任务，进程也是可以的</p><h2 id="进程和线程的区别？"><a href="#进程和线程的区别？" class="headerlink" title="进程和线程的区别？"></a>进程和线程的区别？</h2><p>1.进程:通俗理解一个运行起来的程序或者软件就叫做进程，<br>每启动一个进程，操作系统都需要给对应的进程分配运行资源，<br>运行资源是让线程执行代码的时候使用，所以进程是操作系统分配资源的基本单位，默认一个进程只有一个线程，这个线程是主线程<br>进程只提供资源，真正干活的是线程</p><p>2.0线程和进程的区别<br>    2.1线程之间共享全局变量<br>    2.2进程之间不共享全局变量<br>    2.3进程：每开辟一个进程都需要向操作系统分配资源，而线程可以共享进程中的资源<br>    2.4多进程开发比单进程开发程序的稳定性要强，因为多进程开发，某个进程死了，不会影响启动进程的运行</p><p> <strong>注意点 多进程开发需要更多资源，而多线程开发可以共享进程中的资源</strong></p><h2 id="Python中使用过的进程模块？"><a href="#Python中使用过的进程模块？" class="headerlink" title="Python中使用过的进程模块？"></a>Python中使用过的进程模块？</h2><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><ul><li><code>multiprocessing</code>是一个使用类似于线程模块的API支持产生进程的包。</li><li>多处理包提供本地和远程并发，通过使用子进程而不是线程有效地侧向执行全局解释器锁。</li><li>因此，多处理模块允许程序员充分利用给定机器上的多个处理器。 它可以在Unix和Windows上运行。</li><li><code>进程池抓取页面</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-->exec done:'</span><span class="token punctuation">,</span><span class="token string">"测试进程池执行后回调功能"</span><span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 创建线程池</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        <span class="token comment">#用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>func<span class="token operator">=</span>fetch_request<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>call<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#关闭pool</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></code></pre><h3 id="concurrent-futures"><a href="#concurrent-futures" class="headerlink" title="concurrent.futures"></a>concurrent.futures</h3><ul><li><code>1、简介</code> <a href="https://docs.python.org/3/library/concurrent.futures.html">参考官网</a><ul><li>1、Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程/多进程代码</li><li>2、但是当项目达到一定的规模，频繁创建/销毁进程或者线程是非常消耗资源的，这个时候我们就要编写自己的线程池/进程池，以空间换时间。</li><li>3、但从Python3.2开始，标准库为我们提供了concurrent.futures模块，它提供了ThreadPoolExecutor和ProcessPoolExecutor两个类，</li><li>4、实现了对threading和multiprocessing的进一步抽象，对编写线程池/进程池提供了直接的支持。</li></ul></li><li><code>2、Executor和Future</code><ul><li><code>1. Executor</code></li><li>concurrent.futures模块的基础是Exectuor，Executor是一个抽象类，它不能被直接使用。</li><li>但是它提供的两个子类ThreadPoolExecutor和ProcessPoolExecutor却是非常有用</li><li>我们可以将相应的tasks直接放入线程池/进程池，不需要维护Queue来操心死锁的问题，线程池/进程池会自动帮我们调度。</li><li><code>2. Future</code></li><li>Future你可以把它理解为一个在未来完成的操作，这是异步编程的基础，</li><li>传统编程模式下比如我们操作queue.get的时候，在等待返回结果之前会产生阻塞，cpu不能让出来做其他事情</li><li>而Future的引入帮助我们在等待的这段时间可以完成其他的操作。</li></ul></li><li>3、concurrent.futures.ProcessPoolExecutor 抓取网页</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 创建线程池</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fetch_request<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment"># 去线程池中获取一个进程，进程去执行fetch_request方法</span>    pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span>wait <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># shutdown相当于一个开关，它会读取程序中所设定的进程总数，直至每开启一个进程，它读取设定的总数就会减一，直至为0时便会打印主线程</span></code></pre><h2 id="Process语法结构"><a href="#Process语法结构" class="headerlink" title="Process语法结构"></a>Process语法结构</h2><p>​    Process([group [, target [, name [, args [, kwargs]]]]])<br>​    target：如果传递了函数的引用，可以任务这个子进程就执行这里的代码  tardet=<br>​    args：给target指定的函数传递的参数，以元组的方式传递         (n,)<br>​    kwargs：给target指定的函数传递命名参数           {“n”,”m”}<br>​    name：给进程设定一个名字，可以不设定      name =<br>​    group：指定进程组，大多数情况下用不到</p><h3 id="Process创建的实例对象的常用方法："><a href="#Process创建的实例对象的常用方法：" class="headerlink" title="Process创建的实例对象的常用方法："></a>Process创建的实例对象的常用方法：</h3><p>​        start()：启动子进程实例（创建子进程）   进程变量名.start()<br>​        is_alive()：判断主进程或子进程是否还在活着  print(进程变量名.is_alive)<br>​        join([timeout])：是否等待子进程执行结束，或等待多少秒    进程变量名.join()<br>​        terminate()：不管任务是否完成，立即终止子进程        进程变量名.terminate()<br>​    </p><pre><code>守护主进程# copy_work_process.daemon = True   </code></pre><p>Process创建的实例对象的常用属性：<br>    name：当前进程的别名，默认为Process-N，N为从1开始递增的整数<br>    pid：当前进程的pid（进程号）  父类的ppid</p><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><ul><li><code>1）僵尸进程定义</code><ul><li><ol><li>僵尸进程产生的原因就是父进程产生子进程后，子进程先于父进程退出</li></ol></li><li><ol><li>但是父进程由于种种原因，并没有处理子进程发送的退出信号，那么这个子进程就会成为僵尸进程。</li></ol></li></ul></li><li><code>2）用python写一个僵尸进程</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment">#coding=utf8</span> <span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> time<span class="token comment">#产生子进程</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment">#子进程退出</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#父进程休息30秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># 先产生一个子进程，子进程退出，父进程休息30秒,那就会产生一个僵尸进程</span></code></pre><ul><li><p><code>ps -ef| grep defunct</code> 在linux下查看僵尸进程</p><ul><li><pre><code class="python">[root@linux-node4 ~]# ps -ef| grep defunctroot     110401  96083  0 19:11 pts/2    00:00:00 python defunct.pyroot     110402 110401  0 19:11 pts/2    00:00:00 [python] &lt;defunct&gt;root     110406  96105  0 19:11 pts/3    00:00:00 grep --color=auto defunct<pre class="language-none"><code class="language-none">## 进程的格式&#96;&#96;&#96;pythonimport multiprocessingdef func(name, age, sex):    passif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    # 创建线程对象      (target &#x3D; 执行目标函数名)    say_thread &#x3D; multiprocessing.Process(target&#x3D;func, kwargs&#x3D;&#123;&#39;name&#39;: &quot;老王&quot;, &#39;sex&#39;: &#39;男&#39;, &#39;age&#39;: &quot;18&quot;, &#125;)    # 启动    say_thread.start()# 进程之间不共享全局变量import multiprocessinga &#x3D; [11, 22]def fun():    a.append(33)    print(a)def fun1():    a.append(44)    print(a)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    mult_fun &#x3D; multiprocessing.Process(target&#x3D;fun)    mult_fun1 &#x3D; multiprocessing.Process(target&#x3D;fun1)    mult_fun.start()    mult_fun1.start()</code></pre></code></pre></li></ul></li></ul><h2 id="判断进程是否存活"><a href="#判断进程是否存活" class="headerlink" title="判断进程是否存活"></a>判断进程是否存活</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># name 给进程设定一个名字，可以不设定</span><span class="token comment"># is_alive()：判断主进程或子进程是否还在活着</span><span class="token comment"># 有这俩种方法的demo</span><span class="token comment"># import multiprocessing,time</span><span class="token comment">#</span><span class="token comment"># def copy_work():</span><span class="token comment">#     for i in range(5):</span><span class="token comment">#         print("正在复制中---",i+1)</span><span class="token comment">#         time.sleep(0.5)</span><span class="token comment">#</span><span class="token comment"># def copy_work2():</span><span class="token comment">#     for i in range(5):</span><span class="token comment">#         print("正在复制中---",i+1)</span><span class="token comment">#         time.sleep(0.5)</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     #创建子进程</span><span class="token comment">#     copy_work_process = multiprocessing.Process(target=copy_work,name="laowang")</span><span class="token comment">#     copy_work_process2 = multiprocessing.Process(target=copy_work,name="laowang")</span><span class="token comment">#     print(copy_work_process)</span><span class="token comment">#     print(copy_work_process2)</span><span class="token comment">#     #启动进程</span><span class="token comment">#     copy_work_process.start()</span><span class="token comment">#     copy_work_process2.start()</span><span class="token comment">#     # time.sleep(5)   #False</span><span class="token comment">#     time.sleep(1)   #True</span><span class="token comment">#     print(    copy_work_process.is_alive())</span><span class="token comment">#     print(    copy_work_process2.is_alive())</span></code></pre><h2 id="销毁子进程查看进程编号"><a href="#销毁子进程查看进程编号" class="headerlink" title="销毁子进程查看进程编号"></a>销毁子进程查看进程编号</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""翔翔的demo"""</span><span class="token comment"># 主线程跟子线程同时结束的demo</span><span class="token comment"># import multiprocessing,time</span><span class="token comment">#</span><span class="token comment"># def copy_work():</span><span class="token comment">#     for i in range(5):</span><span class="token comment">#         print("正在复制中---",i+1)</span><span class="token comment">#         time.sleep(0.5)</span><span class="token comment">#</span><span class="token comment"># def copy_work2():</span><span class="token comment">#     for i in range(5):</span><span class="token comment">#         print("正在复制中---",i+1)</span><span class="token comment">#         time.sleep(0.5)</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     print("主线程开始")</span><span class="token comment">#     #创建子进程</span><span class="token comment">#     copy_work_process = multiprocessing.Process(target=copy_work,name="laowang")</span><span class="token comment">#     copy_work_process2 = multiprocessing.Process(target=copy_work,name="laowang")</span><span class="token comment">#     # 方法一  守护主进程</span><span class="token comment">#     # copy_work_process.daemon = True</span><span class="token comment">#     # copy_work_process2.daemon = True</span><span class="token comment">#</span><span class="token comment">#     #启动进程</span><span class="token comment">#     copy_work_process.start()</span><span class="token comment">#     copy_work_process2.start()</span><span class="token comment">#     # copy_work_process.join()</span><span class="token comment">#     time.sleep(1)</span><span class="token comment">#     print("主线程结束")</span><span class="token comment">#     # 方法二  销毁子进程</span><span class="token comment">#     copy_work_process.terminate()</span><span class="token comment">#     copy_work_process2.terminate()</span><span class="token comment"># "子进程编号：",os.getpid()</span><span class="token comment"># "主进程编号：",os.getppid()</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span> time<span class="token punctuation">,</span> os<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程编号："</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"主进程编号："</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"启动"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 创建线程对象      (target = 执行目标函数名)</span>    say_thread <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">"老王"</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">"18"</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 启动</span>    say_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span></code></pre><h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""翔翔的demo"""</span><span class="token triple-quoted-string string">"""Process之间有时需要通信，可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息队列程序初始化Queue()对象时（例如：q=Queue(5)），若括号中没有指定最大可接收的消息数量，那么就代表可接受的消息数量没有上限（直到内存的尽头）；Queue.qsize()：返回当前队列包含的消息数量；Queue.empty()：如果队列为空，返回True，反之False ；Queue.full()：如果队列满了，返回True,反之False；Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True"""</span><span class="token keyword">import</span> multiprocessing<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> queue<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"队列满了"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"写入的数据为："</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ss <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    fun1_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>fun1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fun2_process <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>fun2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fun1_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    fun1_process<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    fun2_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    fun2_process<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><h3 id="进程池的作用：快速批量创建进程"><a href="#进程池的作用：快速批量创建进程" class="headerlink" title="进程池的作用：快速批量创建进程"></a>进程池的作用：快速批量创建进程</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""翔翔的demo"""</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> osi <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">copy_work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> i    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在复制中---%d"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建进程池</span>    <span class="token comment"># 指定进程池数量表示进程池中最多一次性创建的数列</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 让进程池执行复制任务</span>        <span class="token comment"># 使用同步的方式去执行任务，进程池中的需要等待其它进程执行完成后才能执行置地指定任务</span>        <span class="token comment"># pool.apply(copy_work)</span>        <span class="token comment"># 异步执行进程池中的进程一起执行，不会等待其他进程的执行</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>copy_work<span class="token punctuation">)</span>    <span class="token comment"># 提示--主进程不会等待进程池把执行任务完成以后程序在退出</span>    <span class="token comment"># 提示--进程池不在接受qi其它需要执行的任务</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 等待进程池把任务执行完成以后程序在退出</span>    <span class="token comment"># 同时具有启动进程的作用</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><ul><li>1）线程是操作系统调度的最小单位</li><li>2）线程是进程正真的执行者，是一些指令的集合（进程资源的拥有者）</li><li>3）同一个进程下的多个<code>线程共享内存空间</code>，数据直接访问（数据共享）</li><li>4）为了保证数据安全，必须使用<code>线程锁</code></li></ul><p><code>说明：</code>下面利用for循环同时启动50个线程并行执行，执行时间是3秒而不是所有线程执行时间的总和</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sayhi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义每个线程要运行的函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running on number:%s"</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sayhi<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'t-%s'</span><span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="GIL锁和线程锁"><a href="#GIL锁和线程锁" class="headerlink" title="GIL锁和线程锁"></a>GIL锁和线程锁</h2><ul><li>GIL全局解释器锁<ul><li>在python全局解释器下，保证同一时间只有一个线程运行</li><li>防止多个线程都修改数据</li></ul></li><li>线程锁（互斥锁）<ul><li>GIL锁只能保证同一时间只能有一个线程对某个资源操作，但当上一个线程还未执行完毕时可能就会释放GIL，其他线程就可以操作了</li><li>线程锁本质把线程中的数据加了一把互斥锁<ul><li>加上线程锁之后所有其他线程，读都不能读这个数据</li></ul></li><li>有了GIL全局解释器锁为什么还需要线程锁<ul><li>因为cpu是分时使用的</li></ul></li></ul></li><li><code>在有GIL的情况下执行 count = count + 1 会出错原因解析，用线程锁解决方法</code></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 1）第一步：count = 0   count初始值为0</span><span class="token comment"># 2）第二步：线程1要执行对count加1的操作首先申请GIL全局解释器锁</span><span class="token comment"># 3）第三步：调用操作系统原生线程在操作系统中执行</span><span class="token comment"># 4）第四步：count加1还未执行完毕，时间到了被要求释放GIL</span><span class="token comment"># 5）第五步：线程1释放了GIL后线程2此时也要对count进行操作，此时线程1还未执行完，所以count还是0</span><span class="token comment"># 6）第六步：线程2此时拿到count = 0后也要对count进行加1操作，假如线程2执行很快，一次就完成了</span><span class="token comment">#    count加1的操作，那么count此时就从0变成了1</span><span class="token comment"># 7）第七步：线程2执行完加1后就赋值count=1并释放GIL</span><span class="token comment"># 8）第八步：线程2执行完后cpu又交给了线程1，线程1根据上下文继续执行count加1操作，先拿到GIL</span><span class="token comment">#    锁，完成加1操作，由于线程1先拿到的数据count=0，执行完加1后结果还是1</span><span class="token comment"># 9）第九步：线程1将count=1在次赋值给count并释放GIL锁，此时连个线程都对数据加1，但是值最终是1</span></code></pre><ul><li><pre><code>死锁定义<pre class="language-none"><code class="language-none">  - 两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去## 创建线程&#96;&#96;&#96;python# 单线程# import threading,time## def func():#     for i in range(5):#         print(&quot;hello python&quot;)#         time.sleep(1)## if __name__ &#x3D;&#x3D; &#39;__main__&#39;:# 创建线程对象#     say_thread &#x3D; threading.Thread(target&#x3D;func)# 启动#     say_thread.start()# 有参数的  args&#x3D; ()    kwargs &#x3D; &#123;&#125;import threading, timedef func(name, age, sex):    print(name, age, sex)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    # 创建线程对象      (target &#x3D; 执行目标函数名)    say_thread &#x3D; threading.Thread(target&#x3D;func, kwargs&#x3D;&#123;&#39;name&#39;: &quot;老王&quot;, &#39;sex&#39;: &#39;男&#39;, &#39;age&#39;: &quot;18&quot;, &#125;)    # 启动    say_thread.start()</code></pre></code></pre></li></ul><h2 id="线程的性质-无序性"><a href="#线程的性质-无序性" class="headerlink" title="线程的性质  无序性"></a>线程的性质  无序性</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># .join()       #线程等待 执行完一个在执行下一个</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;_MainThread(MainThread, started 11156)></span>    <span class="token comment"># 在demo未创建程序之前，默认存在一个主线程，这个主线程的作用为：执行程序下方的代码，当代码执行完毕后，主线程默认结束</span>    <span class="token comment"># 创建子线程对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"线程开始执行"</span><span class="token punctuation">)</span>    say_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    say_thread1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 启动</span>    say_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    say_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 线程等待 执行完一个在执行下一个</span>    say_thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    say_thread1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 线程等待 执行完一个在执行下一个</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"线程结束执行"</span><span class="token punctuation">)</span></code></pre><h2 id="多线程共享全局变量"><a href="#多线程共享全局变量" class="headerlink" title="多线程共享全局变量"></a>多线程共享全局变量</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 多线程在共享全局变量中</span><span class="token comment"># 优点：重复代码的复用率(重复利用的简写)</span><span class="token comment"># 缺点：由于多线程之间出现了资源的恶意竞争问题，进而的会导致计算结果的错误和混乱</span><span class="token comment"># 解决缺点的方法</span><span class="token comment"># 1.0 join()</span><span class="token comment"># 共享全局变量</span><span class="token comment"># import threading</span><span class="token comment"># alist = [11,22]</span><span class="token comment">#</span><span class="token comment"># def func1():</span><span class="token comment">#     alist.append(33)</span><span class="token comment">#     print(alist)</span><span class="token comment">#</span><span class="token comment"># def func2():</span><span class="token comment">#     alist.append(44)</span><span class="token comment">#     print(alist)</span><span class="token comment">#</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     #创建子线程</span><span class="token comment">#     func1_thread = threading.Thread(target=func1)</span><span class="token comment">#     func2_thread = threading.Thread(target=func2)</span><span class="token comment">#     #启动</span><span class="token comment">#     func1_thread.start()</span><span class="token comment">#     func2_thread.start()</span><span class="token keyword">import</span> threadinga <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建子线程</span>    func1_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func1<span class="token punctuation">)</span>    func2_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func2<span class="token punctuation">)</span>    <span class="token comment"># 启动</span>    func1_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    func1_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    func2_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="join-和setDaemon"><a href="#join-和setDaemon" class="headerlink" title="join()和setDaemon()"></a>join()和setDaemon()</h2><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><ul><li><code>实现所有线程都执行结束后再执行主线程</code></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>def <span class="token function">sayhi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">:</span> #定义每个线程要运行的函数    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"running on number:%s"</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>sayhi<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'t-%s'</span><span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span>  #把当前线程变成守护线程，必须在t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>前设置    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          #启动一个线程，程序不会阻塞<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'cost time:'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span></code></pre><h4 id="setDaemon"><a href="#setDaemon" class="headerlink" title="setDaemon()"></a>setDaemon()</h4><ul><li><code>守护线程，主线程退出时，需要子线程随主线程退出</code></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> threading<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>def <span class="token function">sayhi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">:</span> #定义每个线程要运行的函数    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"running on number:%s"</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span><span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>sayhi<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'t-%s'</span><span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span>  #把当前线程变成守护线程，必须在t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>前设置    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          #启动一个线程，程序不会阻塞<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'cost time:'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span></code></pre><h2 id="Python中使用过的线程模块？"><a href="#Python中使用过的线程模块？" class="headerlink" title="Python中使用过的线程模块？"></a>Python中使用过的线程模块？</h2><h4 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h4><ul><li>Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。</li><li>thread和threading模块允许程序员创建和管理线程。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">sayhi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义每个线程要运行的函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running on number:%s"</span> <span class="token operator">%</span>num<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sayhi<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'t-%s'</span><span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="concurrent-futures-1"><a href="#concurrent-futures-1" class="headerlink" title="concurrent.futures"></a>concurrent.futures</h4><ul><li><code>1、简介</code> <a href="https://docs.python.org/3/library/concurrent.futures.html">参考官网</a><ul><li>1、Python标准库为我们提供了threading和multiprocessing模块编写相应的多线程/多进程代码</li><li>2、但是当项目达到一定的规模，频繁创建/销毁进程或者线程是非常消耗资源的，这个时候我们就要编写自己的线程池/进程池，以空间换时间。</li><li>3、但从Python3.2开始，标准库为我们提供了concurrent.futures模块，它提供了ThreadPoolExecutor和ProcessPoolExecutor两个类，</li><li>4、实现了对threading和multiprocessing的进一步抽象，对编写线程池/进程池提供了直接的支持。</li></ul></li><li><code>2、Executor和Future</code><ul><li><code>1. Executor</code><ul><li>concurrent.futures模块的基础是Exectuor，Executor是一个抽象类，它不能被直接使用。</li><li>但是它提供的两个子类ThreadPoolExecutor和ProcessPoolExecutor却是非常有用</li><li>我们可以将相应的tasks直接放入线程池/进程池，不需要维护Queue来操心死锁的问题，线程池/进程池会自动帮我们调度。</li></ul></li><li><code>2. Future</code><ul><li>Future你可以把它理解为一个在未来完成的操作，这是异步编程的基础，</li><li>传统编程模式下比如我们操作queue.get的时候，在等待返回结果之前会产生阻塞，cpu不能让出来做其他事情</li><li>而Future的引入帮助我们在等待的这段时间可以完成其他的操作。</li></ul></li></ul></li><li>concurrent.futures.ThreadPoolExecutor 抓取网页</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span>pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment"># 创建一个线程池，最多开10个线程</span><span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fetch_request<span class="token punctuation">,</span>url<span class="token punctuation">)</span>       <span class="token comment"># 去线程池中获取一个线程，线程去执行fetch_request方法</span>pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>                      <span class="token comment"># 主线程自己关闭，让子线程自己拿任</span></code></pre><h2 id="锁-互斥锁-排插锁-悲观锁"><a href="#锁-互斥锁-排插锁-悲观锁" class="headerlink" title="锁  互斥锁  排插锁  悲观锁"></a>锁  互斥锁  排插锁  悲观锁</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 全局解释器锁</span><span class="token comment"># 单线单核cpu  多线程之间恶意竞争资源 创造的</span><span class="token triple-quoted-string string">"""互斥锁  排插锁  悲观锁当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。互斥锁为资源引入一个状态：锁定/非锁定某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。"""</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span> timea <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 加锁</span>    loke<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> a        a <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment"># 释放锁</span>    loke<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 没有释放就是死锁  如果不能自动结束 则进入僵持状态</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">:</span>    loke<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> a        a <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    loke<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建锁</span>    loke <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建线程</span>    func1_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loke<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    func2_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loke<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 启动线程</span>    func1_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    func2_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><h2 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h2><ul><li><p>1）<code>协程微线程，纤程，本质是一个单线程</code></p></li><li><p>2）</p><pre class="language-none"><code class="language-none">协程能在单线程处理高并发，因为遇到IO自动切换</code></pre><ul><li><code>线程遇到I/O操作会等待、阻塞</code>，<code>协程遇到I/O会自动切换</code>（剩下的只有CPU操作）</li><li>线程的状态<code>保存在CPU的寄存器和栈里而协程拥有自己的空间，所以无需上下文切换的开销，所以快</code></li></ul></li><li><p>3）</p><pre class="language-none"><code class="language-none">为甚么协程能够遇到I&#x2F;O自动切换</code></pre><ul><li>greenlet是C语言写的一个模块，遇到IO手动切换</li><li>协程有一个gevent模块(封装了greenlet模块)，遇到I/O自动切换</li></ul></li><li><p>4）协程拥有自己的空间，所以无需上下文切换的开销</p></li></ul><h2 id="协程优缺点"><a href="#协程优缺点" class="headerlink" title="协程优缺点"></a>协程优缺点</h2><ul><li><code>协程缺点</code><ul><li>无法利用多核资源：<code>协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上</code>,协程需要和进程配合才能运行在多CPU上</li><li><code>协程如果阻塞掉，整个程序都阻塞</code></li></ul></li><li><code>协程最大的优点</code><ul><li>不仅是处理高并发（单线程下处理高并发）</li><li>特别节省资源（协程本质是一个单线程，当然节省资源）<ul><li>500日活，用php写需要两百多态机器，但是golang只需要二十多太机器</li></ul></li></ul></li></ul><h2 id="协程遇到I-O切换，那活只谁干的？"><a href="#协程遇到I-O切换，那活只谁干的？" class="headerlink" title="协程遇到I/O切换，那活只谁干的？"></a>协程遇到I/O切换，那活只谁干的？</h2><ul><li>简单说法<ul><li>协程遇到I/O后自动切换，但是会保持一个socket连接，交给系统内核去处理工作</li><li>epoll()就工作内核中，他维护了一个链表，来存放所有的socket连接</li><li>当内核处理完成后就会回调一个函数，以socket文件描述符为key，结果为value存放到字典中</li><li>此时这个列表还是在内核中，需要将这个字典拷贝到用户空间（用户进程中）</li></ul></li><li>本质<ul><li>1.<code>epoll()中内核则维护一个链表</code>，epoll_wait直接检查链表是不是空就知道是否有文件描述符准备好了。</li><li>2.在内核实现中epoll是根据每个sockfd上面的与设备驱动程序建立起来的回调函数实现的。</li><li>3.某个sockfd上的事件发生时，与它对应的回调函数就会被调用，来把这个sockfd加入链表，其他处于“空闲的”状态的则不会。</li><li>4.epoll上面链表中获取文件描述，这里使用内存映射（mmap）技术，避免了复制大量文件描述符带来的开销</li><li>内存映射（mmap）：内存映射文件，是由一个文件到一块内存的映射，将不必再对文件执行I/O操作</li></ul></li></ul><h2 id="Python中协程的模块"><a href="#Python中协程的模块" class="headerlink" title="Python中协程的模块"></a>Python中协程的模块</h2><ul><li>greenlet：遇到I/O<code>手动切换</code>，是一个C模块</li><li>gevent：对greenlet封装，遇到I/O<code>自动切换</code>（<code>借助C语言库greenlet</code>）</li><li>asyncio：和gevent一样，也是实现协程的一个模块（<code>python自己实现</code>）</li></ul><h2 id="协成是什么"><a href="#协成是什么" class="headerlink" title="协成是什么"></a>协成是什么</h2><p>为什么说它是一个执行单元，因为它自带cpu上下文。<br>这样只要在合适的时机，我们可以把一个协成 切换到另一个协成。<br>只要这个过程中保存或修复cpu上下文 那么程序还是可以运行的</p><pre class="language-none"><code class="language-none">协程，又称微线程，纤程。英文名Coroutine。异步lo 协程的概念很早就提出来了，但直到最近几年才在某些语言（如Lua）中得到广泛应用。协程看上去是函数，但执行过程中，在函数内部可中断，然后转而执行别的函数，在适当的时候再返回来接着执行。python可以通过 yield&#x2F;send 的方式实现协程，也可以使用第三方库中的greenlet来实现协程。&quot;&quot;&quot;&quot;&quot;&quot;进程是资源分配的单位线程是操作系统调度的单位进程切换需要的资源很最大，效率最低线程切换需要的资源一般，效率一般（当然了在不考虑GTL的情况下）协成切换任务资源很小，效率高多进程、多线程根据cpu核数不一样可能是并行的，但是协成是在一个线程中  所以是并发</code></pre><p>通俗的理解：<br>在一个线程中的某个函数，可以再任何地方保存当前函数的一些临时变量等信息<br>然后切换到另一个函数中执行，注意不是通过调用函数的方式做到的。<br>并且切换的次数以及什么时候在切换到原来的函数都由开发者自己确定</p><h2 id="协成和线程的差异"><a href="#协成和线程的差异" class="headerlink" title="协成和线程的差异"></a>协成和线程的差异</h2><p>在实现多任务时，线程千幻从系统层面远不止保存和恢复cpu上下文这么简单。<br>操作系统为了程序运行的高效性每个线程都由自己的缓存Cache等等数据<br>操作系统还会帮你做这些数据的恢复操作。所以线程的切换非常耗性能。<br>但是协成的切换只是单纯的操作cpu上下文，所以一秒钟切换上百万次系统都抗的住。</p><h2 id="创建协程"><a href="#创建协程" class="headerlink" title="创建协程"></a>创建协程</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""翔翔的demo本质上协成只有一个线程"""</span><span class="token comment"># 在def里面只看到</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work1"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work2"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span>s1 <span class="token operator">=</span> fun<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token builtin">next</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token builtin">next</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre><h2 id="greenlent模块"><a href="#greenlent模块" class="headerlink" title="greenlent模块"></a>greenlent模块</h2><p>greenlet封装的是yield，为了让程序员更好的使用协成</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""翔翔的demogreenlet封装的是yield，为了让程序员更好的使用协成"""</span><span class="token keyword">import</span> time<span class="token keyword">from</span> greenlet <span class="token keyword">import</span> greenlet<span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work1----"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment"># 切换执行线程2</span>        s2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work2----"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token comment"># 切换执行线程1</span>        s1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建协成制定对应的任务</span>s1 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>work1<span class="token punctuation">)</span>s2 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>work2<span class="token punctuation">)</span><span class="token comment"># 启动并切换到指定协成执行对应的任务</span>s1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="打补丁找猴子"><a href="#打补丁找猴子" class="headerlink" title="打补丁找猴子"></a>打补丁找猴子</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""翔翔的demo"""</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> gevent<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkeymonkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work1:"</span><span class="token punctuation">,</span> gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work1---"</span><span class="token punctuation">)</span>        <span class="token comment"># gevent.sleep(0.5)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work2:"</span><span class="token punctuation">,</span> gevent<span class="token punctuation">.</span>getcurrent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"work2---"</span><span class="token punctuation">)</span>        gevent<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token comment"># time.sleep(0.5)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>work1<span class="token punctuation">)</span>    s2 <span class="token operator">=</span> gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>work2<span class="token punctuation">)</span>    gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h1 id="进程，线程，协程爬取页面对比"><a href="#进程，线程，协程爬取页面对比" class="headerlink" title="进程，线程，协程爬取页面对比"></a>进程，线程，协程爬取页面对比</h1><ul><li>特点：<ul><li><code>1.进程</code>：启用进程非常浪费资源</li><li><code>2.线程</code>：线程多，并且在阻塞过程中无法执行其他任务</li><li><code>3.协程</code>：gevent只用起一个线程，当请求发出去后gevent就不管,永远就只有一个线程工作，谁先回来先处理</li></ul></li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li>第四：性能最差</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> requestsurl_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token operator">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h2 id="进程池-1"><a href="#进程池-1" class="headerlink" title="进程池"></a>进程池</h2><ul><li><code>缺点：</code>启用进程非常浪费资源</li></ul><h3 id="multiprocessing-Pool"><a href="#multiprocessing-Pool" class="headerlink" title="multiprocessing.Pool"></a>multiprocessing.Pool</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-->exec done:'</span><span class="token punctuation">,</span><span class="token string">"测试进程池执行后回调功能"</span><span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 创建线程池</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        <span class="token comment">#用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>func<span class="token operator">=</span>fetch_request<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>call<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#关闭pool</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span></code></pre><h3 id="ProcessPoolExecutor"><a href="#ProcessPoolExecutor" class="headerlink" title="ProcessPoolExecutor"></a>ProcessPoolExecutor</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 创建线程池</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fetch_request<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment"># 去线程池中获取一个进程，进程去执行fetch_request方法</span>    pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span>wait<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul><li><code>缺点：</code> 创建一个新线程将消耗大量的计算资源，并且在阻塞过程中无法执行其他任务。</li><li><code>例：</code> 比如线程池中10个线程同时去10个url获取数据，当数据还没来时这些线程全部都在等待，不做事。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">def</span> <span class="token function">fetch_request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span>url_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span>         <span class="token comment">#google页面会卡住，知道页面超时后这个进程才结束</span>    <span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">,</span>          <span class="token comment">#chouti页面内容会直接返回，不会等待Google页面的返回</span><span class="token punctuation">]</span>pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment"># 创建一个线程池，最多开10个线程</span><span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>fetch_request<span class="token punctuation">,</span>url<span class="token punctuation">)</span>       <span class="token comment"># 去线程池中获取一个线程，线程去执行fetch_request方法</span>pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>                      <span class="token comment"># 主线程自己关闭，让子线程自己拿任务执行</span></code></pre><h2 id="协程-1"><a href="#协程-1" class="headerlink" title="协程"></a>协程</h2><ul><li><code>特点 ：</code>gevent只用起一个线程，当请求发出去后gevent就不管,永远就只有一个线程工作，谁先回来先处理</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gevent<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkeymonkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 注意，这个导包顺序不要变</span><span class="token keyword">import</span> requests<span class="token comment"># 这些请求谁先回来就先处理谁</span><span class="token keyword">def</span> <span class="token function">fetch_async</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> req_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span>method<span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> <span class="token operator">**</span>req_kwargs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment"># ##### 发送请求 #####</span>gevent<span class="token punctuation">.</span>joinall<span class="token punctuation">(</span><span class="token punctuation">[</span>    gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>fetch_async<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span> req_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>fetch_async<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'https://www.google.com/'</span><span class="token punctuation">,</span> req_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gevent<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>fetch_async<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'https://github.com/'</span><span class="token punctuation">,</span> req_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库</title>
      <link href="MySQL%E7%9B%B8%E5%85%B3/"/>
      <url>MySQL%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="https://baike.baidu.com/item/mySQL/471251?fr=aladdin">简介</a></h1><p>MySQL是一个**<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a><strong>**，</strong>由瑞典MySQL AB 公司开发，属于 <a href="https://baike.baidu.com/item/Oracle">Oracle</a> 旗下产品。MySQL 是最流行的<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>之一，在 WEB 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 SQL 语言是用于访问<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422">开放源码</a>这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><p><a href="https://www.mysql.com/">官网</a></p><p><strong>传统记录的缺点</strong></p><p>1.0 不易保存<br>2.0 备份困难<br>3.0 查找不便</p><p><strong>现代化手段—-文件</strong></p><p>1.0 使用简单，列如python中的open可以打开文件。用read/write对文件进行读写，close关闭文件<br>2.0 对于数据量较大的数据，不能够很好地满足，而且性能较差<br>3.0 不易扩展</p><p><strong>现代化手段—-数据库</strong></p><p>1.0 持久化存储<br>2.0 读写速度极高<br>3.0 保证数据的有效性<br>4.0 对程序支持性非常好，容易扩展</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据库就是一种特殊的文件，其中存储着需要的数据</p><p><strong>关系型数据库核心元素</strong></p><p>1.0 数据行（记录）<br>2.0 数据列（字段）<br>3.0 数据表（数据行的集合）<br>4.0 数据库（数据表的集合）</p><p>关系数据库  RDBMS<br>    Relational Database Management System</p><p><strong>当前主要使用俩种类型的数据库：关系型数据库、非关系型数据库</strong></p><p>所谓的关系型数据库RDBMS，是建立在关系模型基础上的数据库，<br>借助于集合代数等数学概念和方法来处理数据库中的数据</p><p>关系型数据库的主要产品</p><p><strong>oracle</strong>：在以前的大型 项目中使用，银行，电信等项目<br><strong>mysql</strong>：web时代使用最广泛的关系型数据库<br><strong>ms sql server</strong>：在微软的项目中使用<br><strong>sqlite</strong>：轻量级数据库，主要应用在移动平台</p><p><strong>数据完整性</strong><br>1.0 一个数据库就是一个完整的业务单元，可以包含多张表，数据被存储在表中<br>2.0 在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，为表添加一些强制性的验证，包括数据字段的类型、约束</p><p><strong>数据类型</strong><br>可以通过查看帮助文档查阅所有支持的数据类型<br>使用数据类型的原则是：<br>够用就行，尽量使用取值范围小的，而不用大的，这样可以更多的节省存储空间</p><p>常用数据类型如下：<br>整数：int，bit<br>小数：decimal<br>字符串：varchar,char<br>日期时间: date, time, datetime<br>枚举类型(enum)</p><p>特别说明的类型如下：<br>decimal表示浮点数，如decimal(5,2)表示共存5位数，小数占2位<br>char表示固定长度的字符串，如char(3)，如果填充’ab’时会补一个空格为’ab ‘<br>varchar表示可变长度的字符串，如varchar(3)，填充’ab’时就会存储’ab’<br>字符串text表示存储大文本，当字符大于4000时推荐使用<br>对于图片、音频、视频等文件，不存储在数据库中，而是上传到某个服务器上，然后在表中存储这个文件的保存路径</p><h1 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql -u账户名 -p密码</code></pre><h3 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">quit  exit ctrl+d</code></pre><h3 id="查看库"><a href="#查看库" class="headerlink" title="查看库"></a>查看库</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show databases;</code></pre><h3 id="进入库"><a href="#进入库" class="headerlink" title="进入库"></a>进入库</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">use 库名</code></pre><h3 id="查看当前库"><a href="#查看当前库" class="headerlink" title="查看当前库"></a>查看当前库</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select database();</code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop database 库名；</code></pre><h3 id="创建一个库"><a href="#创建一个库" class="headerlink" title="创建一个库"></a>创建一个库</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">cerate database 库名 charset&#x3D;utf8;</code></pre><h2 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h2><h3 id="查看数据库里的所有表"><a href="#查看数据库里的所有表" class="headerlink" title="查看数据库里的所有表"></a>查看数据库里的所有表</h3><pre class="language-none"><code class="language-none">show tables;### </code></pre><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><pre class="language-none"><code class="language-none">desc 表名;### </code></pre><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table 表名()</code></pre><h3 id="给表添加字段"><a href="#给表添加字段" class="headerlink" title="给表添加字段"></a>给表添加字段</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名  add  字段名 类型</code></pre><h3 id="重命名表里的字段名"><a href="#重命名表里的字段名" class="headerlink" title="重命名表里的字段名"></a>重命名表里的字段名</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 change  旧名 新民  类型 约束</code></pre><h3 id="修改表里的字段类型及约束-不需要重命名"><a href="#修改表里的字段类型及约束-不需要重命名" class="headerlink" title="修改表里的字段类型及约束(不需要重命名)"></a>修改表里的字段类型及约束(不需要重命名)</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 modify  字段名 新类型 约束</code></pre><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 drop 字段名</code></pre><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop table 表名</code></pre><h3 id="查看创建表的语句"><a href="#查看创建表的语句" class="headerlink" title="查看创建表的语句"></a>查看创建表的语句</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show  create table 表</code></pre><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 旧表名 rename to 新表名</code></pre><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">int    整形primary keyauto_incrementnot nullvarchar(20)decimal(5,3)enum(&quot;男&quot;,&quot;女&quot;,&quot;妖&quot;)datetime</code></pre><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">primary key   主键auto_increment 自增not null      非空foreign key   外键unique        唯一default       默认unsigned      无符号约束</code></pre><h2 id="表的增删改查"><a href="#表的增删改查" class="headerlink" title="表的增删改查"></a>表的增删改查</h2><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>查询表的所有数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select *  from  表名;</code></pre><p>查询指定的列</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select 列名1,列名2  from  表名;</code></pre><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>全列插入</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert  into  表名 values(id int primary key auto_increment )</code></pre><p>指定列插入</p><p>(插入的数据和列名对应)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into  表名(列名1,列名2) values (         )</code></pre><p>指定列插入</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名( 列名)  values ( ..........)</code></pre><p>指定列一行一行插入</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名( 列名)  values ( ..........)</code></pre><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p> 修改表里的数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">update 表名 set  列名&#x3D;新的值   where id &#x3D; **;</code></pre><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">delete from 表名  where id &#x3D; ** ;</code></pre><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  列名 as 新列名, 列名1 as 新列名1   from 表名</code></pre><h3 id="去重-单列"><a href="#去重-单列" class="headerlink" title="去重  单列"></a>去重  单列</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  distinct  列名 from 表名</code></pre><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><p>1.0方式</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table goods(cate_id int unsigned, foreign key(cate_id) references 主表名(id) ) charset&#x3D;utf8 ;</code></pre><p>2.0</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add foreign key(子表列名) references 主表(主键)</code></pre><h3 id="删除外键方式"><a href="#删除外键方式" class="headerlink" title="删除外键方式"></a>删除外键方式</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show create table 表名 查看 复制</code></pre><p>+——-+—————————————————————————————-+<br>| emp_2 | CREATE TABLE <code>emp_2</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(20) DEFAULT NULL,<br>  <code>emp_sid</code> int(10) unsigned DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  KEY <code>emp_2</code> (<code>emp_sid</code>),<br>  CONSTRAINT <code>emp_2_ibfk_1</code> FOREIGN KEY (<code>emp_sid</code>) REFERENCES <code>emp</code> (<code>sid</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 |<br>+——-+—————————————————————————————–+<br>1 row in set (0.00 sec)</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 drop foreign key emp_2_ibfk_1;</code></pre><h2 id="数据的查"><a href="#数据的查" class="headerlink" title="数据的查"></a>数据的查</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where 条件</code></pre><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>=  &lt; &lt;=  =  !=</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>and    两个条件必须同时满足</p><p>or    两个条件满足一个就可以</p><p>not   相反的</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>% 匹配多个任意字符<br>_ 匹配任意一个字符</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where 要查找的列名 like&#39;%或者_&#39;</code></pre><h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><h3 id="非连续范围"><a href="#非连续范围" class="headerlink" title="非连续范围"></a>非连续范围</h3><p>in</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from student where id in (3,6,9);</code></pre><h3 id="连续范围"><a href="#连续范围" class="headerlink" title="连续范围"></a>连续范围</h3><p>between   and</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from student where id between 3 and 8;</code></pre><h3 id="判断空值"><a href="#判断空值" class="headerlink" title="判断空值"></a>判断空值</h3><p>空 is null</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from student where pingjia is null;</code></pre><p>非空 is  not null</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from student where pingjia is not null;</code></pre><h2 id="条件优先级"><a href="#条件优先级" class="headerlink" title="条件优先级"></a>条件优先级</h2><p>由高到低<br>小括号  &gt;not &gt; 比较运算符&gt; 逻辑运算符&gt;<br>and 比or 优先   如果希望or比and优先 加 ( )</p><p>修改mysql的密码</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">update  user set password&#x3D; password(&#39;新密码&#39;) where user&#x3D; &#39;root&#39;;</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>order by<br>asc  升序<br>desc  降序</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where order by 要排序的列  asc；</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where order by 要排序的列  asc，同等条件下 high desc；</code></pre><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="总数"><a href="#总数" class="headerlink" title="总数"></a>总数</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from 表名 ；</code></pre><h3 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select max(查找的值) from 表名 ；</code></pre><h3 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select min(查找的值) from 表名 where 条件；</code></pre><h3 id="和"><a href="#和" class="headerlink" title="和"></a>和</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  sum(查找的值) from 表名 where 条件；</code></pre><h3 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  avg(查找的值) from 表名 where 条件；</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  round(avg(查找的值),保留几位小数) from 表名 where 条件；</code></pre><h2 id="起别名-1"><a href="#起别名-1" class="headerlink" title="起别名"></a>起别名</h2><p>只能在本次查询使用</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select 名称 as 起的名称 from 表名</code></pre><h2 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h2><p>distinct</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select distinct 列名 from 表名</code></pre><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><h3 id="group-by-在查询结果后面进行分组"><a href="#group-by-在查询结果后面进行分组" class="headerlink" title="group by    在查询结果后面进行分组"></a>group by    在查询结果后面进行分组</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  分组的名称 from 表名 group by 分组的名称；</code></pre><h3 id="计算最大的值"><a href="#计算最大的值" class="headerlink" title="计算最大的值"></a>计算最大的值</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  分组的名称,count(*) from 表名 group by 要分组的名称；</code></pre><h3 id="一组有多个的分组"><a href="#一组有多个的分组" class="headerlink" title="一组有多个的分组"></a>一组有多个的分组</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select gender，group_concat(name) from students group by gender;</code></pre><h3 id="平均分组"><a href="#平均分组" class="headerlink" title="平均分组"></a>平均分组</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  要分组的名，round（avg（分组的名称），保留几位小数） from 表名 group by 要分组的名称；</code></pre><h3 id="条件查询分组"><a href="#条件查询分组" class="headerlink" title="条件查询分组"></a>条件查询分组</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  要分组的名，group_concat(name),round（avg（分组的名称），保留几位小数） from 表名 group by 要分组的名称 having round(avg(age),1) &gt; 25；</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select 查询条件 from 表名 where age &gt; (select round(avg(age),2) from 表名)</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  分组的名称 from 表名 where cls_id in(select 分组名 from 表名)；</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>limit</p><p>start 代表从某个位置开始<br>count 代表从开始位置往后数几个<br>select * from students limit 4,2;</p><p>例1：查询前3行男生信息</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名 where limit  3,2  3往后2个（4,5）</code></pre><p>0,2 每页显示2个，第一个页面<br>2,2 每页显示2个，第二个页面<br>4,2 每页显示2个，第三个页面<br>6,2 每页显示2个件 limit 0,3;</p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表1 inner join表2 on 表一.字段名 &#x3D; 表2.字段名</code></pre><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表1 left join 表2 on 表一.字段名 &#x3D; 表2.字段名</code></pre><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表1 right join 表2 on 表一.字段名 &#x3D; 表2.字段名</code></pre><h3 id="自连接-自关联"><a href="#自连接-自关联" class="headerlink" title="自连接/自关联"></a>自连接/自关联</h3><p>自连接查询就是把一张表模拟成左右两张表，然后进行连表查询。<br>自连接就是一种特殊的连接方式，连接的表还是本身这张表<br>自连接必须起别名</p><h2 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询"></a>子查询</h2><p>当一条SELECT 语句满足不了查询条件  这个时候就需要子查询<br>在一个select 语句中 嵌套一个select 语句  那么这个被嵌套的就叫子查询</p><h2 id="主查询"><a href="#主查询" class="headerlink" title="主查询"></a>主查询</h2><p>第一条select 语句就是 主查询</p><h2 id="子查询和主查询的关系"><a href="#子查询和主查询的关系" class="headerlink" title="子查询和主查询的关系"></a>子查询和主查询的关系</h2><p>1、子查询是嵌套在主查询中的<br>2、子查询要么是子查询的条件 要么就是数据源<br>3、子查询必须是一条完整的select 语句</p><h2 id="子查询的分类"><a href="#子查询的分类" class="headerlink" title="子查询的分类"></a>子查询的分类</h2><h3 id="1、标量子查询-返回的是一行一列"><a href="#1、标量子查询-返回的是一行一列" class="headerlink" title="1、标量子查询  返回的是一行一列"></a>1、标量子查询  返回的是一行一列</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名  where age &gt; ( select avg(age) from 表名);</code></pre><h3 id="2、列级子查询-返回的是一列多行"><a href="#2、列级子查询-返回的是一列多行" class="headerlink" title="2、列级子查询  返回的是一列多行"></a>2、列级子查询  返回的是一列多行</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select name from classes where id in (select cls_id from students);</code></pre><h3 id="3、行级子查询-返回的是一行多列"><a href="#3、行级子查询-返回的是一行多列" class="headerlink" title="3、行级子查询  返回的是一行多列"></a>3、行级子查询  返回的是一行多列</h3><p>身高最高 年龄最大</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from students where (height,age) &#x3D; (select max(height),max(age) from students);</code></pre><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><p>一对一<br>一对多   通过外键<br>多对多   需要建立第三张表进行多表联查</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>1、一个select 查询数据后返回数据的结果集<br>是一张虚拟的表 会随着基本表的数据改变而变化<br>适用于 经常 查询的表</p><h3 id="创建的语句"><a href="#创建的语句" class="headerlink" title="创建的语句"></a>创建的语句</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view 视图名称 as （select 语句）</code></pre><h3 id="查看视图的语句"><a href="#查看视图的语句" class="headerlink" title="查看视图的语句"></a>查看视图的语句</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show tables;</code></pre><h3 id="使用视图的语句"><a href="#使用视图的语句" class="headerlink" title="使用视图的语句"></a>使用视图的语句</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from 视图名</code></pre><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop view 视图名</code></pre><h3 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h3><p>提高了重用性 像一个函数一样<br>让数据更加清晰  方便查询<br>提高了安全性  可以针对不同用户<br>对数据库重构  却不影响数据的执行</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>是一个操作序列 要么不执行 要么一起执行</p><h3 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h3><p><strong>一致性</strong><br><strong>原子性</strong><br><strong>持久性</strong><br><strong>隔离性</strong></p><h3 id="事物的开启"><a href="#事物的开启" class="headerlink" title="事物的开启"></a>事物的开启</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">begin &#x2F; start transaction</code></pre><h3 id="事物的提交"><a href="#事物的提交" class="headerlink" title="事物的提交"></a>事物的提交</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">commit</code></pre><h3 id="事务的回滚"><a href="#事务的回滚" class="headerlink" title="事务的回滚"></a>事务的回滚</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">rollback</code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>目的 提高查询速率</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create index 索引名称 on 表名(字段名称)</code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop index 索引名称 on 表名</code></pre><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show index  from  表名</code></pre><h2 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h2><h3 id="建议以v-开头"><a href="#建议以v-开头" class="headerlink" title="建议以v_开头"></a>建议以v_开头</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view 视图名称 as select查询语句</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view v_05A as select 语句</code></pre><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create view v_05A as select &quot;05A&quot;  as &quot;班级&quot;,s.name as &quot;姓名&quot;,s.gender as &quot;性别&quot; from students as s where s.cid in (select c.id from class as c where c.name&#x3D;&quot;05A&quot;);</code></pre><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><p>​    查看表会将所有的视图也列出来</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show tables;</code></pre><h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h3><p>视图的用途就是查询</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from v_05A;</code></pre><h3 id="删除视图-1"><a href="#删除视图-1" class="headerlink" title="删除视图"></a>删除视图</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop view 视图名称;drop view v_05A;</code></pre><h3 id="视图的作用-1"><a href="#视图的作用-1" class="headerlink" title="视图的作用"></a>视图的作用</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">提高了重用性，就像一个函数对数据库重构，却不影响程序的运行提高了安全性能，可以对不同的用户让数据更加清晰</code></pre><h2 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h2><h3 id="查看索引-1"><a href="#查看索引-1" class="headerlink" title="查看索引"></a>查看索引</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">show index 索引名 from 表名;</code></pre><h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><p>如果指定字段是字符串，需要指定长度，建议长度与定义字段时的长度一致<br>字段类型如果不是字符串，可以不填写长度部分</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create index 索引名称 on 表名(字段名称(长度))</code></pre><p>删除索引：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">drop index 索引名称 on 表名;</code></pre><h3 id="索引demo"><a href="#索引demo" class="headerlink" title="索引demo"></a>索引demo</h3><p>创建测试表testindex</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">create table test_index(title varchar(10));</code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>开启运行时间监测：<pre class="language-mysql" data-language="mysql"><code class="language-mysql">set profiling&#x3D;1;</code></pre></li><li>查找第1万条数据ha-99999<pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from test_index where title&#x3D;&#39;ha-99999&#39;;</code></pre></li><li>查看执行的时间：<pre class="language-mysql" data-language="mysql"><code class="language-mysql">show profiles;</code></pre></li><li>为表title_index的title列创建索引：<pre class="language-mysql" data-language="mysql"><code class="language-mysql">create index title_index on test_index(title(10));</code></pre></li><li>执行查询语句：<pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from test_index where title&#x3D;&#39;ha-99999&#39;;</code></pre></li><li>再次查看执行的时间<pre class="language-mysql" data-language="mysql"><code class="language-mysql">show profiles;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-算法-时间复杂度以及构造栈-队列</title>
      <link href="%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>计算机世界著名公式，由瑞士计算机科学家尼克劳斯·威茨（Niklaus Wirth）提出</p><p><strong>程序 = 数据结构 + 算法</strong></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>   计算机存储 组织数据的方式</code></pre><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>​        物理结构  面向计算机的</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><p>​                     顺序存储结构 数据元素在地址连续的存储单元中<br>​                     链式存储结构  数据元素在任意地址的存储单元中 用指针关联<br>​        逻辑结构  面向问题的   集合 线性 树形 图形</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>​    解决特定问题的求解步骤</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>​      输入  有零个或多个输入<br>​      输出  至少有一个或多个输出<br>​      有穷性<br>​      确定性<br>​      可行性</p><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><p>​        时间复杂度    计算算法所需要的时间  采用 大O 表示法<br>​                        常数阶   O(1)<br>​                        平方阶   O(n 2)<br>​                        立方阶   O(n 3)<br>​                        线性阶   O(n)<br>​                        list 的复杂度<br>​                        append  0(1)<br>​                        pop()    O(1)<br>​                        pop(i)    O(n)<br>​                        sort     O(n log n)<br>​                        reverse   O(n)<br>​                        dict 的时间复杂度<br>​                        copy   O(n)<br>​                        Delete O(1)</p><pre><code>    空间复杂度     计算算法所需要的内存</code></pre><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="定义：具有零个或多个数据元素的有限序列"><a href="#定义：具有零个或多个数据元素的有限序列" class="headerlink" title="定义：具有零个或多个数据元素的有限序列"></a>定义：具有零个或多个数据元素的有限序列</h2><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>​        第一个元素没有前驱元素<br>​        最后一个元素没有后继元素<br>​        其他元素只有一个前驱 和 一个后继</p><p>​        操作 ： 插入  删除  查找<br>​        分类 ： 顺序表  链表</p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>在计算机内存中 以一组地址的存储单元 依次存储数据元素的线性结构</p><p>插入 删除 最好的时间复杂度O(1) 最坏的时间复杂度 O(n)<br>查找  时间复杂度为 O(1)</p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>​    优点： 支持随机访问<br>​    缺点：插入和删除需要移动大量元素  会造成空间碎片</p><h2 id="适合场景"><a href="#适合场景" class="headerlink" title="适合场景"></a>适合场景</h2><p>读取数据的时候  python中的 list tuple</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>是一种基础数据结构 是一种线性表</p><h2 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h2><p>​    单向链表<br>​        有俩个域 一个是链接域(下一个节点的地址) 一个是信息域(存放的是数据)<br>​    单向循环链表<br>​        最后一个节点的指针域指向第一个节点<br>​    双向链表<br>​        俩个指针域一个元素域</p><h1 id="数据结构与算法作用"><a href="#数据结构与算法作用" class="headerlink" title="数据结构与算法作用"></a>数据结构与算法作用</h1><p>没有看过数据结构和算法，有时间对问题可能会没有任何思路，不知如何下手去解决：</p><p>大部分时间可能解决了问题，可是对程序运行的效率和开销没有意识，性能下降；<br>有时会借助别人开发的利器暂时解决了问题，可是遇到了性能瓶颈的时候，又不知道该如何进行针对性优化。</p><p>按照不同的角度，<br>数据结构可分为<br>逻辑结构和物理结构。</p><h2 id="逻辑结构："><a href="#逻辑结构：" class="headerlink" title="逻辑结构："></a>逻辑结构：</h2><p>是指数据对象中数据元素之间的相互关系。<br>分为四种：<br>集合结构、线性结构、树形结构和图形结构。</p><p>数据元素的存储结构可分为两种：<br>顺序存储结构 和 链式存储结构。</p><h2 id="顺序存储结构："><a href="#顺序存储结构：" class="headerlink" title="顺序存储结构："></a>顺序存储结构：</h2><p>把数据元素放在地址连续的存储单元中，<br>数据间的逻辑关系和物理关系一致。如，b</p><h2 id="链式存储结构："><a href="#链式存储结构：" class="headerlink" title="链式存储结构："></a>链式存储结构：</h2><p>把数据元素放在任意的存储单元中，数据间使用指针关联。<br>数据元素的存储关系不能反映其逻辑关系。如，链表。</p><p>算法是解决特定问题求解步骤的描述，<br>在计算机中表现为指令的有限序列，<br>并且每条指令表示一个或多个操作。</p><h2 id="算法的基本特性："><a href="#算法的基本特性：" class="headerlink" title="算法的基本特性："></a>算法的基本特性：</h2><p>输入，算法具有零个或多个输入，<br>输出，至少有一个或多个输出。<br>有穷性，算法在执行有限步后能够自动结束，不会出现无限循环。<br>确定性，算法的每一步都具有确定的含义，不会出现二义性。<br>可行性，算法的每一步都能够通过执行有限次操作完成。</p><h2 id="算法复杂度分为时间复杂度和空间复杂度。"><a href="#算法复杂度分为时间复杂度和空间复杂度。" class="headerlink" title="算法复杂度分为时间复杂度和空间复杂度。"></a>算法复杂度分为时间复杂度和空间复杂度。</h2><p>时间复杂度是指执行算法所需要的计算工作量（时间）</p><p>空间复杂度是指执行这个算法所需要的内存空间</p><p>算法的时间复杂度””反映了算法执行的时间长短，它是度量一个算法好坏的重要指标。””<br>度量一个算法的时间复杂度通常采用大O表示法</p><h2 id="时间复杂度的几条基本计算规则："><a href="#时间复杂度的几条基本计算规则：" class="headerlink" title="时间复杂度的几条基本计算规则："></a>时间复杂度的几条基本计算规则：</h2><ol><li>基本操作，即只有常数项，认为其时间复杂度为O(1)</li><li>顺序结构，时间复杂度按加法进行计算</li><li>循环结构，时间复杂度按乘法进行计算</li><li>分支结构，时间复杂度取最大值</li><li>判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略</li><li>在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># import time #引入时间模块</span><span class="token comment"># def func():</span><span class="token comment">#     # 时间戳  time.time()</span><span class="token comment">#     start_time = time.time()</span><span class="token comment">#     for i in range(0,1001):       # n*n 循环结构  +9常数项 可以忽略</span><span class="token comment">#         for j in range(0,1001):</span><span class="token comment">#             # s = 1000 - i - j        #顺序结构</span><span class="token comment">#             for s in range(0,1001):</span><span class="token comment">#                 if i ** 2 + j ** 2 + s ** 2 == s ** 2 and i + j + s ==1000 : #二次幂 + - 基本操作   分支结构 if elif</span><span class="token comment">#                     print("i = %d,j = %d ,s =%d" % (i,j,s))  #可以认作基本操作</span><span class="token comment">#</span><span class="token comment">#     end_time = time.time()</span><span class="token comment">#     print("demo 执行时间为：%f" % (end_time-start_time))  #开始到结束用了多长时间</span><span class="token comment">#</span><span class="token comment"># func()</span><span class="token comment"># import time,timeit  #python 内置的性能测试模块</span><span class="token comment"># def func():</span><span class="token comment">#     for i in range(0,1001):</span><span class="token comment">#         for j in range(0,1001):</span><span class="token comment">#             s = 1000 - i - j</span><span class="token comment">#             if i ** 2 + j ** 2 + s ** 2 == s ** 2  :</span><span class="token comment">#                 print("i = %d,j = %d ,s =%d" % (i,j,s))</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     ss = timeit.Timer("func()","from __main__ import func")</span><span class="token comment">#     print(ss.timeit(5)/5)</span></code></pre><h1 id="构造栈"><a href="#构造栈" class="headerlink" title="构造栈"></a>构造栈</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Stack() 创建一个新的空栈push(item) 添加一个新的元素item到栈顶pop() 弹出栈顶元素peek() 返回栈顶元素is_empty() 判断栈是否为空size() 返回栈的元素个数"""</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个新的空栈类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个新的空栈"""</span>        self<span class="token punctuation">.</span>alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""添加一个新的元素item到栈顶"""</span>        self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""弹出栈顶元素"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回栈顶元素"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断栈是否为空"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回栈的元素个数"""</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="进阶写法-数字转二进制"><a href="#进阶写法-数字转二进制" class="headerlink" title="进阶写法  数字转二进制"></a>进阶写法  数字转二进制</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>stack <span class="token operator">=</span> MyStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        remain <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">2</span>        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>remain<span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> stack<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">print</span><span class="token punctuation">(</span>transform<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="构造队列"><a href="#构造队列" class="headerlink" title="构造队列"></a>构造队列</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Queue() 创建一个空的队列enqueue(item) 往队列中添加一个item元素dequeue() 从队列头部删除一个元素is_empty() 判断一个队列是否为空size() 返回队列的大小"""</span><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个空的队列"""</span>        self<span class="token punctuation">.</span>alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""往队列中添加一个item元素"""</span>        self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""从队列头部删除一个元素"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>alist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""判断一个队列是否为空"""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>alist <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回队列的大小"""</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alist<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="进阶写法"><a href="#进阶写法" class="headerlink" title="进阶写法"></a>进阶写法</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        x: int 申明类型 提高代码健壮性        -> 返回值 为None        """</span>        self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>myq <span class="token operator">=</span> MyQueue<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python与Mongodb操作</title>
      <link href="python%E4%B8%8EMongodb%E6%93%8D%E4%BD%9C/"/>
      <url>python%E4%B8%8EMongodb%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><h1 id="MongoDB-下载安装"><a href="#MongoDB-下载安装" class="headerlink" title="MongoDB 下载安装"></a><a href="https://www.runoob.com/mongodb/mongodb-window-install.html">MongoDB 下载安装</a></h1><p>MongoDB 提供了可用于 32 位和 64 位系统的预编译二进制包，你可以从MongoDB官网下载安装，MongoDB 预编译二进制包下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p><blockquote><p>注意：在 MongoDB 2.2 版本后已经不再支持 Windows XP 系统。最新版本也已经没有了 32 位系统的安装文件。</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/B370EBF1-A8F8-483A-A05C-F0DE0A903A96.jpg" alt="img" loading="lazy"></p><ul><li><strong>MongoDB for Windows 64-bit</strong> 适合 64 位的 Windows Server 2008 R2, Windows 7 , 及最新版本的 Window 系统。</li><li><strong>MongoDB for Windows 32-bit</strong> 适合 32 位的 Window 系统及最新的 Windows Vista。 32 位系统上 MongoDB 的数据库最大为 2GB。</li><li><strong>MongoDB for Windows 64-bit Legacy</strong> 适合 64 位的 Windows Vista, Windows Server 2003, 及 Windows Server 2008 。</li></ul><p>下载 .msi 文件，下载后双击该文件，按操作提示安装即可。</p><p>安装过程中，你可以通过点击 “Custom(自定义)” 按钮来设置你的安装目录。</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/win-install1.jpg" alt="img" loading="lazy"></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/win-install2.jpg" alt="img" loading="lazy"></p><p>下一步安装 <strong>“install mongoDB compass”</strong> 不勾选（当然你也可以选择安装它，可能需要更久的安装时间），MongoDB Compass 是一个图形界面管理工具，我们可以在后面自己到官网下载安装，下载地址：<a href="https://www.mongodb.com/download-center/compass%E3%80%82">https://www.mongodb.com/download-center/compass。</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/8F7AF133-BE49-4BAB-9F93-88A9D666F6C0.jpg" alt="img" loading="lazy"></p><p><strong>创建数据目录</strong></p><p>MongoDB 将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。请注意，数据目录应该放在根目录下 (如： C:\ 或者 D:\ 等 )。</p><p>在本教程中，我们已经在 C 盘安装了 mongodb，现在让我们创建一个 data 的目录然后在 data 目录里创建 db 目录。</p><pre class="language-none"><code class="language-none">cd C:\md &quot;\data\db&quot;</code></pre><p>你也可以通过 window 的资源管理器中创建这些目录，而不一定通过命令行。</p><hr><h2 id="命令行下运行-MongoDB-服务器"><a href="#命令行下运行-MongoDB-服务器" class="headerlink" title="命令行下运行 MongoDB 服务器"></a>命令行下运行 MongoDB 服务器</h2><p>为了从命令提示符下运行 MongoDB 服务器，你必须从 MongoDB 目录的 bin 目录中执行 mongod.exe 文件。</p><pre class="language-none"><code class="language-none">C:\mongodb\bin\mongod --dbpath c:\data\db</code></pre><p>如果执行成功，会输出如下信息：</p><pre class="language-none"><code class="language-none">2015-09-25T15:54:09.212+0800 I CONTROL  Hotfix KB2731284 or later update is notinstalled, will zero-out data files2015-09-25T15:54:09.229+0800 I JOURNAL  [initandlisten] journal dir&#x3D;c:\data\db\journal2015-09-25T15:54:09.237+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed2015-09-25T15:54:09.290+0800 I JOURNAL  [durability] Durability thread started2015-09-25T15:54:09.294+0800 I CONTROL  [initandlisten] MongoDB starting : pid&#x3D;2488 port&#x3D;27017 dbpath&#x3D;c:\data\db 64-bit host&#x3D;WIN-1VONBJOCE882015-09-25T15:54:09.296+0800 I CONTROL  [initandlisten] targetMinOS: Windows 7&#x2F;Windows Server 2008 R22015-09-25T15:54:09.298+0800 I CONTROL  [initandlisten] db version v3.0.6……</code></pre><hr><h2 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h2><p>我们可以在命令窗口中运行 mongo.exe 命令即可连接上 MongoDB，执行如下命令：</p><pre class="language-none"><code class="language-none">C:\mongodb\bin\mongo.exe</code></pre><h1 id="python操作MongonDB"><a href="#python操作MongonDB" class="headerlink" title="python操作MongonDB"></a>python操作MongonDB</h1><h3 id="连接数据库、指定数据库、指定集合、插入数据"><a href="#连接数据库、指定数据库、指定集合、插入数据" class="headerlink" title="连接数据库、指定数据库、指定集合、插入数据:"></a>连接数据库、指定数据库、指定集合、插入数据:</h3><p>mongodb存储数据以键值形式, 因此在Python中使用字段插入数据.</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token comment">#连接mongodb</span>client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span><span class="token comment">#指定数据库</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4<span class="token comment">#指定集合</span>collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#数据</span>student1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>student2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201802'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>student3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>student4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201804'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>student5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201805'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>student6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201806'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alan'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token comment">#插入一条数据</span>result1 <span class="token operator">=</span> collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span>inserted_id<span class="token punctuation">)</span><span class="token comment"># #插入多条数据</span>result2 <span class="token operator">=</span> collection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span><span class="token punctuation">[</span>student2<span class="token punctuation">,</span> student3<span class="token punctuation">,</span> student4<span class="token punctuation">,</span> student5<span class="token punctuation">,</span> student6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span>inserted_ids<span class="token punctuation">)</span></code></pre><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">insert方法<span class="token punctuation">:</span> <span class="token number">5b3a1942971951218d41c02b</span><span class="token punctuation">[</span>ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02d'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>官方推荐<span class="token punctuation">:</span> <span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>InsertOneResult <span class="token builtin">object</span> at <span class="token number">0x7fa4cc363ec8</span><span class="token operator">></span><span class="token number">5b3a1942971951218d41c02e</span><span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>InsertManyResult <span class="token builtin">object</span> at <span class="token number">0x7fa4cc363f08</span><span class="token operator">></span><span class="token punctuation">[</span>ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02f'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c030'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="3-查询、计数、排序、偏移"><a href="#3-查询、计数、排序、偏移" class="headerlink" title="3. 查询、计数、排序、偏移:"></a>3. 查询、计数、排序、偏移:</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#查询一条数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单条数据'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多条数据'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment">#查询多条数据</span><span class="token keyword">for</span> res <span class="token keyword">in</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$mod'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">#计数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'计数'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>count <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$mod'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">#排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'排序'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span> <span class="token comment">#升序, pymongo.DESCENDING为降序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#偏移</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偏移'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#偏移2位,忽略前两个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span>results <span class="token operator">=</span> collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> pymongo<span class="token punctuation">.</span>ASCENDING<span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#只输出2个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>find({‘age’: {’$mod’: [5, 0]}}): 表示查找年龄取余5余0的值. 还有很多比较符号, 请百度.</p><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">单条数据 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>多条数据 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02e'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201804'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02f'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201805'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span>计数 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">3</span>排序 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">]</span>偏移 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">[</span><span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Ray'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Ray'</span><span class="token punctuation">]</span></code></pre><h3 id="4-更新"><a href="#4-更新" class="headerlink" title="4. 更新:"></a>4. 更新:</h3><h5 id="4-1-不使用-set更新数据"><a href="#4-1-不使用-set更新数据" class="headerlink" title="4.1 不使用$set更新数据:"></a>4.1 不使用$set更新数据:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#修改</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span> <span class="token comment">#修改年龄</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> student<span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span></code></pre><h6 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h6><pre class="language-python" data-language="python"><code class="language-python">更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span></code></pre><h5 id="4-2-使用-set更新数据"><a href="#4-2-使用-set更新数据" class="headerlink" title="4.2 使用$set更新数据:"></a>4.2 使用$set更新数据:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#使用$set更新</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span> <span class="token comment">#修改年龄</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$set'</span><span class="token punctuation">:</span> student<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition, $set为重点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span></code></pre><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span></code></pre><h4 id="比较使用和不适用-set更新数据-发现此时并没有什么区别"><a href="#比较使用和不适用-set更新数据-发现此时并没有什么区别" class="headerlink" title="比较使用和不适用$set更新数据, 发现此时并没有什么区别."></a>比较使用和不适用$set更新数据, 发现此时并没有什么区别.</h4><h3 id="下面介绍区别所在"><a href="#下面介绍区别所在" class="headerlink" title="下面介绍区别所在:"></a>下面介绍区别所在:</h3><h5 id="4-3-区别"><a href="#4-3-区别" class="headerlink" title="4.3 区别"></a>4.3 区别</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#使用和不使用$set更新的区别</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>    <span class="token string">'mother'</span><span class="token punctuation">:</span> <span class="token string">"Jack's mother"</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$set'</span><span class="token punctuation">:</span> student<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span><span class="token comment">#分割线</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不使用: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span>student <span class="token operator">=</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token comment">#获得满足condition的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新前: '</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span>student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span>    <span class="token string">'father'</span><span class="token punctuation">:</span> <span class="token string">"Jack's father"</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> student<span class="token punctuation">)</span> <span class="token comment">#将修改后的student替换condition</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新后'</span><span class="token punctuation">,</span> collection<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#更新的返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">#ok=1代表执行成功, nModified代表影响的条数</span></code></pre><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">使用<span class="token punctuation">:</span> 更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201801'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'mother'</span><span class="token punctuation">:</span> <span class="token string">"Jack's mother"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 分割线 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>不使用<span class="token punctuation">:</span> 更新前<span class="token punctuation">:</span>  <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'mother'</span><span class="token punctuation">:</span> <span class="token string">"Jack's mother"</span><span class="token punctuation">&#125;</span>更新后 <span class="token punctuation">&#123;</span><span class="token string">'_id'</span><span class="token punctuation">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">'5b3a1942971951218d41c02b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'201803'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token string">'father'</span><span class="token punctuation">:</span> <span class="token string">"Jack's father"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'nModified'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'updatedExisting'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span></code></pre><p><strong>分析上面运行结果, 可以发现使用$set时, 若更新数据有原数据没有的字段, 则将该字段加到原数据上(上例为新增了mother字段), 而不会删除任何字段. 相反, 若不使用set时, 将从原数据中删除更新数据没有的字段, 再加上新增字段(上例为删除了mother字段, 新增了father字段. 也可以理解为将原数据完全替换为更新数据)</strong></p><h5 id="4-4-update-one和update-many的区别"><a href="#4-4-update-one和update-many的区别" class="headerlink" title="4.4 update_one和update_many的区别:"></a>4.4 update_one和update_many的区别:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#官方推荐使用</span><span class="token comment">#update_one和update_many的区别</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'update_one: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$inc'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span> result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span><span class="token comment">#分割线</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'update_many: '</span><span class="token punctuation">)</span>condition <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>update_many<span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'$inc'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>matched_count<span class="token punctuation">,</span> result<span class="token punctuation">.</span>modified_count<span class="token punctuation">)</span></code></pre><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python">update_one<span class="token punctuation">:</span> <span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>UpdateResult <span class="token builtin">object</span> at <span class="token number">0x7f6cace0f9c8</span><span class="token operator">></span><span class="token number">1</span> <span class="token number">1</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 分割线 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>update_many<span class="token punctuation">:</span> <span class="token operator">&lt;</span>pymongo<span class="token punctuation">.</span>results<span class="token punctuation">.</span>UpdateResult <span class="token builtin">object</span> at <span class="token number">0x7f6cace0fa88</span><span class="token operator">></span><span class="token number">3</span> <span class="token number">3</span></code></pre><p><strong>{‘age’: {’$gt’: 20}}为查找年龄大于20的, {‘inc’: {‘age’: 1}}为将年龄+1</strong></p><h3 id="5-删除"><a href="#5-删除" class="headerlink" title="5. 删除:"></a>5. 删除:</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> bson<span class="token punctuation">.</span>objectid <span class="token keyword">import</span> ObjectIdclient <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span><span class="token string">'mongodb://localhost:27017/'</span><span class="token punctuation">)</span>db <span class="token operator">=</span> client<span class="token punctuation">.</span>test4collection <span class="token operator">=</span> db<span class="token punctuation">.</span>students<span class="token comment">#删除</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#推荐使用</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>delete_one<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>deleted_count<span class="token punctuation">)</span>result <span class="token operator">=</span> collection<span class="token punctuation">.</span>delete_many<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'$gt'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>deleted_count<span class="token punctuation">)</span></code></pre><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果:"></a>运行结果:</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'ok'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token number">1</span><span class="token number">2</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关系型数据库 </tag>
            
            <tag> Mongodb </tag>
            
            <tag> 非关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解python生成器</title>
      <link href="python%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>python%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>利用迭代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。</p><p>但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。</p><p>为了达到记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即生成器(generator)。</p><p>“”” *生成器是一类特殊的迭代器。”””</p><h1 id="创建生成器方法-1"><a href="#创建生成器方法-1" class="headerlink" title="创建生成器方法 1"></a>创建生成器方法 1</h1><p>要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的 [ ] 改成 ( )</p><pre class="language-none"><code class="language-none"># g &#x3D; [i for  i in range(1,101)]            #列表# print(g)g &#x3D; (i for i in range(1, 101))  # 生成器print(g)  # 生成器&lt;generator object &lt;genexpr&gt; at 0x00F60EF0&gt;# 方法1 for循环# for i in g:#     print(i)# 方法2 for 循环的本质# while True:#     try:#         print(next(g))#     except StopIteration as e:#         break# 方法3 列表 元祖# print(list(g))# print(tuple(g))</code></pre><h2 id="创建生成器方法2-return-换成-yield"><a href="#创建生成器方法2-return-换成-yield" class="headerlink" title="创建生成器方法2      return 换成 yield"></a>创建生成器方法2      return 换成 yield</h2><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。</p><pre class="language-none"><code class="language-none"># def Fei(nn):#     sum1,sum2 &#x3D; 0,1#     current &#x3D; 0               #位置#     while current &lt; nn:       #if 换成while#         sum &#x3D; sum1#         sum1,sum2 &#x3D; sum2,sum1 + sum2#         current +&#x3D; 1#         yield sum## if __name__ &#x3D;&#x3D; &#39;__main__&#39;:##     # print(Fei(5))                   #&lt;generator object Fei at 0x016A47F0&gt;##     #第一种方法#     s &#x3D; Fei(int(input(&#39;请输入：&#39;)))# for i in s:#     print(i)# def Fei(nn):#     sum1,sum2 &#x3D; 0,1#     current &#x3D; 0               #位置#     while current &lt; nn:       #if 换成while#         sum &#x3D; sum1#         sum1,sum2 &#x3D; sum2,sum1 + sum2#         current +&#x3D; 1#         yield sum## if __name__ &#x3D;&#x3D; &#39;__main__&#39;:##     # print(Fei(5))                   #&lt;generator object Fei at 0x016A47F0&gt;##     #第一种方法#     s &#x3D; Fei(int(input(&#39;请输入：&#39;)))# for i in s:#     print(i)# 第二种方法# while True:#     try:#         print(next(s))#     except StopIteration:#         break# 第三种方法# print(list(s))# print(tuple(s))# 扩展send()方法# a &#x3D;s.send(None)  #第一个值必须为None 没有为什么# print(a)# a &#x3D;s.send(11)      #后边随便写# print(a)# a &#x3D; s.send(11)# print(a)# a &#x3D; s.send(11)# print(a)# a &#x3D;s.send(11)# print(a)# a &#x3D; s.send(11)# print(a)# a &#x3D; s.send(11)# print(a)</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用了yield关键字的函数不再是函数，而是生成器。（使用了yield的函数就是生成器）</p><p>yield关键字有两点作用：<br>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起<br>将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</p><p>可以使用next()函数让生成器从断点处继续执行，即唤醒生成器（函数）</p><p>Python3中的生成器可以使用return返回最终运行的返回值，而Python2中的生成器不允许使用return返回一个返回值（即可以使用return从生成器中退出，但return后不能有任何表达式）。</p><p>唤醒生成器的三种方试</p><p>send()函数  next()函数 __next__方法</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解python迭代器</title>
      <link href="python%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>python%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>迭代是访问集合元素的一种方式。<br> 迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。<br> 迭代器只能往前不会后退。</p><p> 1.可迭代对象   字符串  列表  字典  元祖  集合 range()<br> 我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫迭代。</p><p> 但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># for i in "laowang":</span><span class="token comment">#     print(i,end=' ')</span><span class="token comment"># print()</span><span class="token comment"># for i in [1,2,3,4,5]:</span><span class="token comment">#     print(i,end=' ')</span><span class="token comment"># print()</span><span class="token comment"># for i in range(1,11):</span><span class="token comment">#     print(i,end=' ')</span><span class="token comment"># print()</span></code></pre><p> 可迭代对象包括：</p><p> 列表、字典、集合、字符串等数据类型。</p><p> 数字类型不可迭代</p><h1 id="如何判断一个对象是否可以迭代"><a href="#如何判断一个对象是否可以迭代" class="headerlink" title="如何判断一个对象是否可以迭代"></a>如何判断一个对象是否可以迭代</h1><p>可以使用 isinstance() 判断一个对象是否是 Iterable（可迭代） 对象：</p><p>在python3.5  3.7.2之前不需要再abc里引入</p><p>from collections.abc import Iterable  # 可迭代对象</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># isinstance(要判断的对象，数据类型)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="可迭代对象的本质"><a href="#可迭代对象的本质" class="headerlink" title="可迭代对象的本质"></a>可迭代对象的本质</h1><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。</p><p>那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。<br>我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)。</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。</p><p>可迭代对象通过__iter__方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><p>那么也就是说，一个具备了__iter__方法的对象，就是一个可迭代对象。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># class My_list(object):</span><span class="token comment">#     def __init__(self):</span><span class="token comment">#         self.aa = []</span><span class="token comment">#</span><span class="token comment">#     def add(self,item):</span><span class="token comment">#         self.aa.append(item)</span><span class="token comment">#</span><span class="token comment">#     def __iter__(self):</span><span class="token comment">#         pass</span><span class="token comment">#</span><span class="token comment"># mm = My_list()</span><span class="token comment"># mm.add(1)</span><span class="token comment"># mm.add(2)</span><span class="token comment"># mm.add(3)</span><span class="token comment"># mm.add(4)</span><span class="token comment"># mm.add(5)</span><span class="token comment">#</span><span class="token comment"># from collections.abc import Iterable</span><span class="token comment"># print(isinstance(mm,Iterable))</span><span class="token comment">#</span><span class="token comment"># for i in mm.aa:</span><span class="token comment">#     print(i)</span></code></pre><h1 id="iter-和next"><a href="#iter-和next" class="headerlink" title="iter()和next()"></a>iter()和next()</h1><pre class="language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token comment"># iter（） 获取可迭代对象的迭代器</span>ali_list <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token comment"># next（）  获取迭代器的下一条数据</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))</span><span class="token comment"># print(next(ali_list))           #StopIteration 停止迭代异常</span><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable  <span class="token comment"># 迭代器</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>ali_list<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a_list<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 只是可迭代对象</span></code></pre><h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator()"></a>iterator()</h1><p><strong>一个实现了iter方法和next方法的对象，就是迭代器。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># class MyIterator():</span><span class="token comment">#     """迭代器类"""</span><span class="token comment">#     def __init__(self,alist):</span><span class="token comment">#         """属性初始化和赋值"""</span><span class="token comment">#         self.alist = alist</span><span class="token comment">#         self.weizhi = 0        #记录遍历位置</span><span class="token comment">#</span><span class="token comment">#     def __iter__(self):</span><span class="token comment">#         """获取迭代器，自身就为迭代器，所以返回自身"""</span><span class="token comment">#         return self</span><span class="token comment">#</span><span class="token comment">#     def __next__(self):</span><span class="token comment">#         """获取迭代器下一位置数据"""</span><span class="token comment">#         if self.weizhi &lt; len(self.alist):</span><span class="token comment">#             item = self.alist[self.weizhi]</span><span class="token comment">#             self.weizhi += 1</span><span class="token comment">#             return item</span><span class="token comment">#         else:</span><span class="token comment">#             raise StopIteration     #主动抛出 停止异常迭代</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     a_list = [1, 2, 3, 4, 5, 6]</span><span class="token comment">#     ml = MyIterator(a_list)</span><span class="token comment">#     # for i in ml:</span><span class="token comment">#     #     print(i)</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment">#     # for循环本质</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     a_list = [1, 2, 3, 4, 5, 6]</span><span class="token comment">#     while True:</span><span class="token comment">#         try:</span><span class="token comment">#             ret = next(ml)</span><span class="token comment">#             print(ret)</span><span class="token comment">#         except StopIteration as e:</span><span class="token comment">#             print(e)</span><span class="token comment">#             break</span><span class="token comment"># from timeit import time</span><span class="token comment"># def outer(fun):</span><span class="token comment">#     def inner():</span><span class="token comment">#         a = time.time()</span><span class="token comment">#         fun()</span><span class="token comment">#         b = time.time()</span><span class="token comment">#         print(b - a)</span><span class="token comment">#     return inner</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># @outer</span><span class="token comment"># def fun():</span><span class="token comment">#     print("hello")</span><span class="token comment">#     time.sleep(1)</span><span class="token comment">#     print("python")</span><span class="token comment"># fun()</span></code></pre><h1 id="使用迭代器构造斐波那契数列"><a href="#使用迭代器构造斐波那契数列" class="headerlink" title="使用迭代器构造斐波那契数列"></a>使用迭代器构造斐波那契数列</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 单词  current-位置</span><span class="token comment"># class Fei():</span><span class="token comment">#     """斐波那锲数列类"""</span><span class="token comment">#     def __init__(self,nu):</span><span class="token comment">#         """实例属性的初始化和赋值"""</span><span class="token comment">#         self.nn = nu</span><span class="token comment">#         self.current = 0         #记录位置</span><span class="token comment">#         self.sum1 = 0           #定义初始值</span><span class="token comment">#         self.sum2 = 1</span><span class="token comment">#     def __iter__(self):</span><span class="token comment">#         """获取迭代器，即自身"""</span><span class="token comment">#         return self</span><span class="token comment">#     def __next__(self):</span><span class="token comment">#         """获取迭代器下一位置数据"""</span><span class="token comment">#         if self.current &lt; self.nn:</span><span class="token comment">#             num = self.sum1</span><span class="token comment">#             self.sum1,self.sum2 = self.sum2,self.sum1 + self.sum2</span><span class="token comment">#             self.current += 1</span><span class="token comment">#             return num</span><span class="token comment">#         else:</span><span class="token comment">#             raise StopIteration</span><span class="token comment"># if __name__ == '__main__':</span><span class="token comment">#     fei = Fei(int(input('请输入：')))</span><span class="token comment">#     """判断是否为迭代器"""</span><span class="token comment"># from collections.abc import Iterator,Iterable</span><span class="token comment"># print(isinstance(fei,Iterable))</span><span class="token comment"># for i in fei:</span><span class="token comment">#     print(i)</span><span class="token comment"># print(list(fei))          #迭代器对象只能被查看一次</span><span class="token comment"># print(tuple(fei))</span><span class="token comment"># while True:</span><span class="token comment">#     try:</span><span class="token comment">#         print(next(fei))</span><span class="token comment">#     except StopIteration as e:</span><span class="token comment">#         break</span><span class="token keyword">class</span> <span class="token class-name">Fei</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>nn <span class="token operator">=</span> nn        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>weizhi <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>a        <span class="token keyword">if</span> self<span class="token punctuation">.</span>weizhi <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>nn<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b            self<span class="token punctuation">.</span>weizhi <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> <span class="token builtin">sum</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration    <span class="token comment"># def sb(self):</span>    <span class="token comment">#     self.list1.append(sum)</span>    <span class="token comment">#     self.list1.reverse()</span>    <span class="token comment">#     print(self.list1)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    aa <span class="token operator">=</span> Fei<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># print(aa)</span>    <span class="token comment"># print(list(aa[::-1]))</span>a <span class="token operator">=</span> Fei<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pypy3与python多线程比较</title>
      <link href="pypy3%E4%B8%8Epython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AF%94%E8%BE%83/"/>
      <url>pypy3%E4%B8%8Epython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h1 id="pypy简介"><a href="#pypy简介" class="headerlink" title="pypy简介"></a>pypy简介</h1><ul><li><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>PyPy [1] 是Python开发者为了更好的Hack <a href="https://baike.baidu.com/item/Python">Python</a>创建的项目。此外，PyPy比CPython是更加灵活，易于使用和试验，以制定具体的功能在不同情况的实现方法，可以很容易实施。 该项目的目标是，让PyPy比C实现的Python更为容易的适应各个项目和方便裁剪。</p></li><li><h2 id="现状介绍"><a href="#现状介绍" class="headerlink" title="现状介绍"></a>现状介绍</h2><ul><li><p>PyPy是Armin Rigo开发的，<a href="https://baike.baidu.com/item/Python">Python</a>语言的动态编译器，是Psyco的后继项目。PyPy的目的是，做到Psyco没有做到的<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91">动态编译</a>。</p></li><li><p>PyPy开始只是研究性质的项目。但是开发非常成熟，在2007年中旬发布了1.0 Release版本后，大家关注的焦点是，能否在2008年出现可供生产环境使用的版本。</p></li><li><p>最新的(2018.12.15)PyPy版本是PyPy3 v6.0.0，兼容Python3.5.3。可以运行在Linux的32位和64位、MacOSX和Windows的32位平台中，但是基于arm平台的正在开发中。它支持Python语言的所有核心部分以及大多数的Python语言标准库函数模块，并且通过了Python语言的test suite。与CPython的区别可以去看它的兼容性页面.</p></li><li><p>PyPy还提供了<a href="https://baike.baidu.com/item/JIT">JIT</a>编译器和<a href="https://baike.baidu.com/item/%E6%B2%99%E7%9B%92">沙盒</a>功能，因此运行速度比CPython要快，以及可以安全的运行一些不被信任的代码。PyPy还有一个单独的支持微线程的版本。</p></li><li><p>另外，PyPy 也有 每夜构建 版本供开发者测试。</p></li><li><p>PyPy是作为Specific Targeted Research Projects（特定领域研究项目）从2004年12月到2007年3月，开始接受<a href="https://baike.baidu.com/item/%E6%AC%A7%E7%9B%9F">欧盟</a>的援助。</p></li></ul></li><li><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li><p>PyPy的第一部分：用<a href="https://baike.baidu.com/item/Python">Python</a>实现的Python</p></li><li><p>其实这么说并不准确，准确得说应该是用rPython实现的Python，rPython是Python的一个子集，虽然rPython不是完整的Python，但用rPython写的这个Python实现却是可以解释完整的Python语言。</p></li><li><p>PyPy的第二部分：<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a></p></li><li><p>这是一个编译rPython的编译器，或者说这个编译器有一个rPython的前端，目前也只有这么一个前端，不过它的后端却是不少，也就是说这个编译器支持许多的目标语言，比较重要的有：<a href="https://baike.baidu.com/item/C/7252092">C</a>，<a href="https://baike.baidu.com/item/CIL">CIL</a>，<a href="https://baike.baidu.com/item/Javascript/321142">Javascript</a> … [2] </p></li></ul><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul><li>大量的性能改进。</li><li>Bug修复，以及与CPython的兼容性修复。</li><li>现在stackless功能默认启用。</li><li>NumPy effort现在更名为numpypy，使用时可以简单写作：import numpypy as numpy。</li><li>JSON编码器已被替换为一个新的，是用纯Python编写的，某些情况下比CPython的C扩展快2倍，比PyPy 1.6中的快20倍左右。</li><li>一些RPython模块的内存占用已得到大幅改善。</li></ul><p>另外，有一些功能正在开发，将包含在1.8版本中，这些功能包括：</p><ul><li>特殊列表实现。可以大幅改善一些应用程序的性能/内存影响。</li><li>NumPy effort即将支持多维数组。</li><li>两个新的JIT编译器后端，尤其针对<a href="https://baike.baidu.com/item/PowerPC/7381773">PowerPC</a>和<a href="https://baike.baidu.com/item/ARM%E5%A4%84%E7%90%86%E5%99%A8/1835861">ARM处理器</a>。</li></ul></li></ul><p>​    </p><h1 id="一、python多线程"><a href="#一、python多线程" class="headerlink" title="一、python多线程"></a>一、python多线程</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase<span class="token comment"># Create your tests here.</span><span class="token keyword">import</span> threadingnum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">change_it</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> n        num <span class="token operator">=</span> num <span class="token operator">-</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span>    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>change_it<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>change_it<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>change_it<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><p>我们运行三次</p><p>第一次</p><pre class="language-none"><code class="language-none">100-5-5</code></pre><p>第二次</p><pre class="language-none"><code class="language-none">0101010</code></pre><p>第三次</p><pre class="language-none"><code class="language-none">081818</code></pre><h1 id="二、pypy3多线程"><a href="#二、pypy3多线程" class="headerlink" title="二、pypy3多线程"></a>二、pypy3多线程</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>test <span class="token keyword">import</span> TestCase<span class="token comment"># Create your tests here.</span><span class="token keyword">import</span> threadingnum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">change_it</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> n        num <span class="token operator">=</span> num <span class="token operator">-</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span>    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>change_it<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>change_it<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>change_it<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><p>我们运行三次</p><p>第一次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>第二次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>第三次</p><pre class="language-none"><code class="language-none">0000</code></pre><p>我们发现pypy3在处理多线程的时候是比python处理能力更强</p><h1 id="三、我们再看接下来的比较"><a href="#三、我们再看接下来的比较" class="headerlink" title="三、我们再看接下来的比较"></a>三、我们再看接下来的比较</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> times1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>ss <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运行时间："</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s1<span class="token punctuation">)</span></code></pre><p>pypy3运行速度是不如python的</p><p>所以我们在合适的地方选择合适解释器</p><p>并没有一个解释器是完美的</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
            <tag> pypy3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令详解</title>
      <link href="ubuntu%20docker%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>ubuntu%20docker%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="docker命令详解"><a href="#docker命令详解" class="headerlink" title="docker命令详解"></a>docker命令详解</h1><h3 id="此次操作都是在ubuntu17-01下进行-docker版本是17-10-0-ce-docker-compose是1-17-1"><a href="#此次操作都是在ubuntu17-01下进行-docker版本是17-10-0-ce-docker-compose是1-17-1" class="headerlink" title="此次操作都是在ubuntu17.01下进行,docker版本是17.10.0-ce,docker-compose是1.17.1."></a>此次操作都是在ubuntu17.01下进行,docker版本是17.10.0-ce,docker-compose是1.17.1.</h3><h3 id="docker-存在的意义"><a href="#docker-存在的意义" class="headerlink" title="docker 存在的意义"></a>docker 存在的意义</h3><p>· 使用dokcer加速本地开发和构建，开发人员可以构建、运行并分享Docker容器，容器可以在开发环境中构建，然后轻松地提交到测试环境中，并最终进入生产环境</p><p>· 能够让独立服务或应用程序在不同环境中，得到相同的运行结果。</p><p>· 用docker 创建隔离环境进行测试</p><p>· docker 可以让开发者先在本机上构建一个复杂的程序测试，而不是一开始就在生产环境进行测试</p><h3 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h3><p>· Docker 的常用文档:<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p>· Docker 镜像: 用户基于镜像来运行自己的容器，可以把镜像当做容器的『源代码』，镜像体积很小，易于分享、存储和更新</p><p>· Registry: Docker 用 Registry 保存用户构建的镜像，Registry 分为公共和私有两种:</p><p>o Docker 公司运营的公共 Registry 叫做 Docker Hub，我们可以在上面注册账号，分享并保存自己的镜像。</p><p>o 可以在 Docker Hub 保存自己的私有镜像或者架设自己私有的 Registry</p><p>· Docker 容器: 把应用程序或服务打包放进去，容器是基于镜像启动的，容器中可以运行一个或多个进程。</p><p>o 镜像是 Docker 生命周期中的构建或打包阶段</p><p>o 容器则是启动或执行阶段</p><p>o </p><h3 id="docker的使用命令"><a href="#docker的使用命令" class="headerlink" title="docker的使用命令"></a>docker的使用命令</h3><p>1 docker 命令介绍</p><p>docker –help</p><p>管理命令:</p><p> container  管理容器</p><p> image    管理镜像</p><p> network   管理网络</p><p>命令：</p><p> attach    介入到一个正在运行的容器</p><p> build    根据 Dockerfile 构建一个镜像</p><p> commit    根据容器的更改创建一个新的镜像</p><p> cp      在本地文件系统与容器中复制 文件/文件夹</p><p> create    创建一个新容器</p><p> exec     在容器中执行一条命令</p><p> images    列出镜像</p><p> kill     杀死一个或多个正在运行的容器   </p><p> logs     取得容器的日志</p><p> pause    暂停一个或多个容器的所有进程</p><p> ps      列出所有容器</p><p> pull     拉取一个镜像或仓库到 registry</p><p> push     推送一个镜像或仓库到 registry</p><p> rename    重命名一个容器</p><p> restart   重新启动一个或多个容器</p><p> rm      删除一个或多个容器</p><p> rmi     删除一个或多个镜像</p><p> run     在一个新的容器中执行一条命令</p><p> search    在 Docker Hub 中搜索镜像</p><p> start    启动一个或多个已经停止运行的容器</p><p> stats    显示一个容器的实时资源占用</p><p> stop     停止一个或多个正在运行的容器</p><p> tag     为镜像创建一个新的标签</p><p> top     显示一个容器内的所有进程</p><p> unpause   恢复一个或多个容器内所有被暂停的进程</p><ol start="2"><li>更详细的功能参数配置</li></ol><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–api-enable-cors=false</td><td>开放远程API调用的 CORS 头信息。这个接口开关对想进行二次开发的上层应用提供了支持.</td></tr><tr><td>-b, –bridge=””</td><td>挂载已经存在的网桥设备到 Docker 容器里。注意，使用 none可以停用容器里的网络.</td></tr><tr><td>–bip=””</td><td>使用 CIDR 地址来设定网络桥的 IP。注意，此参数和 -b 不能一起使用.</td></tr><tr><td>-D, –debug=false</td><td>开启Debug模式。例如：docker -d -D</td></tr><tr><td>-d, –daemon=false</td><td>开启Daemon模式.</td></tr><tr><td>–dns=[]</td><td>强制容器使用DNS服务器.例如： docker -d –dns 8.8.8.8</td></tr><tr><td>–dns-search=[]</td><td>强制容器使用指定的DNS搜索域名.例如： docker -d –dns-searchexample.com</td></tr><tr><td>-e, –exec-driver=”native”</td><td>强制容器使用指定的运行时驱动.例如：docker -d -e lxc</td></tr><tr><td>-G, –group=”docker”</td><td>在后台运行模式下，赋予指定的Group到相应的unix socket上。注意，当此参数 –group 赋予空字符串时，将去除组信息。</td></tr><tr><td>-g, –graph=”/var/lib/docker”</td><td>配置Docker运行时根目录</td></tr><tr><td>-H, –host=[]</td><td>在后台模式下指定socket绑定，可以绑定一个或多个 tcp://host:port, unix:///path/to/socket, fd://  或 fd://socketfd。例如：$ docker -H tcp://0.0.0.0:2375 ps或者 $ export DOCKER_HOST=”tcp://0.0.0.0:2375” $ docker ps</td></tr><tr><td>–icc=true</td><td>启用内联容器的通信.</td></tr><tr><td>–ip=”0.0.0.0”</td><td>容器绑定IP时使用的默认IP地址.</td></tr><tr><td>–ip-forward=true</td><td>启动容器的 net.ipv4.ip_forward.</td></tr><tr><td>–iptables=true</td><td>启动Docker容器自定义的iptable规则.</td></tr><tr><td>–mtu=0</td><td>设置容器网络的MTU值，如果没有这个参数，选用默认 route MTU，如果没有默认route，就设置成常量值 1500.</td></tr><tr><td>-p, –pidfile=”/var/run/docker.pid”</td><td>后台进程PID文件路径.</td></tr><tr><td>-r, –restart=true</td><td>重启之前运行中的容器.</td></tr><tr><td>-s, –storage-driver=””</td><td>强制容器运行时使用指定的存储驱动，例如,指定使用devicemapper,可以这样：docker -d -s devicemapper</td></tr><tr><td>–selinux-enabled=false</td><td>启用selinux支持</td></tr><tr><td>–storage-opt=[]</td><td>配置存储驱动的参数</td></tr><tr><td>–tls=false</td><td>启动TLS认证开关</td></tr><tr><td>–tlscacert=”/Users/dxiao/.docker/ca.pem”</td><td>通过CA认证过的的certificate文件路径</td></tr><tr><td>–tlscert=”/Users/dxiao/.docker/cert.pem”</td><td>TLS的certificate文件路径</td></tr><tr><td>–tlskey=”/Users/dxiao/.docker/key.pem”</td><td>TLS的key文件路径</td></tr><tr><td>–tlsverify=false</td><td>使用TLS并做后台进程与客户端通讯的验证</td></tr><tr><td>-v, –version=false</td><td>显示版本信息</td></tr></tbody></table><p> 注意：其中带有[] 的启动参数可以指定多次，例如</p><p>docker run -a stdin -a stdout -a stderr -i -t ubuntu /bin/bash</p><h3 id="docker基本"><a href="#docker基本" class="headerlink" title="docker基本"></a>docker基本</h3><p>· 查看系统内核</p><p>· uname -r</p><p>· 启动docker 境像</p><p>· systemctl start docker</p><p>· 3.查看docker版本</p><p>· docker verison</p><p>· 4.显示docker系统的信息</p><p>· docker info</p><h3 id="操作docker镜像"><a href="#操作docker镜像" class="headerlink" title="操作docker镜像"></a>操作docker镜像</h3><p>1.检索image</p><p>docker search image-name</p><p>2.下载image</p><p>docker pull image-name</p><p>3.列出镜像列表</p><p>docker images</p><p>4.删除一个或者多个镜像</p><p>docker rmi image-name</p><p>5.显示一个镜像的历史</p><p>docker history image-name  </p><p>6.通过容器创建镜像</p><p> 从已经创建的容器中更新镜像，并且提交这个镜像  使用 Dockerfile 指令来创建一个新的镜像 下面通过已存在的容器创建一个新的镜像。</p><p>docker commit -m=”First Image” -a=”keke” 7a15f99695c0 keke/unbantu:17.10.0</p><p>上面命令参数说明：</p><p>   -m 提交的描述信息</p><p>   -a 指定镜像作者</p><p>   7a15f99695c0 记住这个是容器id，不是镜像id</p><p>   keke/unbantu:17.10.0 创建的目标镜像名</p><ol><li><p>在<a href="https://www.docker.com/">Docker</a> 注册账户，发布的镜像都在<a href="https://cloud.docker.com/repository/list">这个页面里</a>展示</p></li><li><p>将上面做的镜像unbantu，起个新的名字unbantu-test</p></li></ol><p>docker tag keke/unbantu:17.10.0 keke/unbantu-test:lastest</p><ol><li>登录docker</li></ol><p>docker login</p><p>4.上传unbantu镜像</p><p>docker push keke/unbantu-test:lastest</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p><p>1.在容器中安装新的程序</p><p>docker run image-name apt-get install -y -name</p><p>2.在容器中运行”echo”命令，输出”hello word”</p><p>docker run image-name echo “hello word”</p><p>3.交互式进入容器中</p><p>docker run -i -t image_name /bin/bash  </p><p>注意:在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失.</p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>1.列出当前所有正在运行的container</p><p>docker ps</p><p>2.列出所有的container</p><p>docker ps -a  </p><p>3.列出最近一次启动的container</p><p>docker ps -l  </p><p>4.保存对容器的修改 当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p><p>1.保存对容器的修改; -a, –author=”” Author; -m, –message=”” Commit message</p><p>docker commit ID new-image-name</p><p>5.操作容器</p><p>1.删除所有容器</p><p>docker rm <code>docker ps -a -q</code></p><p>2.删除单个容器; -f, –force=false; -l, –link=false Remove the specified link and not the underlying container; -v, –volumes=false Remove the volumes associated to the container</p><p>docker rm Name/ID</p><p>3.停止、启动、杀死一个容器</p><p>docker stop Name/ID  </p><p>docker start Name/ID  </p><p>docker kill Name/ID</p><p>4.从一个容器中取日志; -f, –follow=false Follow log output; -t, –timestamps=false Show timestamps</p><p>docker logs Name/ID  </p><p>5.列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的</p><p>docker diff Name/ID</p><p>6.显示一个运行的容器里面的进程信息</p><p>docker top Name/ID  </p><p>7.从容器里面拷贝文件/目录到本地一个路径</p><p>docker cp Name:/container-path to-path  </p><p>docker cp ID:/container-path to-path</p><p>8.重启一个正在运行的容器; -t, –time=10 Number of seconds to try to stop for before killing the container, Default=10</p><p>docker restart Name/ID</p><p>9.附加到一个运行的容器上面; –no-stdin=false Do not attach stdin; –sig-proxy=true Proxify all received signal to the process</p><p>docker attach ID #重新启动并运行一个交互式会话shell</p><p>注意：attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C.</p><h3 id="保存和加载镜像"><a href="#保存和加载镜像" class="headerlink" title="保存和加载镜像"></a>保存和加载镜像</h3><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。</p><p>1.保存镜像到一个tar包; -o, –output=”” Write to an file</p><p>docker save image-name -o file-path</p><p>2.加载一个tar包格式的镜像; -i, –input=”” Read from a tar archive file</p><p>docker load -i file-path</p><p>3.从机器A拷贝到机器B</p><p>docker save image-name &gt; /home/keke/main.tar</p><p> 使用scp将main.tar拷到机器A上:</p><p>docker load &lt; /home/keke/main.tar</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>1.登陆registry server; -e, –email=”” Email; -p, –password=”” Password; -u, –username=”” Username</p><p>docker login</p><h3 id="发布-docker镜像"><a href="#发布-docker镜像" class="headerlink" title="发布    docker镜像"></a>发布    docker镜像</h3><p>docker push new-image-name</p><h3 id="构建镜像-Dockerfile-docker-build"><a href="#构建镜像-Dockerfile-docker-build" class="headerlink" title="构建镜像    (Dockerfile + docker build)"></a>构建镜像    (Dockerfile + docker build)</h3><p>FROM …</p><p>RUN …</p><h1 id="指定容器内的程序将会使用容器的指定端口"><a href="#指定容器内的程序将会使用容器的指定端口" class="headerlink" title="指定容器内的程序将会使用容器的指定端口"></a>指定容器内的程序将会使用容器的指定端口</h1><h1 id="配合-docker-run-p"><a href="#配合-docker-run-p" class="headerlink" title="配合 docker run -p"></a>配合 docker run -p</h1><p>EXPOSE …</p><p>· RUN: 指定镜像被构建时要运行的命令</p><p>· CMD: 指定容器被启动时要运行的命令</p><p>· ENTRYPOINT: 同 CMD ，但不会被 docker run -t 覆盖</p><p>· WORKDIR: CMD/ENTRYPOINT 会在这个目录下执行</p><p>· VOLUME</p><p>· ADD</p><p>· COPY</p><p>docker history images-name</p><p>1.从新镜像启动容器</p><p>docker run -d -p 4000:80 –name [name] #可以在 Dokcer 宿主机上指定一个具体的端口映射到容器的80端口上</p><h3 id="守护容器"><a href="#守护容器" class="headerlink" title="守护容器"></a>守护容器</h3><p>docker run -d container-name #创建守护容器</p><p>docker top container-name #查看容器内进程</p><p>docker exec container-name touch a.txt #在容器内部运行进程</p><p>docker stop container-name #停止容器</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><h3 id="官方英文资源"><a href="#官方英文资源" class="headerlink" title="官方英文资源"></a>官方英文资源</h3><p>· Docker官网：<a href="http://www.docker.com/">http://www.docker.com</a></p><p>· Docker windows入门：<a href="https://docs.docker.com/windows/">https://docs.docker.com/windows/</a></p><p>· Docker Linux 入门：<a href="https://docs.docker.com/linux/">https://docs.docker.com/linux/</a></p><p>· Docker mac 入门：<a href="https://docs.docker.com/mac/">https://docs.docker.com/mac/</a></p><p>· Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/">https://docs.docker.com/engine/userguide/</a></p><p>· Docker 官方博客：<a href="http://blog.docker.com/">http://blog.docker.com/</a></p><p>· Docker Hub: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>· Docker开源： <a href="https://www.docker.com/open-source">https://www.docker.com/open-source</a></p><h3 id="中文资源"><a href="#中文资源" class="headerlink" title="中文资源"></a>中文资源</h3><p>· Docker中文网站：<a href="http://www.docker.org.cn/">http://www.docker.org.cn</a></p><p>· Docker中文文档：<a href="http://www.dockerinfo.net/document">http://www.dockerinfo.net/document</a></p><p>· Docker安装手册：<a href="http://www.docker.org.cn/book/install.html">http://www.docker.org.cn/book/install.html</a></p><p>· 一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22">https://blog.csphere.cn/archives/22</a></p><p>· Docker中文指南：<a href="http://www.widuu.com/chinese_docker/index.html">http://www.widuu.com/chinese_docker/index.html</a></p><h3 id="其它资源"><a href="#其它资源" class="headerlink" title="其它资源"></a>其它资源</h3><p>· <a href="https://github.com/eon01/DockerCheatSheet">Docker 快速手册！</a></p><p>· <a href="http://www.runoob.com/docker/docker-tutorial.html">Docker 教程</a></p><p>· <a href="http://blog.csdn.net/zhangchao19890805/article/details/52756865">MySQL Docker 单一机器上如何配置自动备份</a></p><p>· <a href="https://segmentfault.com/t/docker">https://segmentfault.com/t/docker</a></p><p>· <a href="https://github.com/docker/docker">https://github.com/docker/docker</a></p><p>· <a href="https://wiki.openstack.org/wiki/Docker">https://wiki.openstack.org/wiki/Docker</a></p><p>· <a href="https://wiki.archlinux.org/index.php/Docker">https://wiki.archlinux.org/index.php/Docker</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python浅拷贝与深拷贝以及is 和 == 的区别</title>
      <link href="python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、浅拷贝"><a href="#一、浅拷贝" class="headerlink" title="一、浅拷贝"></a>一、浅拷贝</h1><p> Python中不但变量名无需事先声明，而且也无需类型声明。</p><p>在Python语言中，对象的类型和内存占用都是运行时确定的。</p><p> 在赋值时解释器会根据语法和右侧的操作数来决定新对象的类型。</p><p> 在对象创建后，一个该对象的引用会被赋值给左侧的变量。</p><p> copy模块用于对象的拷贝操作。</p><p> 该模块只提供了两个主要的方法：</p><p> copy.copy与copy.deepcopy，<br> 分别表示浅拷贝与深拷贝</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># a = [11,12]</span><span class="token comment"># b = a</span><span class="token comment"># print(id(a))        #列表是可变类型 每次刷新系统都会随机非配内存空间</span><span class="token comment"># print(id(b))</span><span class="token comment">#        copy.copy</span><span class="token comment">#        浅拷贝    浅拷贝只会拷贝第一层</span><span class="token comment">#                  浅拷贝是对于一个对象的顶层拷贝</span><span class="token comment">#                  通俗的理解是：拷贝了引用，并没有拷贝内容</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token comment"># print(id(a))</span><span class="token comment"># print(id(b))</span><span class="token comment"># # print(c)</span><span class="token comment"># print(id(c))</span><span class="token comment">#</span><span class="token keyword">import</span> copyd <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># print(id(d))</span><span class="token comment"># print(d)        #[[11, 22], [33, 44]]</span><span class="token comment"># print(id(d[0]))</span><span class="token comment"># print(id(d[-1]))</span></code></pre><p> <strong>总结：</strong><br> 浅拷贝是对于一个对象的顶层拷贝，相当于只拷贝了最浅的一层或者第一层。<br> 通俗的理解是：拷贝了引用，并没有拷贝内容</p><h1 id="二、深拷贝"><a href="#二、深拷贝" class="headerlink" title="二、深拷贝"></a>二、深拷贝</h1><p> <strong>copy.deepcopy</strong><br> 深拷贝  深拷贝会完全复制原变量的所有数据（递归性质的拷贝），在内存中生成一套完全一样的内容<br> 我们对这两个变量中的一个进行任意修改都不会影响另一个变量。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># a = [11,12]</span><span class="token comment"># b = [22,23]</span><span class="token comment"># c = [a,b]</span><span class="token comment"># print(id(c))</span><span class="token comment">#</span><span class="token comment"># import copy</span><span class="token comment">#</span><span class="token comment"># d = copy.copy(c)</span><span class="token comment"># print(id(d))</span><span class="token comment">#</span><span class="token comment"># c[0].append(55)</span><span class="token comment"># print(c)</span><span class="token comment"># print(b)</span></code></pre><p> <strong>深拷贝总结：</strong><br> 深拷贝会完全复制原变量的所有数据（递归），<br> 在内存中生成一套完全一样的内容，<br> 我们对这两个变量中的一个进行任意修改都不会影响另一个变量。</p><h1 id="深拷贝和浅拷贝之间的区别是什么？"><a href="#深拷贝和浅拷贝之间的区别是什么？" class="headerlink" title="深拷贝和浅拷贝之间的区别是什么？"></a>深拷贝和浅拷贝之间的区别是什么？</h1><p>对象的赋值就是简单的引用,a = [1,2,3], b=a, 在上述情况下,a和b是一样的,他们指向同一片内存,b不过是a的别名,是引用,我们可以使用b is a 去判断,返回True,表名他们地址相同内容也相同,也可以使用id()函数来查看.看两个列表地址是否相同.</p><p>深拷贝就是将一个对象拷贝到另一个对象中，这意味着如果你对一个对象的拷贝做出改变时，不会影响原对象。在Python中，我们使用函数deepcopy()执行深拷贝</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copyb<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><img src="https://v3u.cn/book/img/deepcopy.jpg" alt="avatar" loading="lazy"></p><p>而浅拷贝则是将一个对象的引用拷贝到另一个对象上，所以如果我们在拷贝中改动，会影响到原对象。我们使用函数function()执行浅拷贝</p><pre class="language-python" data-language="python"><code class="language-python">b<span class="token operator">=</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p><img src="https://v3u.cn/book/img/copy.jpg" alt="img" loading="lazy"></p><p>切片操作是浅拷贝</p><p>工厂函数是浅拷贝：lst1 = list(lst)</p><p>copy函数：lst1 = copy.copy(lst)</p><h2 id="注意一点，浅拷贝要分三种情况进行讨论"><a href="#注意一点，浅拷贝要分三种情况进行讨论" class="headerlink" title="注意一点，浅拷贝要分三种情况进行讨论"></a>注意一点，浅拷贝要分三种情况进行讨论</h2><p>1.拷贝不可变对象：只是增加一个指向原对象的引用，改变会互相影响。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 改变一方，另一方也改变</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>2.拷贝可变对象(一层结构)：产生新的对象，开辟新的内存空间，改变互不影响。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> copy<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment"># 查看两者的内存地址，不同，开辟了新的内存空间</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1833997595272</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1833997595080</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">is</span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token boolean">False</span><span class="token comment"># 改变了一方，另一方关我卵事</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>3.拷贝可变对象(多层结构)：产生新的对象，开辟新的内存空间，不改变包含的子对象则互不影响、改变包含的子对象则互相影响。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> copy<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 查看两者的内存地址，不同，开辟了新的内存空间</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token number">1833997596488</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">1833997596424</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token keyword">is</span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token boolean">False</span><span class="token comment"># 1.没有对包含的子对象进行修改，另一方关我卵事</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment"># 2.对包含的子对象进行修改，另一方也随之改变</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h1 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h1><p> 浅拷贝对不可变类型和可变类型的copy不同<br> copy.copy对于可变类型，会进行浅拷贝<br> copy.copy对于不可变类型，不会拷贝，仅仅是内存意义上的指向</p><h1 id="is"><a href="#is" class="headerlink" title="is   =="></a>is   ==</h1><p>== 比较的是两个对象的内容是否相等，即内存地址可以不一样，内容一样就可以了。</p><p>is 比较的是两个实例对象是不是完全相同，它们是不是同一个对象，占用的内存地址是否相同。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># a = [11,22]</span><span class="token comment"># b = [11,22]</span><span class="token comment"># # print(id(a))</span><span class="token comment"># # print(id(b))</span><span class="token comment">#</span><span class="token comment"># if a == b:</span><span class="token comment">#     print('意思相等，地址不一')</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment"># if a is b:</span><span class="token comment">#     print('a 是 b，地址相等')</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket-TCP/IP-UDP-详解</title>
      <link href="socket-TCPIP-UDP-%E8%AF%A6%E8%A7%A3/"/>
      <url>socket-TCPIP-UDP-%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：socket"><a href="#前言：socket" class="headerlink" title="前言：socket"></a>前言：socket</h1><h2 id="socket-套接字"><a href="#socket-套接字" class="headerlink" title="socket(套接字)"></a>socket(套接字)</h2><p>所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口</p><ol><li><p><strong>什么是TCP/IP、UDP？</strong></p></li><li><p><strong>Socket在哪里呢？</strong></p></li><li><p><strong>Socket是什么呢？</strong></p></li><li><p><strong>你会使用它们吗？</strong></p></li></ol><h2 id="什么是TCP-IP、UDP？"><a href="#什么是TCP-IP、UDP？" class="headerlink" title="什么是TCP/IP、UDP？"></a>什么是TCP/IP、UDP？</h2><p>​     TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br>​     UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。<br>​    <img src="https://img-blog.csdnimg.cn/20210114081844612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk1NDEyNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h1 id="Windows基础命令"><a href="#Windows基础命令" class="headerlink" title="Windows基础命令"></a>Windows基础命令</h1><p>ip地址             检查网络是否有问题</p><p>ipconfig          ping</p><p>查看端口使用情况</p><p>netstat -ano</p><h1 id="python-socket"><a href="#python-socket" class="headerlink" title="python-socket"></a>python-socket</h1><p>函数 socket.socket 创建一个 socket，该函数带有两个参数：<br>Address Family：可以选择 AF_INET（ipv4，用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET<br>Type：套接字类型，</p><p>可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）<br>SOCK_STREAM  TCP</p><p>或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）<br>SOCK_DGRAM  UDP</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># from socket import socket</span><span class="token keyword">import</span> socket<span class="token comment"># s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span>tcp <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span>tcp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>udp <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"56"</span><span class="token punctuation">)</span>udp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>udp_socket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>  <span class="token comment"># udp套接字</span>tcp_socket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>  <span class="token comment"># tcp套接字</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> tcp </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python操作mysql</title>
      <link href="python%E6%93%8D%E4%BD%9CMySQL/"/>
      <url>python%E6%93%8D%E4%BD%9CMySQL/</url>
      
        <content type="html"><![CDATA[<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>                host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>  <span class="token comment"># 本机地址</span>                port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token comment"># 端口号</span>                user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>  <span class="token comment"># 用户名</span>                password<span class="token operator">=</span><span class="token string">'1234'</span><span class="token punctuation">,</span>  <span class="token comment"># 密码</span>                db<span class="token operator">=</span><span class="token string">'1909A'</span>  <span class="token comment"># 所使用的库</span>            <span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token comment"># 捕获异常</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 输出异常</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'连接成功'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cur <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取游标</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token string">'create table bbb1(id int primary key auto_increment,name varchar (20),age int )'</span>            self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建失败'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建成功'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">zeng</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"insert into bbb1 values (0,'王成阳',28),(0,'李国军',21)"</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插入成功'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插入失败'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">shan</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"delete from bbb1 where id=2"</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除失败'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">"update bbb1 set name = '李国军' where id=1"</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改失败'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cha</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sql <span class="token operator">=</span> <span class="token string">'select * from bbb1'</span>        self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token comment"># res = self.cur.fetchone()  # fetchone 获取一条数据 以元组的形式显示出来</span>        <span class="token comment"># print(res)</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># fetchone 获取所有数据 以元组的形式显示出来</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>mysql <span class="token operator">=</span> Mysql<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># mysql.add()</span><span class="token comment"># mysql.zeng()</span><span class="token comment"># mysql.shan()</span><span class="token comment"># mysql.update()</span>mysql<span class="token punctuation">.</span>cha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># mysql.close()</span><span class="token triple-quoted-string string">'''connect 里面的方法1、close()2、commit    对数据的增删改的时候用3、rollbackcursor.execute  执行sql语句 cursor 里面的方法execute  执行sql 语句close  关闭fetchone   fetchone 获取一条数据 以元组的形式显示出来fetchall   fetchone 获取所有数据 以元组的形式显示出来  需要循环显示'''</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> MySQL </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分支管理</title>
      <link href="git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="git-分支相关常用命令"><a href="#git-分支相关常用命令" class="headerlink" title="git 分支相关常用命令"></a>git 分支相关常用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash">// 查看本地分支<span class="token function">git</span> branch// 查看远程分支<span class="token function">git</span> branch -r// 查看分支详细信息<span class="token function">git</span> branch -vv// 同步远程仓库<span class="token function">git</span> fetch// 创建分支dev<span class="token function">git</span> branch dev// 切换到分支dev<span class="token function">git</span> checkout dev// 删除分支dev<span class="token function">git</span> branch -d dev// 创建并切换到分支dev<span class="token function">git</span> checkout -b dev// 合并分支<span class="token function">git</span> merge dev</code></pre><h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2><h3 id="创建远程分支"><a href="#创建远程分支" class="headerlink" title="创建远程分支"></a>创建远程分支</h3><p><code>git push (远程仓库名) (分支名)</code> 或</p><pre class="language-none"><code class="language-none">git push (远程仓库名) (本地分支名:运程分支名)&#x2F;&#x2F; 创建远程分支dev  git push origin dev&#x2F;&#x2F; 或             git push origin dev:dev</code></pre><p>意思为取出本地的dev分支，推送到远程的仓库中的dev分支去。</p><h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3><blockquote><p>从远程分支 <code>checkout</code> 出来的本地分支，称为 <em>跟踪分支</em> (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 <code>git push</code>，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 <code>git pull</code> 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</p></blockquote><pre class="language-none"><code class="language-none">git checkout -b [分支名] [远程名]&#x2F;[分支名]git checkout --track origin&#x2F;dev&#x2F;&#x2F; 从远程分支dev创建本地分支featuregit checkout -b feature origin&#x2F;dev</code></pre><blockquote><p>在克隆仓库时，Git 通常会自动创建一个名为 <code>master</code> 的分支来跟踪 <code>origin/master</code>。这正是 <code>git push</code> 和 <code>git pull</code> 一开始就能正常工作的原因。</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">// 将本地分支feature的远程分支设为orgin/dev<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev</code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>语法：<code>git push [远程名] :[分支名]</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">// 删除远程分支dev<span class="token function">git</span> push origin :dev</code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>从仓库更新更新跟踪的远程分支</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span class="token function">git</span> pull origin</code></pre><p>从远程分支master合并到当前分支</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master</code></pre><p>相当于</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next</code></pre><p>参考：<a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">Git-分支-远程分支</a></p><h1 id="与Github同步"><a href="#与Github同步" class="headerlink" title="与Github同步"></a>与Github同步</h1><p>将本地的一个目录下的文件与Github上一个仓库相关联。</p><pre class="language-bash" data-language="bash"><code class="language-bash">// 初始化本地<span class="token function">git</span> init// 增加远程仓库地址<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:Zhao-Hui-Huang/GitLearn.git// 从远程仓库同步<span class="token function">git</span> fetch// 检出<span class="token function">git</span> checkout --track origin/master<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m<span class="token string">'add test file'</span><span class="token function">git</span> push</code></pre><h1 id="Git-比较命令"><a href="#Git-比较命令" class="headerlink" title="Git 比较命令"></a>Git 比较命令</h1><pre class="language-bash" data-language="bash"><code class="language-bash">// 比较工作区与暂存区的文件<span class="token function">git</span> <span class="token function">diff</span>// 比较暂存区与最后一次commit的文件<span class="token function">git</span> <span class="token function">diff</span> --cached// 比较工作区与最后一次commit的文件<span class="token function">git</span> <span class="token function">diff</span> HEAD</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python2python3区别</title>
      <link href="python2python3%E5%8C%BA%E5%88%AB/"/>
      <url>python2python3%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="python2和python3的区别"><a href="#python2和python3的区别" class="headerlink" title="python2和python3的区别"></a>python2和python3的区别</h1><p>print语句被python3废弃，只能使用print函数</p><p>Python3中字符串是Unicode (utf-8)编码，支持中文做标识符。</p><p>python2中是ASCII编码，需要更改字符集才能正常支持中文，所以在.py文件中会看到#– coding: UTF-8 –</p><p>异常处理 Python2中try:…except Exception, e:…，在Python3中改为了try:…except Exception as e:…</p><p>Python3中不再使用xrange方法，只有range方法。</p><p>range在Python2中返回列表，而在Python3中返回range可迭代对象。</p><p>在Python2中有两个不等运算符!=和&lt;&gt;，在Python3中去掉了&lt;&gt;，只有!=符号表示不等</p><p>在Python2中双反引号<code>可以替代repr函数，在Python3中去掉了双反引号的表是方法，只能用repr</code>方法。</p><p>StringIO模块现在被合并到新的io模组内。new, md5, gopherlib等模块被删除。</p><p>httplib, BaseHTTPServer, CGIHTTPServer, SimpleHTTPServer, Cookie, cookielib被合并到http包内。</p><p>取消了exec语句，只剩下exec()函数。</p><p>在Python2中long是比int取值范围更大的整数，Python3中取消了long类型，int的取值范围扩大到之前的long类型范围。</p><p>列表推导 不再支持[n for n in a,b]语法，改为[n for n in (a,b)]或[n for n in [a,b]]</p><p>python 2 中通过input输入的类型是int，只有通过raw_input()输入的类型才是str。</p><p>python 3中通过input输入的类型都是str，去掉了row_input()方法。</p><h2 id="python3-6中dict有序"><a href="#python3-6中dict有序" class="headerlink" title="python3.6中dict有序"></a>python3.6中dict有序</h2><p>有序是指遍历时的输出顺序与输入顺序相同</p><h2 id="关于哈希表"><a href="#关于哈希表" class="headerlink" title="关于哈希表"></a>关于哈希表</h2><ol><li>散列表概念 散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</li><li>哈希函数 给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。 （相关：是不是可以这样理解，数组可以通过下标进行访问，时间复杂度是O(1)，对于不连续存储的数据结构，如果知道下标也可以直接进行访问，所以可以通过哈希函数将key映射成数组下标，进行访问）</li><li>冲突 不同的key经过hash函数运行后得到相同的值，产生冲突；</li><li>冲突解决方式</li><li>开放寻址：线性探测、二次探测、伪随机数序列（python的dict解决冲突用的这个，具体的策略没有看太明白）</li><li>再哈希法：将哈希值再哈希，然后存储；</li><li>链地址法：hash过后值相同的存储在链表里；</li><li>公共溢出区</li></ol><p>python实现dict无序到有序：</p><ol><li><p>原先的内存布局entries为哈希表，表中直接存储PyDictKeyEntry（hash、key、value），也就是说当当前位置为空的时候存的是（0， null， null）浪费了大量内存；</p></li><li><p>python3.6: indices充当哈希表，存储的entries的index，使用index去访问存有PyDictKeyEntry的数组</p></li></ol><h2 id="python3-dict性能优化"><a href="#python3-dict性能优化" class="headerlink" title="python3 dict性能优化"></a>python3 dict性能优化</h2><p>节省存储空间：将存储PyDictKeyEntry的稀疏数组更改为存储int的稀疏数组； 之前的dict_entry是稀疏表，经压缩后在密集表上循环，使用更少的内存； 调整大小更快，并且触及更少的内存。 目前，每一个散列/键/值条目在一个过程中被移动或复制调整。 在新的布局中，只有索引是更新。 大多数情况下，散列/键/值条目从不移动（除了偶尔交换填充删除留下的空洞）。</p><h2 id="range和xrange区别"><a href="#range和xrange区别" class="headerlink" title="range和xrange区别"></a>range和xrange区别</h2><p>range返回的是一个包含所有元素的列表，xrange返回的是一个生成器，生成器是一个可迭代对象，在对生成器进行迭代时，元素是逐个被创建的。而列表需要根据列表长度而开辟出相应的内存空间用来遍历，一般来看，在对大序列进行迭代的时候，因为xrange的特性，所以它会比较节约内存。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> python2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
